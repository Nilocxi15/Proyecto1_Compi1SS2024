
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\015\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\003\061" +
    "\000\002\004\051\000\002\005\004\000\002\005\003\000" +
    "\002\010\003\000\002\010\003\000\002\006\111\000\002" +
    "\007\051" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\004\004\010\001\002\000\004\002\ufffe\001" +
    "\002\000\004\002\000\001\002\000\004\002\ufffd\001\002" +
    "\000\004\002\uffff\001\002\000\004\006\013\001\002\000" +
    "\004\002\012\001\002\000\004\002\001\001\002\000\004" +
    "\010\014\001\002\000\004\011\015\001\002\000\004\007" +
    "\016\001\002\000\004\013\017\001\002\000\004\012\020" +
    "\001\002\000\004\013\021\001\002\000\004\006\022\001" +
    "\002\000\004\005\023\001\002\000\004\004\024\001\002" +
    "\000\004\014\025\001\002\000\004\015\026\001\002\000" +
    "\004\016\027\001\002\000\004\013\030\001\002\000\006" +
    "\026\032\040\031\001\002\000\004\013\105\001\002\000" +
    "\004\013\033\001\002\000\004\005\034\001\002\000\004" +
    "\017\035\001\002\000\004\013\036\001\002\000\004\027" +
    "\037\001\002\000\004\013\040\001\002\000\004\016\041" +
    "\001\002\000\004\021\042\001\002\000\004\017\043\001" +
    "\002\000\004\013\044\001\002\000\004\030\045\001\002" +
    "\000\004\013\046\001\002\000\004\016\047\001\002\000" +
    "\004\013\050\001\002\000\006\024\051\025\052\001\002" +
    "\000\004\013\063\001\002\000\004\013\053\001\002\000" +
    "\004\020\054\001\002\000\004\022\055\001\002\000\004" +
    "\020\056\001\002\000\004\004\057\001\002\000\004\033" +
    "\060\001\002\000\004\014\061\001\002\000\004\005\062" +
    "\001\002\000\004\002\ufffb\001\002\000\004\023\064\001" +
    "\002\000\004\013\065\001\002\000\004\031\066\001\002" +
    "\000\004\013\067\001\002\000\004\016\070\001\002\000" +
    "\004\013\071\001\002\000\004\032\072\001\002\000\006" +
    "\013\ufff9\032\072\001\002\000\004\013\074\001\002\000" +
    "\004\020\075\001\002\000\004\022\076\001\002\000\004" +
    "\020\077\001\002\000\004\004\100\001\002\000\004\033" +
    "\101\001\002\000\004\014\102\001\002\000\004\005\103" +
    "\001\002\000\004\002\ufffc\001\002\000\004\013\ufffa\001" +
    "\002\000\004\005\106\001\002\000\004\017\107\001\002" +
    "\000\004\013\110\001\002\000\004\027\111\001\002\000" +
    "\004\013\112\001\002\000\004\016\113\001\002\000\004" +
    "\021\114\001\002\000\004\017\115\001\002\000\004\013" +
    "\116\001\002\000\004\030\117\001\002\000\004\013\120" +
    "\001\002\000\004\016\121\001\002\000\004\013\122\001" +
    "\002\000\006\024\123\025\124\001\002\000\004\013\135" +
    "\001\002\000\004\013\125\001\002\000\004\020\126\001" +
    "\002\000\004\022\127\001\002\000\004\020\130\001\002" +
    "\000\004\004\131\001\002\000\004\033\132\001\002\000" +
    "\004\014\133\001\002\000\004\005\134\001\002\000\004" +
    "\002\ufff5\001\002\000\004\023\136\001\002\000\004\013" +
    "\137\001\002\000\004\031\140\001\002\000\004\013\141" +
    "\001\002\000\004\016\142\001\002\000\004\013\143\001" +
    "\002\000\006\032\144\035\145\001\002\000\004\013\ufff7" +
    "\001\002\000\004\013\ufff8\001\002\000\004\013\147\001" +
    "\002\000\004\023\150\001\002\000\004\013\151\001\002" +
    "\000\004\034\152\001\002\000\004\013\153\001\002\000" +
    "\004\016\154\001\002\000\004\013\155\001\002\000\006" +
    "\032\144\035\145\001\002\000\004\013\157\001\002\000" +
    "\004\023\160\001\002\000\004\013\161\001\002\000\004" +
    "\036\162\001\002\000\004\013\163\001\002\000\004\016" +
    "\164\001\002\000\004\013\165\001\002\000\004\032\072" +
    "\001\002\000\004\013\167\001\002\000\004\023\170\001" +
    "\002\000\004\013\171\001\002\000\004\037\172\001\002" +
    "\000\004\013\173\001\002\000\004\016\174\001\002\000" +
    "\004\013\175\001\002\000\004\032\072\001\002\000\004" +
    "\013\177\001\002\000\004\020\200\001\002\000\004\022" +
    "\201\001\002\000\004\020\202\001\002\000\004\004\203" +
    "\001\002\000\004\033\204\001\002\000\004\014\205\001" +
    "\002\000\004\005\206\001\002\000\004\002\ufff6\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\204\000\014\002\010\003\004\004\006\006\003\007" +
    "\005\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\005\072\001\001" +
    "\000\004\005\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\145\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\010\155\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\005\165\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\175\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static String resultado = null;
    public static String usuario = null;

    public static String nameUser = null;
    public static String passwordUser = null;
    public static String name = null;
    public static String institution = null;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer$actions {



  private final S_Analyzer parser;

  /** Constructor */
  CUP$S_Analyzer$actions(S_Analyzer parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer$do_action_part00000000(
    int                        CUP$S_Analyzer$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer$parser,
    java.util.Stack            CUP$S_Analyzer$stack,
    int                        CUP$S_Analyzer$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer$parser.done_parsing();
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= CORRECTO 
            {
              String RESULT =null;

              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= INCORRECTO 
            {
              String RESULT =null;

              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= AGREGARCORRECTO 
            {
              String RESULT =null;

              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= AGREGARINCORRECTO 
            {
              String RESULT =null;

              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // CORRECTO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark LoginUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Ok QuotationMark Comma QuotationMark Usuario QuotationMark Colon QuotationMark NAME QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).value;
		System.out.println("Sentencia correcta y aceptada");
            resultado = "Correcto";
            usuario = name;
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("CORRECTO",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-46)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INCORRECTO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark LoginUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Error QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Sentencia correcta y password incorrecta");
                resultado = "Incorrecto";
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("INCORRECTO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-38)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // NAME ::= Name NAME 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("NAME",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // NAME ::= Name 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("NAME",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VALUES ::= Values 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("VALUES",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // VALUES ::= Name 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("VALUES",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // AGREGARCORRECTO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Ok QuotationMark Comma QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma QuotationMark NameSentence QuotationMark Colon QuotationMark NAME QuotationMark Comma QuotationMark Institution QuotationMark Colon QuotationMark NAME QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		int usernameleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-32)).left;
		int usernameright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-32)).right;
		String username = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-32)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-24)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-24)).right;
		String password = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-24)).value;
		int nameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-16)).left;
		int nameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-16)).right;
		String nameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-16)).value;
		int institutionValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).left;
		int institutionValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).right;
		String institutionVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-8)).value;
		System.out.println("Sentencia de modificacion de usuario correcta y aceptada");
                    nameUser = username;
                    passwordUser = password;
                    name = nameVal;
                    institution = institutionVal;
                    resultado = "Correcto";
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("AGREGARCORRECTO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-70)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // AGREGARINCORRECTO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Error QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Sentencia correcta, usuario ya existe");
                      resultado = "Incorrecto";
              CUP$S_Analyzer$result = parser.getSymbolFactory().newSymbol("AGREGARINCORRECTO",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.elementAt(CUP$S_Analyzer$top-38)), ((java_cup.runtime.Symbol)CUP$S_Analyzer$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer$do_action(
    int                        CUP$S_Analyzer$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer$parser,
    java.util.Stack            CUP$S_Analyzer$stack,
    int                        CUP$S_Analyzer$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer$do_action_part00000000(
                               CUP$S_Analyzer$act_num,
                               CUP$S_Analyzer$parser,
                               CUP$S_Analyzer$stack,
                               CUP$S_Analyzer$top);
    }
}

}
