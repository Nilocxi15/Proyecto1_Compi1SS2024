
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import models.TError;
import models.createUser;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer_Requests extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols_Requests.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer_Requests() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer_Requests(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer_Requests(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\106\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\021\014\000\002\017\003\000\002\017\007" +
    "\000\002\017\002\000\002\020\004\000\002\020\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\003\003\000\002\004\027\000\002\004" +
    "\004\000\002\010\013\000\002\010\011\000\002\010\003" +
    "\000\002\011\012\000\002\011\012\000\002\011\012\000" +
    "\002\011\012\000\002\011\012\000\002\011\003\000\002" +
    "\005\027\000\002\005\004\000\002\022\013\000\002\022" +
    "\011\000\002\022\003\000\002\023\012\000\002\023\012" +
    "\000\002\023\012\000\002\023\012\000\002\023\012\000" +
    "\002\023\003\000\002\006\027\000\002\006\004\000\002" +
    "\024\015\000\002\024\013\000\002\024\003\000\002\007" +
    "\027\000\002\007\004\000\002\012\014\000\002\012\012" +
    "\000\002\012\003\000\002\013\012\000\002\013\010\000" +
    "\002\013\012\000\002\013\012\000\002\013\012\000\002" +
    "\013\012\000\002\013\003\000\002\025\027\000\002\025" +
    "\004\000\002\026\015\000\002\026\013\000\002\026\003" +
    "\000\002\014\003\000\002\014\003\000\002\014\003\000" +
    "\002\014\003\000\002\016\004\000\002\016\004\000\002" +
    "\016\003\000\002\016\003\000\002\016\003\000\002\015" +
    "\004\000\002\015\003\000\002\015\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\003\004\004\006\001\002\000\004\002" +
    "\uffff\001\002\000\010\002\ufffb\003\030\004\031\001\002" +
    "\000\004\006\011\001\002\000\004\002\010\001\002\000" +
    "\004\002\001\001\002\000\004\020\012\001\002\000\004" +
    "\021\013\001\002\000\004\007\014\001\002\000\004\010" +
    "\015\001\002\000\004\022\016\001\002\000\004\010\017" +
    "\001\002\000\004\006\020\001\002\000\004\005\021\001" +
    "\002\000\010\002\ufffe\003\ufffe\004\ufffe\001\002\000\010" +
    "\002\ufff5\003\ufff5\004\ufff5\001\002\000\010\002\ufff8\003" +
    "\ufff8\004\ufff8\001\002\000\010\002\ufff4\003\ufff4\004\ufff4" +
    "\001\002\000\004\002\000\001\002\000\004\002\ufffd\001" +
    "\002\000\010\002\ufff6\003\ufff6\004\ufff6\001\002\000\006" +
    "\003\030\004\u0134\001\002\000\004\011\033\001\002\000" +
    "\010\002\ufff7\003\ufff7\004\ufff7\001\002\000\006\023\034" +
    "\024\035\001\002\000\004\012\047\001\002\000\004\005" +
    "\036\001\002\000\006\003\030\004\040\001\002\000\006" +
    "\003\030\004\040\001\002\000\006\011\043\026\042\001" +
    "\002\000\004\002\ufffc\001\002\000\004\011\044\001\002" +
    "\000\004\023\034\001\002\000\004\005\045\001\002\000" +
    "\004\002\ufff9\001\002\000\004\002\ufffa\001\002\000\004" +
    "\010\050\001\002\000\014\027\054\030\051\031\052\051" +
    "\053\056\055\001\002\000\004\010\362\001\002\000\004" +
    "\010\327\001\002\000\004\010\216\001\002\000\004\010" +
    "\111\001\002\000\004\010\056\001\002\000\004\005\057" +
    "\001\002\000\004\014\060\001\002\000\004\010\061\001" +
    "\002\000\004\043\062\001\002\000\004\010\063\001\002" +
    "\000\004\012\064\001\002\000\004\016\065\001\002\000" +
    "\006\003\067\014\066\001\002\000\004\010\077\001\002" +
    "\000\004\017\uffc8\001\002\000\004\017\071\001\002\000" +
    "\004\015\072\001\002\000\004\004\073\001\002\000\004" +
    "\025\074\001\002\000\004\011\075\001\002\000\004\005" +
    "\076\001\002\000\010\002\uffcc\003\uffcc\004\uffcc\001\002" +
    "\000\004\044\100\001\002\000\004\010\101\001\002\000" +
    "\004\012\102\001\002\000\004\010\103\001\002\000\004" +
    "\050\104\001\002\000\004\010\105\001\002\000\004\015" +
    "\106\001\002\000\006\013\107\017\uffc9\001\002\000\006" +
    "\003\067\014\066\001\002\000\004\017\uffca\001\002\000" +
    "\004\005\112\001\002\000\004\014\113\001\002\000\004" +
    "\010\114\001\002\000\004\032\115\001\002\000\004\010" +
    "\116\001\002\000\004\012\117\001\002\000\004\016\120" +
    "\001\002\000\006\003\122\014\121\001\002\000\006\003" +
    "\133\010\132\001\002\000\004\017\uffef\001\002\000\004" +
    "\017\124\001\002\000\004\015\125\001\002\000\004\004" +
    "\126\001\002\000\004\025\127\001\002\000\004\011\130" +
    "\001\002\000\004\005\131\001\002\000\010\002\ufff3\003" +
    "\ufff3\004\ufff3\001\002\000\014\033\145\034\146\035\150" +
    "\036\147\041\144\001\002\000\010\003\uffe9\010\uffe9\015" +
    "\uffe9\001\002\000\006\003\133\010\132\001\002\000\006" +
    "\003\133\010\132\001\002\000\006\003\133\010\132\001" +
    "\002\000\006\003\133\010\132\001\002\000\004\015\141" +
    "\001\002\000\006\013\142\017\ufff0\001\002\000\006\003" +
    "\122\014\121\001\002\000\004\017\ufff1\001\002\000\004" +
    "\010\210\001\002\000\004\010\202\001\002\000\004\010" +
    "\170\001\002\000\004\010\162\001\002\000\004\010\151" +
    "\001\002\000\004\012\152\001\002\000\004\010\153\001" +
    "\002\000\006\003\154\037\156\001\002\000\004\010\uffbc" +
    "\001\002\000\004\010\160\001\002\000\010\003\154\010" +
    "\uffbd\037\156\001\002\000\004\010\uffbe\001\002\000\004" +
    "\013\161\001\002\000\010\003\uffec\010\uffec\015\uffec\001" +
    "\002\000\004\012\163\001\002\000\004\010\164\001\002" +
    "\000\006\003\154\037\156\001\002\000\004\010\166\001" +
    "\002\000\004\013\167\001\002\000\010\003\uffeb\010\uffeb" +
    "\015\uffeb\001\002\000\004\012\171\001\002\000\004\010" +
    "\172\001\002\000\012\003\174\037\176\040\177\047\175" +
    "\001\002\000\004\010\200\001\002\000\004\010\uffc4\001" +
    "\002\000\004\010\uffc5\001\002\000\004\010\uffc6\001\002" +
    "\000\004\010\uffc7\001\002\000\004\013\201\001\002\000" +
    "\010\003\uffed\010\uffed\015\uffed\001\002\000\004\012\203" +
    "\001\002\000\004\010\204\001\002\000\012\003\174\037" +
    "\176\040\177\047\175\001\002\000\004\010\206\001\002" +
    "\000\004\013\207\001\002\000\010\003\uffee\010\uffee\015" +
    "\uffee\001\002\000\004\012\211\001\002\000\004\010\212" +
    "\001\002\000\004\042\213\001\002\000\004\010\214\001" +
    "\002\000\004\013\215\001\002\000\010\003\uffea\010\uffea" +
    "\015\uffea\001\002\000\004\005\217\001\002\000\004\014" +
    "\220\001\002\000\004\010\221\001\002\000\004\043\222" +
    "\001\002\000\004\010\223\001\002\000\004\012\224\001" +
    "\002\000\004\016\225\001\002\000\006\003\230\014\227" +
    "\001\002\000\004\017\321\001\002\000\006\003\232\010" +
    "\231\001\002\000\004\017\uffd4\001\002\000\016\035\250" +
    "\041\244\044\247\045\251\046\246\052\245\001\002\000" +
    "\010\003\uffcd\010\uffcd\015\uffcd\001\002\000\006\003\232" +
    "\010\231\001\002\000\006\003\232\010\231\001\002\000" +
    "\006\003\232\010\231\001\002\000\006\003\232\010\231" +
    "\001\002\000\006\003\232\010\231\001\002\000\004\015" +
    "\241\001\002\000\006\013\242\017\uffd5\001\002\000\006" +
    "\003\230\014\227\001\002\000\004\017\uffd6\001\002\000" +
    "\004\010\313\001\002\000\004\010\305\001\002\000\004" +
    "\010\277\001\002\000\004\010\271\001\002\000\004\010" +
    "\256\001\002\000\004\010\252\001\002\000\004\012\253" +
    "\001\002\000\004\047\254\001\002\000\004\013\255\001" +
    "\002\000\010\003\uffd2\010\uffd2\015\uffd2\001\002\000\004" +
    "\012\257\001\002\000\004\010\260\001\002\000\010\003" +
    "\261\037\263\040\264\001\002\000\004\010\uffbf\001\002" +
    "\000\004\010\267\001\002\000\012\003\261\010\uffc0\037" +
    "\263\040\264\001\002\000\012\003\261\010\uffc1\037\263" +
    "\040\264\001\002\000\004\010\uffc3\001\002\000\004\010" +
    "\uffc2\001\002\000\004\013\270\001\002\000\010\003\uffd1" +
    "\010\uffd1\015\uffd1\001\002\000\004\012\272\001\002\000" +
    "\004\010\273\001\002\000\004\050\274\001\002\000\004" +
    "\010\275\001\002\000\004\013\276\001\002\000\010\003" +
    "\uffd3\010\uffd3\015\uffd3\001\002\000\004\012\300\001\002" +
    "\000\004\010\301\001\002\000\010\003\261\037\263\040" +
    "\264\001\002\000\004\010\303\001\002\000\004\013\304" +
    "\001\002\000\010\003\uffd0\010\uffd0\015\uffd0\001\002\000" +
    "\004\012\306\001\002\000\004\010\307\001\002\000\006" +
    "\003\154\037\156\001\002\000\004\010\311\001\002\000" +
    "\004\013\312\001\002\000\010\003\uffcf\010\uffcf\015\uffcf" +
    "\001\002\000\004\012\314\001\002\000\004\010\315\001" +
    "\002\000\004\042\316\001\002\000\004\010\317\001\002" +
    "\000\004\013\320\001\002\000\010\003\uffce\010\uffce\015" +
    "\uffce\001\002\000\004\015\322\001\002\000\004\004\323" +
    "\001\002\000\004\025\324\001\002\000\004\011\325\001" +
    "\002\000\004\005\326\001\002\000\010\002\uffd8\003\uffd8" +
    "\004\uffd8\001\002\000\004\005\330\001\002\000\004\014" +
    "\331\001\002\000\004\010\332\001\002\000\004\032\333" +
    "\001\002\000\004\010\334\001\002\000\004\012\335\001" +
    "\002\000\004\016\336\001\002\000\006\003\340\014\337" +
    "\001\002\000\004\010\350\001\002\000\004\017\uffd9\001" +
    "\002\000\004\017\342\001\002\000\004\015\343\001\002" +
    "\000\004\004\344\001\002\000\004\025\345\001\002\000" +
    "\004\011\346\001\002\000\004\005\347\001\002\000\010" +
    "\002\uffdd\003\uffdd\004\uffdd\001\002\000\004\033\351\001" +
    "\002\000\004\010\352\001\002\000\004\012\353\001\002" +
    "\000\004\010\354\001\002\000\012\003\174\037\176\040" +
    "\177\047\175\001\002\000\004\010\356\001\002\000\004" +
    "\015\357\001\002\000\006\013\360\017\uffda\001\002\000" +
    "\006\003\340\014\337\001\002\000\004\017\uffdb\001\002" +
    "\000\004\005\363\001\002\000\004\014\364\001\002\000" +
    "\004\010\365\001\002\000\004\032\366\001\002\000\004" +
    "\010\367\001\002\000\004\012\370\001\002\000\004\016" +
    "\371\001\002\000\006\003\373\014\372\001\002\000\006" +
    "\003\u0104\010\u0103\001\002\000\004\017\uffe4\001\002\000" +
    "\004\017\375\001\002\000\004\015\376\001\002\000\004" +
    "\004\377\001\002\000\004\025\u0100\001\002\000\004\011" +
    "\u0101\001\002\000\004\005\u0102\001\002\000\010\002\uffe8" +
    "\003\uffe8\004\uffe8\001\002\000\014\027\u010f\036\u0110\053" +
    "\u010d\054\u010e\055\u0111\001\002\000\010\003\uffde\010\uffde" +
    "\015\uffde\001\002\000\006\003\u0104\010\u0103\001\002\000" +
    "\006\003\u0104\010\u0103\001\002\000\006\003\u0104\010\u0103" +
    "\001\002\000\006\003\u0104\010\u0103\001\002\000\004\015" +
    "\u010a\001\002\000\006\013\u010b\017\uffe5\001\002\000\006" +
    "\003\373\014\372\001\002\000\004\017\uffe6\001\002\000" +
    "\004\010\u012a\001\002\000\004\010\u0124\001\002\000\004" +
    "\010\u011e\001\002\000\004\010\u0118\001\002\000\004\010" +
    "\u0112\001\002\000\004\012\u0113\001\002\000\004\010\u0114" +
    "\001\002\000\004\042\u0115\001\002\000\004\010\u0116\001" +
    "\002\000\004\013\u0117\001\002\000\010\003\uffe0\010\uffe0" +
    "\015\uffe0\001\002\000\004\012\u0119\001\002\000\004\010" +
    "\u011a\001\002\000\006\003\154\037\156\001\002\000\004" +
    "\010\u011c\001\002\000\004\013\u011d\001\002\000\010\003" +
    "\uffdf\010\uffdf\015\uffdf\001\002\000\004\012\u011f\001\002" +
    "\000\004\010\u0120\001\002\000\012\003\174\037\176\040" +
    "\177\047\175\001\002\000\004\010\u0122\001\002\000\004" +
    "\013\u0123\001\002\000\010\003\uffe2\010\uffe2\015\uffe2\001" +
    "\002\000\004\012\u0125\001\002\000\004\010\u0126\001\002" +
    "\000\012\003\174\037\176\040\177\047\175\001\002\000" +
    "\004\010\u0128\001\002\000\004\013\u0129\001\002\000\010" +
    "\003\uffe1\010\uffe1\015\uffe1\001\002\000\004\012\u012b\001" +
    "\002\000\004\010\u012c\001\002\000\012\003\174\037\176" +
    "\040\177\047\175\001\002\000\004\010\u012e\001\002\000" +
    "\004\013\u012f\001\002\000\010\003\uffe3\010\uffe3\015\uffe3" +
    "\001\002\000\010\002\uffdc\003\uffdc\004\uffdc\001\002\000" +
    "\010\002\uffe7\003\uffe7\004\uffe7\001\002\000\010\002\ufff2" +
    "\003\ufff2\004\ufff2\001\002\000\010\002\uffd7\003\uffd7\004" +
    "\uffd7\001\002\000\004\011\043\001\002\000\010\002\uffcb" +
    "\003\uffcb\004\uffcb\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0133\000\006\002\006\021\004\001\001\000\002\001" +
    "\001\000\020\003\025\004\022\005\031\006\026\007\021" +
    "\017\024\025\023\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\014\004\u0131\005\u0130\006\u012f\007\u0132\025\u0134\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\020\003\036\004" +
    "\022\005\031\006\026\007\021\020\040\025\023\001\001" +
    "\000\020\003\036\004\022\005\031\006\026\007\021\020" +
    "\045\025\023\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\026\067\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\026\107\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\010\122\001\001\000" +
    "\004\011\133\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\011\134\001\001\000" +
    "\004\011\135\001\001\000\004\011\136\001\001\000\004" +
    "\011\137\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\015\154\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\156\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\164\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\172\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\014\204\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\225\001\001" +
    "\000\002\001\001\000\004\013\232\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\233" +
    "\001\001\000\004\013\234\001\001\000\004\013\235\001" +
    "\001\000\004\013\236\001\001\000\004\013\237\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\242\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\016\261\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\016\265\001\001\000\004\016\264\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\301\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\307\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\024\340\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\014\354\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\360\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\373\001\001\000\004\023\u0104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\u0105\001\001\000\004\023\u0106\001\001\000\004\023\u0107" +
    "\001\001\000\004\023\u0108\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\022\u010b\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\u011a\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0120\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u0126\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\014\u012c\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer_Requests$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer_Requests$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer_Requests$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<TError> TablaESS = new LinkedList<TError>();

    public boolean result = false;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s) {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        int tipo = s.sym;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);
        System.out.println("\t\tTipo: " + tipo);

        // Sugerencia del token esperado
        String expectedToken = getExpectedToken(tipo);

        TError data = new TError(lexema, fila, columna, "Sintáctico", "Se esperaba el token '" + expectedToken + "'");
        TablaESS.add(data);
    }

private String getExpectedToken(int tipo) {
    switch (tipo) {
        case Symbols_Requests.LessThan:
            return ">' o '}";
        case Symbols_Requests.GreaterThan:
            return "?' , '!' o '";
        case Symbols_Requests.QuestionMark:
            return "<' o ' \" (comilla)";
        case Symbols_Requests.Equal:
            return "version";
        case Symbols_Requests.QuotationMark:
            return ":' , '{' , ' , (coma)' o 'valor del campo";
        case Symbols_Requests.ExclamationMark:
            return "<' o la sentencia 'fin_solicitud(es)_realizada(s)";
        case Symbols_Requests.Colon:
            return "de instrucción' o 'nombre del campo";
        case Symbols_Requests.Comma:
            return "\" (comilla)' o '}";
        case Symbols_Requests.LeftBrace:
            return ">' , '[' o ' , (coma)";
        case Symbols_Requests.RightBrace:
            return ", (coma)' o ']";
        case Symbols_Requests.LeftBracket:
            return ":";
        case Symbols_Requests.RightBracket:
            return "]";
        case Symbols_Requests.XSONsentence:
            return "?";
        case Symbols_Requests.Version:
            return "xson";
        case Symbols_Requests.VersionNumber:
            return "\" (comilla)";
        case Symbols_Requests.RealizarSolicitud:
            return "!";
        case Symbols_Requests.RealizarSolicitudes:
            return "!";
        case Symbols_Requests.FinSolicitud:
            return "<";
        case Symbols_Requests.FinSolicitudes:
            return "<";
        case Symbols_Requests.UsuarioNuevo:
            return "\" (comilla)";
        case Symbols_Requests.ModificarUsuario:
            return "ModificarUsuario";
        case Symbols_Requests.EliminarUsuario:
            return "\" (comilla)";
        case Symbols_Requests.DatosUsuario:
            return "\" (comilla)";
        case Symbols_Requests.Usuario:
            return "\" (comilla)";
        case Symbols_Requests.Password:
            return "\" (comilla)";
        case Symbols_Requests.Nombre:
            return "\" (comilla)";
        case Symbols_Requests.Institucion:
            return "\" (comilla)";
        case Symbols_Requests.NIValue:
            return "NIValue";
        case Symbols_Requests.UPValue:
            return "UPValue";
        case Symbols_Requests.FechaCreacion:
            return "\" (comilla)";
        case Symbols_Requests.Date:
            return "\" (comilla)";
        // Agrega más casos según los tokens que manejes
        default:
            return "token desconocido";
    }
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer_Requests$actions {


    //Verificación de campos completos USUARIONUEVO
    int contUser = 0;
    int contPass = 0;
    int contName = 0;
    int contInst = 0;
    int contDate = 0;

    int contFields = 0;

    public void contFields(String field){
        switch(field){
            case "Usuario":
                contUser++;
                contFields++;
                break;
            case "Password":
                contPass++;
                contFields++;
                break;
            case "Nombre":
                contName++;
                contFields++;
                break;
            case "Institucion":
                contInst++;
                contFields++;
                break;
            case "FechaCreacion":
                contDate++;
                contFields++;
                break;
        }
    }

    public void cleanFields(){
        contUser = 0;
        contPass = 0;
        contName = 0;
        contInst = 0;
        contDate = 0;
        contFields = 0;
    }

    public void checkFields(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFields/contUser) != 5){
            result = false;
            System.out.println("Error: El campo Usuario no esta completo o esta duplicado");
            TError datos = new TError("Usuario", line, column, "Semántico", "Campo USUARIO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contPass) != 5){
            result = false;
            System.out.println("Error: El campo Password no esta completo o esta duplicado");
            TError datos = new TError("Password", line, column, "Semántico", "Campo PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contName) != 5){
            result = false;
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contInst) != 5){
            result = false;
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contDate) != 5){
            result = false;
            System.out.println("Error: El campo Fecha de Creacion esta repetido");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION duplicado");
            TablaESS.add(datos);
        }
    }

    //Verificación de campos completos NUEVATRIVIA
    int contIDTrivia = 0;
    int contTime = 0;
    int contNameNV = 0;
    int contTheme = 0;
    int contUserNV = 0;
    int contDateNV = 0;
    int contFieldsNV = 0;

    private void contFieldsNV(String field){
        contFieldsNV++;
        switch(field){
            case "IDTrivia":
                contIDTrivia++;
                break;
            case "Tiempo":
                contTime++;
                break;
            case "Nombre":
                contNameNV++;
                break;
            case "Tema":
                contTheme++;
                break;
            case "UsuarioCreacion":
                contUserNV++;
                break;
            case "FechaCreacion":
                contDateNV++;
                break;
        }
    }

    private void checkFieldsNV(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFieldsNV/contIDTrivia) != 6){
            result = false;
            System.out.println("Error: El campo IDTrivia no esta completo o esta duplicado");
            TError datos = new TError("IDTrivia", line, column, "Semántico", "Campo ID_TRIVIA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contTime) != 6){
            result = false;
            System.out.println("Error: El campo Tiempo no esta completo o esta duplicado");
            TError datos = new TError("Tiempo", line, column, "Semántico", "Campo TIEMPO_PREGUNTA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contNameNV) != 6){
            result = false;
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contTheme) != 6){
            result = false;
            System.out.println("Error: El campo Tema no esta completo o esta duplicado");
            TError datos = new TError("Tema", line, column, "Semántico", "Campo TEMA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contUserNV) != 6){
            result = false;
            System.out.println("Error: El campo Usuario de Creacion no esta completo o esta duplicado");
            TError datos = new TError("UsuarioCreacion", line, column, "Semántico", "Campo USUARIO_CREACION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contDateNV) != 6){
            result = false;
            System.out.println("Error: El campo Fecha de Creacion no esta completo o esta duplicado");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION faltante o repetido");
            TablaESS.add(datos);
        }
    }

    private void cleanFieldsNV(){
        contIDTrivia = 0;
        contTime = 0;
        contNameNV = 0;
        contTheme = 0;
        contUserNV = 0;
        contDateNV = 0;
        contFieldsNV = 0;
    }

    //Verificación de campos completos MODIFICARUSUARIO
    int contUserA = 0;
    int contUserN = 0;
    int contPassN = 0;
    int fechaMod = 0;
    int inst = 0;
    int contFieldsMU = 0;

    private void contFieldsMU(String field){
        contFieldsMU++;
        switch(field){
            case "UsuarioAntiguo":
                contUserA++;
                break;
            case "UsuarioNuevo":
                contUserN++;
                break;
            case "NuevoPassword":
                contPassN++;
                break;
            case "FechaModificacion":
                fechaMod++;
                break;
            case "Institucion":
                inst++;
                break;
        }
    }

    private void cleanFieldsMU(){
        contUserA = 0;
        contUserN = 0;
        contPassN = 0;
        fechaMod = 0;
        inst = 0;
        contFieldsMU = 0;
    }

    private void checkFieldsMU(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFieldsMU/contUserA) != 5){
            result = false;
            System.out.println("Error: El campo Usuario Antiguo no esta completo o esta duplicado");
            TError datos = new TError("UsuarioAntiguo", line, column, "Semántico", "Campo USUARIO_ANTIGUO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/contUserN) != 5){
            result = false;
            System.out.println("Error: El campo Usuario Nuevo no esta completo o esta duplicado");
            TError datos = new TError("UsuarioNuevo", line, column, "Semántico", "Campo USUARIO_NUEVO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/contPassN) != 5){
            result = false;
            System.out.println("Error: El campo Nuevo Password no esta completo o esta duplicado");
            TError datos = new TError("NuevoPassword", line, column, "Semántico", "Campo NUEVO_PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/fechaMod) != 5){
            result = false;
            System.out.println("Error: El campo Fecha de Modificacion no esta completo o esta duplicado");
            TError datos = new TError("FechaModificacion", line, column, "Semántico", "Campo FECHA_MODIFICACION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/inst) != 5){
            result = false;
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
    }

  private final S_Analyzer_Requests parser;

  /** Constructor */
  CUP$S_Analyzer_Requests$actions(S_Analyzer_Requests parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_Requests$do_action_part00000000(
    int                        CUP$S_Analyzer_Requests$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_Requests$parser,
    java.util.Stack            CUP$S_Analyzer_Requests$stack,
    int                        CUP$S_Analyzer_Requests$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer_Requests$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer_Requests$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer_Requests$parser.done_parsing();
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HEADER LOOP 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la sentencia inicial");
            cleanFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("HEADER",15, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-9)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LOOP ::= SINGLEREQUEST 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LOOP ::= LessThan ExclamationMark RealizarSolicitudes GreaterThan LOOP2 
            {
              Object RESULT =null;
		System.out.println("Entra en sentencia multiple");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-4)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LOOP ::= 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("LOOP",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LOOP2 ::= SINGLEREQUEST LOOP2 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("LOOP2",14, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LOOP2 ::= LessThan FinSolicitudes ExclamationMark GreaterThan 
            {
              Object RESULT =null;
		System.out.println("Sale de sentencia multiple");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("LOOP2",14, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-3)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SINGLEREQUEST ::= USUARIONUEVO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SINGLEREQUEST ::= MODIFICARUSUARIO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SINGLEREQUEST ::= ELIMINARUSUARIO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SINGLEREQUEST ::= NUEVATRIVIA 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // SINGLEREQUEST ::= ELIMINARTRIVIA 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // USUARIONUEVO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark UsuarioNuevo QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket NEWUSERLOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;
		cleanFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("USUARIONUEVO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // USUARIONUEVO ::= error USUARIONUEVO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de USUARIONUEVO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("USUARIONUEVO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace Comma NEWUSERLOOP 
            {
              Object RESULT =null;
		checkFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace 
            {
              Object RESULT =null;
		checkFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-6)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEWUSERLOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWUSERLOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEWUSERBLOCK ::= QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Usuario");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEWUSERBLOCK ::= QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Password");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEWUSERBLOCK ::= QuotationMark Nombre QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Nombre");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NEWUSERBLOCK ::= QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Institucion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NEWUSERBLOCK ::= QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("FechaCreacion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NEWUSERBLOCK ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWUSERBLOCK");
                result = false;
                cleanFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // MODIFICARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket MODIFICARUSUARIOLOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;
		cleanFieldsMU();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIO",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // MODIFICARUSUARIO ::= error MODIFICARUSUARIO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de MODIFICARUSUARIO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIO",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // MODIFICARUSUARIOLOOP ::= LeftBrace MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK RightBrace Comma MODIFICARUSUARIOLOOP 
            {
              Object RESULT =null;
		checkFieldsMU();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOLOOP",16, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // MODIFICARUSUARIOLOOP ::= LeftBrace MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK RightBrace 
            {
              Object RESULT =null;
		checkFieldsMU();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOLOOP",16, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-6)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // MODIFICARUSUARIOLOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de MODIFICARUSUARIOLOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOLOOP",16, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // MODIFICARUSUARIOBLOCK ::= QuotationMark UsuarioAntiguo QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsMU("UsuarioAntiguo");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MODIFICARUSUARIOBLOCK ::= QuotationMark UsuarioNuevo QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsMU("UsuarioNuevo");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // MODIFICARUSUARIOBLOCK ::= QuotationMark NuevoPassword QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsMU("NuevoPassword");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // MODIFICARUSUARIOBLOCK ::= QuotationMark FechaModificacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsMU("FechaModificacion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // MODIFICARUSUARIOBLOCK ::= QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsMU("Institucion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // MODIFICARUSUARIOBLOCK ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de MODIFICARUSUARIOBLOCK");
                        result = false;
                        cleanFieldsMU();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIOBLOCK",17, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ELIMINARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarUsuario QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket ELIMINARUSUARIOLOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // ELIMINARUSUARIO ::= error ELIMINARUSUARIO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de ELIMINARUSUARIO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ELIMINARUSUARIOLOOP ::= LeftBrace QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark RightBrace Comma ELIMINARUSUARIOLOOP 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIOLOOP",18, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-10)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ELIMINARUSUARIOLOOP ::= LeftBrace QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark RightBrace 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIOLOOP",18, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ELIMINARUSUARIOLOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de ELIMINARUSUARIOLOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIOLOOP",18, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NUEVATRIVIA ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark NuevaTrivia QuotationMark GreaterThan LeftBrace QuotationMark ParametrosTrivia QuotationMark Colon LeftBracket NEWTRIVIALOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;
		System.out.println("Sentencia de nueva trivia reconocida y aceptada");
                cleanFieldsNV();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NUEVATRIVIA",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // NUEVATRIVIA ::= error NUEVATRIVIA 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NUEVATRIVIA"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NUEVATRIVIA",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // NEWTRIVIALOOP ::= LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace Comma NEWTRIVIALOOP 
            {
              Object RESULT =null;
		checkFieldsNV();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIALOOP",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-9)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // NEWTRIVIALOOP ::= LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace 
            {
              Object RESULT =null;
		checkFieldsNV();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIALOOP",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // NEWTRIVIALOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWTRIVIALOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIALOOP",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // NEWTRIVIABLOCK ::= QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsNV("IDTrivia");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // NEWTRIVIABLOCK ::= QuotationMark TiempoPregunta QuotationMark Colon Time Comma 
            {
              Object RESULT =null;
		contFieldsNV("Tiempo");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-5)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // NEWTRIVIABLOCK ::= QuotationMark Nombre QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsNV("Nombre");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // NEWTRIVIABLOCK ::= QuotationMark Tema QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsNV("Tema");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // NEWTRIVIABLOCK ::= QuotationMark UsuarioCreacion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsNV("UsuarioCreacion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // NEWTRIVIABLOCK ::= QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              Object RESULT =null;
		contFieldsNV("FechaCreacion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // NEWTRIVIABLOCK ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWTRIVIABLOCK");
                    result = false;
                    cleanFieldsNV();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELIMINARTRIVIA ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarTrivia QuotationMark GreaterThan LeftBrace QuotationMark ParametrosTrivia QuotationMark Colon LeftBracket ELIMINARTRIVIALOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARTRIVIA",19, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELIMINARTRIVIA ::= error ELIMINARTRIVIA 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de ELIMINARTRIVIA"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARTRIVIA",19, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ELIMINARTRIVIALOOP ::= LeftBrace QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark RightBrace Comma ELIMINARTRIVIALOOP 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARTRIVIALOOP",20, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-10)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ELIMINARTRIVIALOOP ::= LeftBrace QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark RightBrace 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARTRIVIALOOP",20, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ELIMINARTRIVIALOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de ELIMINARTRIVIALOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARTRIVIALOOP",20, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // VALUES ::= UPValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // VALUES ::= NIValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // VALUES ::= Time 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // VALUES ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de VALUES"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // VALUESCONCAT ::= UPValue VALUESCONCAT 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // VALUESCONCAT ::= NIValue VALUESCONCAT 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // VALUESCONCAT ::= UPValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // VALUESCONCAT ::= NIValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // VALUESCONCAT ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de VALUESCONCAT"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // NAMES ::= NIValue NAMES 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // NAMES ::= NIValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // NAMES ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NAMES"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer_Requests$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_Requests$do_action(
    int                        CUP$S_Analyzer_Requests$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_Requests$parser,
    java.util.Stack            CUP$S_Analyzer_Requests$stack,
    int                        CUP$S_Analyzer_Requests$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer_Requests$do_action_part00000000(
                               CUP$S_Analyzer_Requests$act_num,
                               CUP$S_Analyzer_Requests$parser,
                               CUP$S_Analyzer_Requests$stack,
                               CUP$S_Analyzer_Requests$top);
    }
}

}
