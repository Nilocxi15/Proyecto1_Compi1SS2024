
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import models.TError;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer_Requests extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols_Requests.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer_Requests() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer_Requests(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer_Requests(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\033\000\002\002\004\000\002\002\015\000\002\002" +
    "\003\000\002\003\003\000\002\003\003\000\002\003\003" +
    "\000\002\004\027\000\002\004\004\000\002\005\022\000" +
    "\002\005\004\000\002\006\022\000\002\006\004\000\002" +
    "\007\013\000\002\007\011\000\002\007\003\000\002\010" +
    "\012\000\002\010\012\000\002\010\012\000\002\010\012" +
    "\000\002\010\012\000\002\010\003\000\002\011\003\000" +
    "\002\011\003\000\002\011\003\000\002\012\004\000\002" +
    "\012\003\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\006\003\004\004\005\001\002\000\004\002" +
    "\uffff\001\002\000\004\006\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\020\011\001" +
    "\002\000\004\021\012\001\002\000\004\007\013\001\002" +
    "\000\004\010\014\001\002\000\004\022\015\001\002\000" +
    "\004\010\016\001\002\000\004\006\017\001\002\000\004" +
    "\005\020\001\002\000\006\003\024\004\026\001\002\000" +
    "\004\002\ufffc\001\002\000\004\002\000\001\002\000\004" +
    "\002\ufffd\001\002\000\006\003\024\004\026\001\002\000" +
    "\004\002\ufffe\001\002\000\004\011\027\001\002\000\004" +
    "\023\030\001\002\000\004\012\031\001\002\000\004\010" +
    "\032\001\002\000\010\027\035\030\033\031\034\001\002" +
    "\000\004\010\154\001\002\000\004\010\142\001\002\000" +
    "\004\010\036\001\002\000\004\005\037\001\002\000\004" +
    "\014\040\001\002\000\004\010\041\001\002\000\004\032" +
    "\042\001\002\000\004\010\043\001\002\000\004\012\044" +
    "\001\002\000\004\016\045\001\002\000\006\003\047\014" +
    "\046\001\002\000\006\003\060\010\057\001\002\000\004" +
    "\017\ufff3\001\002\000\004\017\051\001\002\000\004\015" +
    "\052\001\002\000\004\004\053\001\002\000\004\025\054" +
    "\001\002\000\004\011\055\001\002\000\004\005\056\001" +
    "\002\000\004\002\ufffb\001\002\000\014\033\072\034\073" +
    "\035\075\036\074\041\071\001\002\000\010\003\uffed\010" +
    "\uffed\015\uffed\001\002\000\006\003\060\010\057\001\002" +
    "\000\006\003\060\010\057\001\002\000\006\003\060\010" +
    "\057\001\002\000\006\003\060\010\057\001\002\000\004" +
    "\015\066\001\002\000\006\013\067\017\ufff4\001\002\000" +
    "\006\003\047\014\046\001\002\000\004\017\ufff5\001\002" +
    "\000\004\010\134\001\002\000\004\010\126\001\002\000" +
    "\004\010\115\001\002\000\004\010\107\001\002\000\004" +
    "\010\076\001\002\000\004\012\077\001\002\000\004\010" +
    "\100\001\002\000\006\003\101\037\103\001\002\000\004" +
    "\010\uffe7\001\002\000\004\010\105\001\002\000\010\003" +
    "\101\010\uffe8\037\103\001\002\000\004\010\uffe9\001\002" +
    "\000\004\013\106\001\002\000\010\003\ufff0\010\ufff0\015" +
    "\ufff0\001\002\000\004\012\110\001\002\000\004\010\111" +
    "\001\002\000\006\003\101\037\103\001\002\000\004\010" +
    "\113\001\002\000\004\013\114\001\002\000\010\003\uffef" +
    "\010\uffef\015\uffef\001\002\000\004\012\116\001\002\000" +
    "\004\010\117\001\002\000\010\003\121\037\122\040\123" +
    "\001\002\000\004\010\124\001\002\000\004\010\uffea\001" +
    "\002\000\004\010\uffeb\001\002\000\004\010\uffec\001\002" +
    "\000\004\013\125\001\002\000\010\003\ufff1\010\ufff1\015" +
    "\ufff1\001\002\000\004\012\127\001\002\000\004\010\130" +
    "\001\002\000\010\003\121\037\122\040\123\001\002\000" +
    "\004\010\132\001\002\000\004\013\133\001\002\000\010" +
    "\003\ufff2\010\ufff2\015\ufff2\001\002\000\004\012\135\001" +
    "\002\000\004\010\136\001\002\000\004\042\137\001\002" +
    "\000\004\010\140\001\002\000\004\013\141\001\002\000" +
    "\010\003\uffee\010\uffee\015\uffee\001\002\000\004\005\143" +
    "\001\002\000\004\014\144\001\002\000\004\016\145\001" +
    "\002\000\004\017\146\001\002\000\004\015\147\001\002" +
    "\000\004\004\150\001\002\000\004\025\151\001\002\000" +
    "\004\011\152\001\002\000\004\005\153\001\002\000\004" +
    "\002\ufff7\001\002\000\004\005\155\001\002\000\004\014" +
    "\156\001\002\000\004\016\157\001\002\000\004\017\160" +
    "\001\002\000\004\015\161\001\002\000\004\004\162\001" +
    "\002\000\004\025\163\001\002\000\004\011\164\001\002" +
    "\000\004\005\165\001\002\000\004\002\ufff9\001\002\000" +
    "\004\002\ufff6\001\002\000\004\002\ufff8\001\002\000\004" +
    "\002\ufffa\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\166\000\004\002\005\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\003\021\004\024\005\022\006" +
    "\020\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\004\167\005\166\006\165\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\007\047\001\001\000\004\010\060\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\061\001\001\000\004\010\062\001\001\000\004\010" +
    "\063\001\001\000\004\010\064\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\007\067\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\101\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\103\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\012\111\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\011\117\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer_Requests$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer_Requests$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer_Requests$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static LinkedList<TError> TablaESS = new LinkedList<TError>();

    //Metodo al que se llama automaticamente ante algun error sintactico
public void syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    int tipo = s.sym;

    System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
    System.out.println("\t\tLexema: " + lexema);
    System.out.println("\t\tFila: " + fila);
    System.out.println("\t\tColumna: " + columna);
    System.out.println("\t\tTipo: " + tipo);

    // Sugerencia del token esperado
    String expectedToken = getExpectedToken(tipo);

    TError data = new TError(lexema, fila, columna, "Sintáctico", "Se esperaba el token '" + expectedToken + "'");
    TablaESS.add(data);
}

private String getExpectedToken(int tipo) {
    switch (tipo) {
        case Symbols_Requests.LessThan:
            return ">' o '}";
        case Symbols_Requests.GreaterThan:
            return "?' o '!";
        case Symbols_Requests.QuestionMark:
            return "<' o ' \" (comilla)";
        case Symbols_Requests.Equal:
            return "version";
        case Symbols_Requests.QuotationMark:
            return "Comillas";
        case Symbols_Requests.ExclamationMark:
            return "<' o la sentencia 'fin_solicitud_realizada";
        case Symbols_Requests.Colon:
            return "de instrucción' o 'nombre del campo";
        case Symbols_Requests.Comma:
            return "Comma";
        case Symbols_Requests.LeftBrace:
            return "LeftBrace";
        case Symbols_Requests.RightBrace:
            return "RightBrace";
        case Symbols_Requests.LeftBracket:
            return "LeftBracket";
        case Symbols_Requests.RightBracket:
            return "RightBracket";
        case Symbols_Requests.XSONsentence:
            return "XSONsentence";
        case Symbols_Requests.Version:
            return "Version";
        case Symbols_Requests.VersionNumber:
            return "VersionNumber";
        case Symbols_Requests.RealizarSolicitud:
            return "RealizarSolicitud";
        case Symbols_Requests.RealizarSolicitudes:
            return "RealizarSolicitudes";
        case Symbols_Requests.FinSolicitud:
            return "FinSolicitud";
        case Symbols_Requests.FinSolicitudes:
            return "FinSolicitudes";
        case Symbols_Requests.UsuarioNuevo:
            return "UsuarioNuevo";
        case Symbols_Requests.ModificarUsuario:
            return "ModificarUsuario";
        case Symbols_Requests.EliminarUsuario:
            return "EliminarUsuario";
        case Symbols_Requests.DatosUsuario:
            return "DatosUsuario";
        case Symbols_Requests.Usuario:
            return "Usuario";
        case Symbols_Requests.Password:
            return "Password";
        case Symbols_Requests.Nombre:
            return "Nombre";
        case Symbols_Requests.Institucion:
            return "Institucion";
        case Symbols_Requests.NIValue:
            return "NIValue";
        case Symbols_Requests.UPValue:
            return "UPValue";
        case Symbols_Requests.FechaCreacion:
            return "FechaCreacion";
        case Symbols_Requests.Date:
            return "Date";
        // Agrega más casos según los tokens que manejes
        default:
            return "token desconocido";
    }
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer_Requests$actions {


    //Verificación de campos completos USUARIONUEVO
    int contUser = 0;
    int contPass = 0;
    int contName = 0;
    int contInst = 0;
    int contDate = 0;

    public void contFields(String field){
        switch(field){
            case "Usuario":
                contUser++;
                break;
            case "Password":
                contPass++;
                break;
            case "Nombre":
                contName++;
                break;
            case "Institucion":
                contInst++;
                break;
            case "FechaCreacion":
                contDate++;
                break;
        }
    }

    public void cleanFields(){
        contUser = 0;
        contPass = 0;
        contName = 0;
        contInst = 0;
        contDate = 0;
    }

    public void checkFields(Symbol s){
        int line = s.right;
        int column = s.left;

        if(contUser != 1){
            System.out.println("Error: El campo Usuario no esta completo o esta duplicado");
            TError datos = new TError("Usuario", line, column, "Semántico", "Campo USUARIO faltante o repetido");
            TablaESS.add(datos);
        }
        if(contPass != 1){
            System.out.println("Error: El campo Password no esta completo o esta duplicado");
            TError datos = new TError("Password", line, column, "Semántico", "Campo PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if(contName != 1){
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if(contInst != 1){
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
        if(contDate > 1){
            System.out.println("Error: El campo Fecha de Creacion esta repetido");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION duplicado");
            TablaESS.add(datos);
        }
    }

  private final S_Analyzer_Requests parser;

  /** Constructor */
  CUP$S_Analyzer_Requests$actions(S_Analyzer_Requests parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_Requests$do_action_part00000000(
    int                        CUP$S_Analyzer_Requests$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_Requests$parser,
    java.util.Stack            CUP$S_Analyzer_Requests$stack,
    int                        CUP$S_Analyzer_Requests$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer_Requests$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer_Requests$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer_Requests$parser.done_parsing();
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan SINGLEREQUEST 
            {
              Object RESULT =null;
		System.out.println("Sentencia correcta y aceptada");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-10)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la sentencia inicial");
            cleanFields();
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // SINGLEREQUEST ::= USUARIONUEVO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // SINGLEREQUEST ::= MODIFICARUSUARIO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // SINGLEREQUEST ::= ELIMINARUSUARIO 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // USUARIONUEVO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark UsuarioNuevo QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket NEWUSERLOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("USUARIONUEVO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // USUARIONUEVO ::= error USUARIONUEVO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de USUARIONUEVO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("USUARIONUEVO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // MODIFICARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan LeftBrace LeftBracket RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIO",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-15)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // MODIFICARUSUARIO ::= error MODIFICARUSUARIO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de MODIFICARUSUARIO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIO",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // ELIMINARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarUsuario QuotationMark GreaterThan LeftBrace LeftBracket RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-15)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // ELIMINARUSUARIO ::= error ELIMINARUSUARIO 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de ELIMINARUSUARIO"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace Comma NEWUSERLOOP 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-6)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NEWUSERLOOP ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWUSERLOOP"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEWUSERBLOCK ::= QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Usuario");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEWUSERBLOCK ::= QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Password");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEWUSERBLOCK ::= QuotationMark Nombre QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Nombre");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEWUSERBLOCK ::= QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("Institucion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEWUSERBLOCK ::= QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              Object RESULT =null;
		contFields("FechaCreacion");
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEWUSERBLOCK ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NEWUSERBLOCK"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // VALUES ::= UPValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // VALUES ::= NIValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // VALUES ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de VALUES"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("VALUES",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NAMES ::= NIValue NAMES 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.elementAt(CUP$S_Analyzer_Requests$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NAMES ::= NIValue 
            {
              Object RESULT =null;

              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NAMES ::= error 
            {
              Object RESULT =null;
		System.out.println("Error en la declaración de NAMES"); 
              CUP$S_Analyzer_Requests$result = parser.getSymbolFactory().newSymbol("NAMES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_Requests$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_Requests$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer_Requests$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_Requests$do_action(
    int                        CUP$S_Analyzer_Requests$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_Requests$parser,
    java.util.Stack            CUP$S_Analyzer_Requests$stack,
    int                        CUP$S_Analyzer_Requests$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer_Requests$do_action_part00000000(
                               CUP$S_Analyzer_Requests$act_num,
                               CUP$S_Analyzer_Requests$parser,
                               CUP$S_Analyzer_Requests$stack,
                               CUP$S_Analyzer_Requests$top);
    }
}

}
