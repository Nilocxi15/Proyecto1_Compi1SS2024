// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexerRequests.flex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;
import java.util.LinkedList;
import models.TError;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class L_Analyzer_Requests implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  7,  0,  0,  0,  0,  0,  0,  0,  8,  0,  9, 10, 
    11, 12, 13, 14, 15, 15, 15, 15, 15, 15, 16,  0, 17, 18, 19, 20, 
     0, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 30, 31, 32, 33, 34, 
    35, 30, 36, 37, 38, 39, 40, 41, 42, 30, 43, 44,  0, 45,  0, 46, 
     0, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 56, 57, 58, 59, 60, 
    61, 56, 62, 63, 64, 65, 66, 67, 68, 56, 69, 70,  0, 71,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 56,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0, 56,  0,  0, 
     0, 56,  0, 56,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0, 
     0, 56,  0,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0, 56,  0,  0, 
     0, 56,  0, 56,  0,  0,  0,  0,  0,  0, 56,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\1\1\5\3\6"+
    "\1\7\1\10\1\11\1\12\1\13\15\14\1\15\1\16"+
    "\15\17\1\20\1\21\1\22\1\6\1\0\1\14\1\17"+
    "\1\14\1\17\2\14\2\17\2\14\2\17\1\14\1\17"+
    "\2\14\2\17\1\14\1\17\1\14\1\17\2\14\2\17"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\0\1\23"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\14\2\17"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\14\1\17"+
    "\2\14\2\17\1\14\1\17\1\14\1\17\1\14\1\17"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\0\1\14"+
    "\1\17\1\14\1\17\1\14\3\17\1\14\1\17\1\14"+
    "\1\17\1\14\1\17\1\14\1\17\1\14\1\17\1\14"+
    "\1\17\1\14\1\17\2\24\1\14\1\17\1\14\1\17"+
    "\1\14\1\17\2\25\1\0\1\14\1\17\1\14\1\17"+
    "\1\14\3\17\1\14\1\17\1\14\1\17\1\14\1\17"+
    "\2\14\2\17\1\14\1\17\1\14\1\17\1\14\1\17"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\0\1\17"+
    "\1\14\4\17\1\14\1\17\1\14\1\17\2\26\2\17"+
    "\1\14\1\17\1\14\1\17\1\14\1\17\1\14\1\17"+
    "\1\14\1\17\1\14\1\17\1\0\1\17\1\14\5\17"+
    "\1\14\1\17\1\14\3\17\1\14\1\17\1\14\1\17"+
    "\1\14\2\17\2\27\2\30\1\0\1\17\1\14\5\17"+
    "\1\14\1\17\1\14\3\17\1\14\1\17\2\31\1\14"+
    "\3\17\1\0\5\17\1\32\1\14\1\17\1\14\3\17"+
    "\1\14\6\17\1\33\6\17\1\14\4\17\1\14\14\17"+
    "\2\34\20\17\1\35\7\17\1\36\14\17\1\37\2\17"+
    "\1\40\4\17\1\41\5\17\1\42\7\17\1\43\1\44"+
    "\1\17\1\45\6\17\1\46\3\17\1\47\1\50\1\17"+
    "\1\51\2\17\1\52\5\17\1\53\5\17\1\54\2\17"+
    "\1\55";

  private static int [] zzUnpackAction() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\110\0\110\0\220\0\110\0\110\0\330\0\110"+
    "\0\u0120\0\u0168\0\u01b0\0\110\0\110\0\110\0\110\0\110"+
    "\0\u01f8\0\u0240\0\u0288\0\u02d0\0\u0318\0\u0360\0\u03a8\0\u03f0"+
    "\0\u0438\0\u0480\0\u04c8\0\u0510\0\u0558\0\110\0\110\0\u05a0"+
    "\0\u05e8\0\u0630\0\u0678\0\u06c0\0\u0708\0\u0750\0\u0798\0\u07e0"+
    "\0\u0828\0\u0870\0\u08b8\0\u0900\0\110\0\110\0\330\0\u0948"+
    "\0\u0990\0\u09d8\0\u0a20\0\u0a68\0\u0ab0\0\u0af8\0\u0b40\0\u0b88"+
    "\0\u0bd0\0\u0c18\0\u0c60\0\u0ca8\0\u0cf0\0\u0d38\0\u0d80\0\u0dc8"+
    "\0\u0e10\0\u0e58\0\u0ea0\0\u0ee8\0\u0f30\0\u0f78\0\u0fc0\0\u1008"+
    "\0\u1050\0\u1098\0\u10e0\0\u1128\0\u1170\0\u11b8\0\u1200\0\u1248"+
    "\0\u1290\0\u12d8\0\110\0\u1320\0\u1368\0\u13b0\0\u13f8\0\u1440"+
    "\0\u1488\0\u14d0\0\u1518\0\u1560\0\u15a8\0\u15f0\0\u1638\0\u1680"+
    "\0\u16c8\0\u1710\0\u1758\0\u17a0\0\u17e8\0\u1830\0\u1878\0\u18c0"+
    "\0\u1908\0\u1950\0\u1998\0\u19e0\0\u1a28\0\u1a70\0\u1ab8\0\u1b00"+
    "\0\u1b48\0\u1b90\0\u1bd8\0\u1c20\0\u1c68\0\u1cb0\0\u1cf8\0\u1d40"+
    "\0\u1d88\0\u1dd0\0\u1e18\0\u1e60\0\u1ea8\0\u1ef0\0\u1f38\0\u1f80"+
    "\0\u1fc8\0\u2010\0\u2058\0\u20a0\0\u20e8\0\u2130\0\u2178\0\u21c0"+
    "\0\u2208\0\u2250\0\u2298\0\u01f8\0\u05a0\0\u22e0\0\u2328\0\u2370"+
    "\0\u23b8\0\u2400\0\u2448\0\u01f8\0\u05a0\0\u2490\0\u24d8\0\u2520"+
    "\0\u2568\0\u25b0\0\u25f8\0\u2640\0\u2688\0\u26d0\0\u2718\0\u2760"+
    "\0\u27a8\0\u27f0\0\u2838\0\u2880\0\u28c8\0\u2910\0\u2958\0\u29a0"+
    "\0\u29e8\0\u2a30\0\u2a78\0\u2ac0\0\u2b08\0\u2b50\0\u2b98\0\u2be0"+
    "\0\u2c28\0\u2c70\0\u2cb8\0\u2d00\0\u2d48\0\u2d90\0\u2dd8\0\u2e20"+
    "\0\u2e68\0\u2eb0\0\u2ef8\0\u2f40\0\u2f88\0\u2fd0\0\u3018\0\u01f8"+
    "\0\u05a0\0\u3060\0\u30a8\0\u30f0\0\u3138\0\u3180\0\u31c8\0\u3210"+
    "\0\u3258\0\u32a0\0\u32e8\0\u3330\0\u3378\0\u33c0\0\u3408\0\u3450"+
    "\0\u3498\0\u34e0\0\u3528\0\u3570\0\u35b8\0\u3600\0\u3648\0\u3690"+
    "\0\u36d8\0\u3720\0\u3768\0\u37b0\0\u37f8\0\u3840\0\u3888\0\u38d0"+
    "\0\u3918\0\u3960\0\u39a8\0\u39f0\0\u3a38\0\u3a80\0\u01f8\0\u05a0"+
    "\0\u3ac8\0\u3b10\0\u3b58\0\u3ba0\0\u3be8\0\u3c30\0\u3c78\0\u3cc0"+
    "\0\u3d08\0\u3d50\0\u3d98\0\u3de0\0\u3e28\0\u3e70\0\u3eb8\0\u3f00"+
    "\0\u01f8\0\u05a0\0\u3f48\0\u3f90\0\u3fd8\0\u4020\0\u4068\0\u40b0"+
    "\0\u40f8\0\u4140\0\u4188\0\u41d0\0\u05a0\0\u4218\0\u4260\0\u42a8"+
    "\0\u42f0\0\u4338\0\u4380\0\u43c8\0\u4410\0\u4458\0\u44a0\0\u44e8"+
    "\0\u4530\0\u4578\0\110\0\u45c0\0\u4608\0\u4650\0\u4698\0\u46e0"+
    "\0\u4728\0\u4770\0\u47b8\0\u4800\0\u4848\0\u4890\0\u48d8\0\u4920"+
    "\0\u4968\0\u49b0\0\u49f8\0\u4a40\0\u4a88\0\u4ad0\0\u4b18\0\u4b60"+
    "\0\u4ba8\0\u4bf0\0\u4c38\0\u01f8\0\u05a0\0\u4c80\0\u4cc8\0\u4d10"+
    "\0\u4d58\0\u4da0\0\u4de8\0\u4e30\0\u4e78\0\u4ec0\0\u4f08\0\u4f50"+
    "\0\u4f98\0\u4fe0\0\u5028\0\u5070\0\u50b8\0\u05a0\0\u5100\0\u5148"+
    "\0\u5190\0\u51d8\0\u5220\0\u5268\0\u52b0\0\u05a0\0\u52f8\0\u5340"+
    "\0\u5388\0\u53d0\0\u5418\0\u5460\0\u54a8\0\u54f0\0\u5538\0\u5580"+
    "\0\u55c8\0\u5610\0\u05a0\0\u5658\0\u56a0\0\u05a0\0\u56e8\0\u5730"+
    "\0\u5778\0\u57c0\0\u05a0\0\u5808\0\u5850\0\u5898\0\u58e0\0\u5928"+
    "\0\u05a0\0\u5970\0\u59b8\0\u5a00\0\u5a48\0\u5a90\0\u5ad8\0\u5b20"+
    "\0\u05a0\0\u05a0\0\u5b68\0\u05a0\0\u5bb0\0\u5bf8\0\u5c40\0\u5c88"+
    "\0\u5cd0\0\u5d18\0\u05a0\0\u5d60\0\u5da8\0\u5df0\0\u05a0\0\u05a0"+
    "\0\u5e38\0\u05a0\0\u5e80\0\u5ec8\0\u5f10\0\u5f58\0\u5fa0\0\u5fe8"+
    "\0\u6030\0\u6078\0\u05a0\0\u60c0\0\u6108\0\u6150\0\u6198\0\u61e0"+
    "\0\u05a0\0\u6228\0\u6270\0\u05a0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\10"+
    "\2\2\1\11\1\12\2\11\1\13\1\14\1\15\1\16"+
    "\1\17\1\20\3\21\1\22\1\23\1\24\2\21\1\25"+
    "\2\21\1\26\1\27\1\21\1\30\1\31\1\21\1\32"+
    "\1\33\1\34\1\21\1\35\1\21\1\36\1\37\4\40"+
    "\1\41\1\42\1\43\2\40\1\44\2\40\1\45\1\46"+
    "\1\40\1\47\1\50\1\40\1\51\1\52\1\53\1\40"+
    "\1\54\1\40\1\55\1\56\112\0\1\3\120\0\5\57"+
    "\5\0\27\57\2\0\30\57\15\0\5\60\5\0\27\40"+
    "\2\0\30\40\13\0\1\61\1\0\5\60\5\0\27\40"+
    "\2\0\30\40\15\0\5\13\5\0\27\40\2\0\30\40"+
    "\15\0\5\40\5\0\27\21\2\0\30\40\15\0\5\40"+
    "\5\0\1\62\26\21\2\0\1\40\1\63\26\40\15\0"+
    "\5\40\5\0\12\21\1\64\14\21\2\0\13\40\1\65"+
    "\14\40\15\0\5\40\5\0\4\21\1\66\3\21\1\67"+
    "\16\21\2\0\5\40\1\70\3\40\1\71\16\40\15\0"+
    "\5\40\5\0\3\21\1\72\10\21\1\73\12\21\2\0"+
    "\4\40\1\74\10\40\1\75\12\40\15\0\5\40\5\0"+
    "\15\21\1\76\11\21\2\0\16\40\1\77\11\40\15\0"+
    "\5\40\5\0\15\21\1\100\4\21\1\101\4\21\2\0"+
    "\16\40\1\102\4\40\1\103\4\40\15\0\5\40\5\0"+
    "\1\104\26\21\2\0\1\40\1\105\26\40\15\0\5\40"+
    "\5\0\4\21\1\106\22\21\2\0\5\40\1\107\22\40"+
    "\15\0\5\40\5\0\4\21\1\110\3\21\1\111\16\21"+
    "\2\0\5\40\1\112\3\40\1\113\16\40\15\0\5\40"+
    "\5\0\20\21\1\114\6\21\2\0\21\40\1\115\6\40"+
    "\15\0\5\40\5\0\4\21\1\116\22\21\2\0\5\40"+
    "\1\117\22\40\15\0\5\40\5\0\20\21\1\120\6\21"+
    "\2\0\21\40\1\121\6\40\15\0\5\40\5\0\27\40"+
    "\2\0\30\40\15\0\5\40\5\0\1\63\26\40\2\0"+
    "\1\40\1\63\26\40\15\0\5\40\5\0\12\40\1\65"+
    "\14\40\2\0\13\40\1\65\14\40\15\0\5\40\5\0"+
    "\4\40\1\70\3\40\1\71\16\40\2\0\5\40\1\70"+
    "\3\40\1\71\16\40\15\0\5\40\5\0\3\40\1\74"+
    "\10\40\1\75\12\40\2\0\4\40\1\74\10\40\1\75"+
    "\12\40\15\0\5\40\5\0\15\40\1\77\11\40\2\0"+
    "\16\40\1\77\11\40\15\0\5\40\5\0\15\40\1\102"+
    "\4\40\1\103\4\40\2\0\16\40\1\102\4\40\1\103"+
    "\4\40\15\0\5\40\5\0\1\105\26\40\2\0\1\40"+
    "\1\105\26\40\15\0\5\40\5\0\4\40\1\107\22\40"+
    "\2\0\5\40\1\107\22\40\15\0\5\40\5\0\4\40"+
    "\1\112\3\40\1\113\16\40\2\0\5\40\1\112\3\40"+
    "\1\113\16\40\15\0\5\40\5\0\20\40\1\115\6\40"+
    "\2\0\21\40\1\115\6\40\15\0\5\40\5\0\4\40"+
    "\1\117\22\40\2\0\5\40\1\117\22\40\15\0\5\40"+
    "\5\0\20\40\1\121\6\40\2\0\21\40\1\121\6\40"+
    "\14\0\1\122\5\13\5\0\27\40\2\0\30\40\15\0"+
    "\1\123\107\0\5\40\5\0\21\21\1\124\5\21\2\0"+
    "\22\40\1\125\5\40\15\0\5\40\5\0\21\40\1\125"+
    "\5\40\2\0\22\40\1\125\5\40\15\0\5\40\5\0"+
    "\10\21\1\126\16\21\2\0\11\40\1\127\16\40\15\0"+
    "\5\40\5\0\10\40\1\127\16\40\2\0\11\40\1\127"+
    "\16\40\15\0\5\40\5\0\2\21\1\130\24\21\2\0"+
    "\3\40\1\131\24\40\15\0\5\40\5\0\14\21\1\132"+
    "\12\21\2\0\15\40\1\133\12\40\15\0\5\40\5\0"+
    "\2\40\1\131\24\40\2\0\3\40\1\131\24\40\15\0"+
    "\5\40\5\0\14\40\1\133\12\40\2\0\15\40\1\133"+
    "\12\40\15\0\5\40\5\0\27\21\2\0\1\134\27\40"+
    "\15\0\5\40\5\0\20\21\1\135\6\21\2\0\21\40"+
    "\1\136\6\40\15\0\5\40\5\0\27\40\2\0\1\134"+
    "\27\40\15\0\5\40\5\0\20\40\1\136\6\40\2\0"+
    "\21\40\1\136\6\40\15\0\5\40\5\0\3\21\1\137"+
    "\23\21\2\0\4\40\1\140\23\40\15\0\5\40\5\0"+
    "\3\40\1\140\23\40\2\0\4\40\1\140\23\40\15\0"+
    "\5\40\5\0\13\21\1\141\13\21\2\0\14\40\1\142"+
    "\13\40\15\0\5\40\5\0\4\21\1\143\22\21\2\0"+
    "\5\40\1\144\22\40\15\0\5\40\5\0\13\40\1\142"+
    "\13\40\2\0\14\40\1\142\13\40\15\0\5\40\5\0"+
    "\4\40\1\144\22\40\2\0\5\40\1\144\22\40\15\0"+
    "\5\40\5\0\17\21\1\145\1\146\6\21\2\0\20\40"+
    "\1\147\1\150\6\40\15\0\5\40\5\0\17\40\1\147"+
    "\1\150\6\40\2\0\20\40\1\147\1\150\6\40\15\0"+
    "\5\40\5\0\1\151\26\21\2\0\1\40\1\152\26\40"+
    "\15\0\5\40\5\0\1\152\26\40\2\0\1\40\1\152"+
    "\26\40\15\0\5\40\5\0\13\21\1\153\13\21\2\0"+
    "\14\40\1\154\13\40\15\0\5\40\5\0\4\21\1\155"+
    "\22\21\2\0\5\40\1\156\22\40\15\0\5\40\5\0"+
    "\13\40\1\154\13\40\2\0\14\40\1\154\13\40\15\0"+
    "\5\40\5\0\4\40\1\156\22\40\2\0\5\40\1\156"+
    "\22\40\15\0\5\40\5\0\22\21\1\157\4\21\2\0"+
    "\23\40\1\160\4\40\15\0\5\40\5\0\22\40\1\160"+
    "\4\40\2\0\23\40\1\160\4\40\15\0\5\40\5\0"+
    "\17\21\1\161\7\21\2\0\20\40\1\162\7\40\15\0"+
    "\5\40\5\0\17\40\1\162\7\40\2\0\20\40\1\162"+
    "\7\40\15\0\5\40\5\0\15\21\1\163\11\21\2\0"+
    "\16\40\1\164\11\40\15\0\5\40\5\0\15\40\1\164"+
    "\11\40\2\0\16\40\1\164\11\40\15\0\2\165\106\0"+
    "\5\40\5\0\15\21\1\166\11\21\2\0\16\40\1\167"+
    "\11\40\15\0\5\40\5\0\15\40\1\167\11\40\2\0"+
    "\16\40\1\167\11\40\15\0\5\40\5\0\13\21\1\170"+
    "\13\21\2\0\14\40\1\171\13\40\15\0\5\40\5\0"+
    "\13\40\1\171\13\40\2\0\14\40\1\171\13\40\15\0"+
    "\5\40\5\0\7\21\1\172\17\21\2\0\10\40\1\173"+
    "\17\40\15\0\5\40\5\0\7\40\1\173\17\40\2\0"+
    "\10\40\1\173\17\40\15\0\5\40\5\0\27\21\2\0"+
    "\1\174\27\40\15\0\5\40\5\0\27\40\2\0\1\174"+
    "\27\40\15\0\5\40\5\0\21\40\1\175\5\40\2\0"+
    "\22\40\1\175\5\40\15\0\5\40\5\0\21\21\1\176"+
    "\5\21\2\0\22\40\1\177\5\40\15\0\5\40\5\0"+
    "\21\40\1\177\5\40\2\0\22\40\1\177\5\40\15\0"+
    "\5\40\5\0\10\21\1\200\16\21\2\0\11\40\1\201"+
    "\16\40\15\0\5\40\5\0\10\40\1\201\16\40\2\0"+
    "\11\40\1\201\16\40\15\0\5\40\5\0\1\21\1\202"+
    "\25\21\2\0\2\40\1\203\25\40\15\0\5\40\5\0"+
    "\1\40\1\203\25\40\2\0\2\40\1\203\25\40\15\0"+
    "\5\40\5\0\23\21\1\204\3\21\2\0\24\40\1\205"+
    "\3\40\15\0\5\40\5\0\23\40\1\205\3\40\2\0"+
    "\24\40\1\205\3\40\15\0\5\40\5\0\1\206\26\21"+
    "\2\0\1\40\1\207\26\40\15\0\5\40\5\0\20\21"+
    "\1\210\6\21\2\0\21\40\1\211\6\40\15\0\5\40"+
    "\5\0\1\207\26\40\2\0\1\40\1\207\26\40\15\0"+
    "\5\40\5\0\20\40\1\211\6\40\2\0\21\40\1\211"+
    "\6\40\15\0\5\40\5\0\12\21\1\212\14\21\2\0"+
    "\13\40\1\213\14\40\15\0\5\40\5\0\12\40\1\213"+
    "\14\40\2\0\13\40\1\213\14\40\15\0\5\40\5\0"+
    "\1\214\26\21\2\0\1\40\1\215\26\40\15\0\5\40"+
    "\5\0\1\215\26\40\2\0\1\40\1\215\26\40\15\0"+
    "\5\40\5\0\13\21\1\216\13\21\2\0\14\40\1\217"+
    "\13\40\15\0\5\40\5\0\13\40\1\217\13\40\2\0"+
    "\14\40\1\217\13\40\15\0\5\40\5\0\1\220\26\21"+
    "\2\0\1\40\1\221\26\40\15\0\5\40\5\0\1\221"+
    "\26\40\2\0\1\40\1\221\26\40\15\0\5\40\5\0"+
    "\20\21\1\222\6\21\2\0\21\40\1\223\6\40\15\0"+
    "\5\40\5\0\20\40\1\223\6\40\2\0\21\40\1\223"+
    "\6\40\15\0\5\40\5\0\14\21\1\224\12\21\2\0"+
    "\15\40\1\225\12\40\15\0\5\40\5\0\14\40\1\225"+
    "\12\40\2\0\15\40\1\225\12\40\15\0\5\226\103\0"+
    "\5\40\5\0\20\21\1\227\6\21\2\0\21\40\1\230"+
    "\6\40\15\0\5\40\5\0\20\40\1\230\6\40\2\0"+
    "\21\40\1\230\6\40\15\0\5\40\5\0\10\21\1\231"+
    "\16\21\2\0\11\40\1\232\16\40\15\0\5\40\5\0"+
    "\10\40\1\232\16\40\2\0\11\40\1\232\16\40\15\0"+
    "\5\40\5\0\1\233\26\21\2\0\1\40\1\234\26\40"+
    "\15\0\5\40\5\0\1\234\26\40\2\0\1\40\1\234"+
    "\26\40\15\0\5\40\5\0\20\40\1\235\6\40\2\0"+
    "\21\40\1\235\6\40\15\0\5\40\5\0\17\40\1\236"+
    "\7\40\2\0\20\40\1\236\7\40\15\0\5\40\5\0"+
    "\10\21\1\237\16\21\2\0\11\40\1\240\16\40\15\0"+
    "\5\40\5\0\10\40\1\240\16\40\2\0\11\40\1\240"+
    "\16\40\15\0\5\40\5\0\5\21\1\241\21\21\2\0"+
    "\6\40\1\242\21\40\15\0\5\40\5\0\5\40\1\242"+
    "\21\40\2\0\6\40\1\242\21\40\15\0\5\40\5\0"+
    "\17\21\1\243\7\21\2\0\20\40\1\244\7\40\15\0"+
    "\5\40\5\0\17\40\1\244\7\40\2\0\20\40\1\244"+
    "\7\40\15\0\5\40\5\0\1\245\14\21\1\246\11\21"+
    "\2\0\1\40\1\247\14\40\1\250\11\40\15\0\5\40"+
    "\5\0\1\247\14\40\1\250\11\40\2\0\1\40\1\247"+
    "\14\40\1\250\11\40\15\0\5\40\5\0\13\21\1\251"+
    "\13\21\2\0\14\40\1\252\13\40\15\0\5\40\5\0"+
    "\13\40\1\252\13\40\2\0\14\40\1\252\13\40\15\0"+
    "\5\40\5\0\24\21\1\253\2\21\2\0\25\40\1\254"+
    "\2\40\15\0\5\40\5\0\24\40\1\254\2\40\2\0"+
    "\25\40\1\254\2\40\15\0\5\40\5\0\10\21\1\255"+
    "\16\21\2\0\11\40\1\256\16\40\15\0\5\40\5\0"+
    "\10\40\1\256\16\40\2\0\11\40\1\256\16\40\15\0"+
    "\5\40\5\0\16\21\1\257\10\21\2\0\17\40\1\260"+
    "\10\40\15\0\5\40\5\0\16\40\1\260\10\40\2\0"+
    "\17\40\1\260\10\40\15\0\5\40\5\0\17\21\1\261"+
    "\7\21\2\0\20\40\1\262\7\40\15\0\5\40\5\0"+
    "\17\40\1\262\7\40\2\0\20\40\1\262\7\40\15\0"+
    "\5\40\5\0\10\21\1\263\16\21\2\0\11\40\1\264"+
    "\16\40\15\0\5\40\5\0\10\40\1\264\16\40\2\0"+
    "\11\40\1\264\16\40\14\0\1\265\110\0\5\40\5\0"+
    "\27\21\2\0\1\266\27\40\15\0\5\40\5\0\27\40"+
    "\2\0\1\266\27\40\15\0\5\40\5\0\14\21\1\267"+
    "\12\21\2\0\15\40\1\270\12\40\15\0\5\40\5\0"+
    "\14\40\1\270\12\40\2\0\15\40\1\270\12\40\15\0"+
    "\5\40\5\0\27\21\2\0\1\271\27\40\15\0\5\40"+
    "\5\0\27\40\2\0\1\271\27\40\15\0\5\40\5\0"+
    "\15\40\1\272\11\40\2\0\16\40\1\272\11\40\15\0"+
    "\5\40\5\0\10\40\1\273\16\40\2\0\11\40\1\273"+
    "\16\40\15\0\5\40\5\0\21\21\1\274\5\21\2\0"+
    "\22\40\1\275\5\40\15\0\5\40\5\0\21\40\1\275"+
    "\5\40\2\0\22\40\1\275\5\40\15\0\5\40\5\0"+
    "\10\21\1\276\16\21\2\0\11\40\1\277\16\40\15\0"+
    "\5\40\5\0\10\40\1\277\16\40\2\0\11\40\1\277"+
    "\16\40\15\0\5\40\5\0\4\21\1\300\22\21\2\0"+
    "\5\40\1\301\22\40\15\0\5\40\5\0\4\40\1\301"+
    "\22\40\2\0\5\40\1\301\22\40\15\0\5\40\5\0"+
    "\27\21\2\0\1\302\27\40\15\0\5\40\5\0\27\21"+
    "\2\0\1\303\27\40\15\0\5\40\5\0\27\40\2\0"+
    "\1\302\27\40\15\0\5\40\5\0\27\40\2\0\1\303"+
    "\27\40\15\0\5\40\5\0\4\21\1\304\22\21\2\0"+
    "\5\40\1\305\22\40\15\0\5\40\5\0\4\40\1\305"+
    "\22\40\2\0\5\40\1\305\22\40\15\0\5\40\5\0"+
    "\15\21\1\306\11\21\2\0\16\40\1\307\11\40\15\0"+
    "\5\40\5\0\15\40\1\307\11\40\2\0\16\40\1\307"+
    "\11\40\15\0\5\40\5\0\26\21\1\310\2\0\27\40"+
    "\1\311\15\0\5\40\5\0\26\40\1\311\2\0\27\40"+
    "\1\311\15\0\5\40\5\0\15\21\1\312\11\21\2\0"+
    "\16\40\1\313\11\40\15\0\5\40\5\0\15\40\1\313"+
    "\11\40\2\0\16\40\1\313\11\40\15\0\5\40\5\0"+
    "\10\21\1\314\16\21\2\0\11\40\1\315\16\40\15\0"+
    "\5\40\5\0\10\40\1\315\16\40\2\0\11\40\1\315"+
    "\16\40\15\0\5\40\5\0\15\21\1\316\11\21\2\0"+
    "\16\40\1\317\11\40\15\0\5\40\5\0\15\40\1\317"+
    "\11\40\2\0\16\40\1\317\11\40\16\0\2\320\105\0"+
    "\5\40\5\0\22\40\1\321\4\40\2\0\23\40\1\321"+
    "\4\40\15\0\5\40\5\0\1\322\26\21\2\0\1\40"+
    "\1\323\26\40\15\0\5\40\5\0\1\323\26\40\2\0"+
    "\1\40\1\323\26\40\15\0\5\40\5\0\2\40\1\324"+
    "\10\40\1\325\13\40\2\0\3\40\1\324\10\40\1\325"+
    "\13\40\15\0\5\40\5\0\12\40\1\326\14\40\2\0"+
    "\13\40\1\326\14\40\15\0\5\40\5\0\23\40\1\327"+
    "\3\40\2\0\24\40\1\327\3\40\15\0\5\40\5\0"+
    "\22\21\1\330\4\21\2\0\23\40\1\331\4\40\15\0"+
    "\5\40\5\0\22\40\1\331\4\40\2\0\23\40\1\331"+
    "\4\40\15\0\5\40\5\0\2\21\1\332\24\21\2\0"+
    "\3\40\1\333\24\40\15\0\5\40\5\0\2\40\1\333"+
    "\24\40\2\0\3\40\1\333\24\40\15\0\5\40\5\0"+
    "\21\40\1\334\5\40\2\0\22\40\1\334\5\40\15\0"+
    "\5\40\5\0\16\40\1\335\10\40\2\0\17\40\1\335"+
    "\10\40\15\0\5\40\5\0\21\21\1\336\5\21\2\0"+
    "\22\40\1\337\5\40\15\0\5\40\5\0\21\40\1\337"+
    "\5\40\2\0\22\40\1\337\5\40\15\0\5\40\5\0"+
    "\17\21\1\340\7\21\2\0\20\40\1\341\7\40\15\0"+
    "\5\40\5\0\17\40\1\341\7\40\2\0\20\40\1\341"+
    "\7\40\15\0\5\40\5\0\1\342\26\21\2\0\1\40"+
    "\1\343\26\40\15\0\5\40\5\0\1\343\26\40\2\0"+
    "\1\40\1\343\26\40\15\0\5\40\5\0\27\21\2\0"+
    "\1\344\27\40\15\0\5\40\5\0\27\40\2\0\1\344"+
    "\27\40\15\0\5\40\5\0\15\21\1\345\11\21\2\0"+
    "\16\40\1\346\11\40\15\0\5\40\5\0\15\40\1\346"+
    "\11\40\2\0\16\40\1\346\11\40\15\0\5\40\5\0"+
    "\14\21\1\347\12\21\2\0\15\40\1\350\12\40\15\0"+
    "\5\40\5\0\14\40\1\350\12\40\2\0\15\40\1\350"+
    "\12\40\15\0\5\351\103\0\5\40\5\0\20\40\1\352"+
    "\6\40\2\0\21\40\1\352\6\40\15\0\5\40\5\0"+
    "\17\21\1\353\7\21\2\0\20\40\1\354\7\40\15\0"+
    "\5\40\5\0\17\40\1\354\7\40\2\0\20\40\1\354"+
    "\7\40\15\0\5\40\5\0\17\40\1\355\7\40\2\0"+
    "\20\40\1\355\7\40\15\0\5\40\5\0\15\40\1\356"+
    "\11\40\2\0\16\40\1\356\11\40\15\0\5\40\5\0"+
    "\10\40\1\357\16\40\2\0\11\40\1\357\16\40\15\0"+
    "\5\40\5\0\10\40\1\360\16\40\2\0\11\40\1\360"+
    "\16\40\15\0\5\40\5\0\2\21\1\361\24\21\2\0"+
    "\3\40\1\362\24\40\15\0\5\40\5\0\2\40\1\362"+
    "\24\40\2\0\3\40\1\362\24\40\15\0\5\40\5\0"+
    "\1\363\26\21\2\0\1\40\1\364\26\40\15\0\5\40"+
    "\5\0\1\364\26\40\2\0\1\40\1\364\26\40\15\0"+
    "\5\40\5\0\17\40\1\365\7\40\2\0\20\40\1\365"+
    "\7\40\15\0\5\40\5\0\1\366\26\40\2\0\1\40"+
    "\1\366\26\40\15\0\5\40\5\0\17\21\1\367\7\21"+
    "\2\0\20\40\1\370\7\40\15\0\5\40\5\0\17\40"+
    "\1\370\7\40\2\0\20\40\1\370\7\40\15\0\5\40"+
    "\5\0\3\21\1\371\23\21\2\0\4\40\1\372\23\40"+
    "\15\0\5\40\5\0\3\40\1\372\23\40\2\0\4\40"+
    "\1\372\23\40\15\0\5\40\5\0\17\21\1\373\7\21"+
    "\2\0\20\40\1\374\7\40\15\0\5\40\5\0\17\40"+
    "\1\374\7\40\2\0\20\40\1\374\7\40\15\0\5\40"+
    "\5\0\16\40\1\375\10\40\2\0\17\40\1\375\10\40"+
    "\15\0\5\40\5\0\27\21\2\0\1\376\27\40\15\0"+
    "\5\40\5\0\27\40\2\0\1\376\27\40\15\0\5\377"+
    "\103\0\5\40\5\0\22\40\1\u0100\4\40\2\0\23\40"+
    "\1\u0100\4\40\15\0\5\40\5\0\27\21\2\0\1\u0101"+
    "\27\40\15\0\5\40\5\0\27\40\2\0\1\u0101\27\40"+
    "\15\0\5\40\5\0\4\40\1\u0102\22\40\2\0\5\40"+
    "\1\u0102\22\40\15\0\5\40\5\0\3\40\1\u0103\23\40"+
    "\2\0\4\40\1\u0103\23\40\15\0\5\40\5\0\2\40"+
    "\1\u0104\24\40\2\0\3\40\1\u0104\24\40\15\0\5\40"+
    "\5\0\1\u0105\26\40\2\0\1\40\1\u0105\26\40\15\0"+
    "\5\40\5\0\10\21\1\u0106\16\21\2\0\11\40\1\u0107"+
    "\16\40\15\0\5\40\5\0\10\40\1\u0107\16\40\2\0"+
    "\11\40\1\u0107\16\40\15\0\5\40\5\0\17\21\1\u0108"+
    "\7\21\2\0\20\40\1\u0109\7\40\15\0\5\40\5\0"+
    "\17\40\1\u0109\7\40\2\0\20\40\1\u0109\7\40\15\0"+
    "\5\40\5\0\10\40\1\u010a\16\40\2\0\11\40\1\u010a"+
    "\16\40\15\0\5\40\5\0\20\40\1\u010b\6\40\2\0"+
    "\21\40\1\u010b\6\40\15\0\5\40\5\0\15\21\1\u010c"+
    "\11\21\2\0\16\40\1\u010d\11\40\15\0\5\40\5\0"+
    "\15\40\1\u010d\11\40\2\0\16\40\1\u010d\11\40\15\0"+
    "\5\40\5\0\27\21\2\0\1\u010e\27\40\15\0\5\40"+
    "\5\0\27\40\2\0\1\u010e\27\40\15\0\5\40\5\0"+
    "\17\40\1\u010f\7\40\2\0\20\40\1\u010f\7\40\15\0"+
    "\5\40\5\0\1\u0110\1\40\1\u0111\11\40\1\u0112\12\40"+
    "\2\0\1\40\1\u0110\1\40\1\u0111\11\40\1\u0112\12\40"+
    "\15\0\5\u0113\103\0\5\40\5\0\1\u0114\26\40\2\0"+
    "\1\40\1\u0114\26\40\15\0\5\40\5\0\21\40\1\u0115"+
    "\1\u0116\4\40\2\0\22\40\1\u0115\1\u0116\4\40\15\0"+
    "\5\40\5\0\1\u0117\26\40\2\0\1\40\1\u0117\26\40"+
    "\15\0\5\40\5\0\10\40\1\u0118\16\40\2\0\11\40"+
    "\1\u0118\16\40\15\0\5\40\5\0\10\40\1\u0119\16\40"+
    "\2\0\11\40\1\u0119\16\40\15\0\5\40\5\0\15\21"+
    "\1\u011a\11\21\2\0\16\40\1\u011b\11\40\15\0\5\40"+
    "\5\0\15\40\1\u011b\11\40\2\0\16\40\1\u011b\11\40"+
    "\15\0\5\40\5\0\27\21\2\0\1\u011c\27\40\15\0"+
    "\5\40\5\0\27\40\2\0\1\u011c\27\40\15\0\5\40"+
    "\5\0\23\40\1\u011d\3\40\2\0\24\40\1\u011d\3\40"+
    "\15\0\5\40\5\0\20\40\1\u011e\6\40\2\0\21\40"+
    "\1\u011e\6\40\15\0\5\40\5\0\20\21\1\u011f\6\21"+
    "\2\0\21\40\1\u0120\6\40\15\0\5\40\5\0\20\40"+
    "\1\u0120\6\40\2\0\21\40\1\u0120\6\40\15\0\5\40"+
    "\5\0\20\40\1\u0121\6\40\2\0\21\40\1\u0121\6\40"+
    "\15\0\5\40\5\0\4\40\1\u0122\22\40\2\0\5\40"+
    "\1\u0122\22\40\15\0\5\40\5\0\14\40\1\u0123\12\40"+
    "\2\0\15\40\1\u0123\12\40\15\0\5\40\5\0\17\40"+
    "\1\u0124\7\40\2\0\20\40\1\u0124\7\40\15\0\5\40"+
    "\5\0\22\40\1\u0125\4\40\2\0\23\40\1\u0125\4\40"+
    "\15\0\5\40\5\0\17\40\1\u0126\7\40\2\0\20\40"+
    "\1\u0126\7\40\15\0\5\40\5\0\17\40\1\u0127\7\40"+
    "\2\0\20\40\1\u0127\7\40\15\0\5\40\5\0\20\40"+
    "\1\u0128\6\40\2\0\21\40\1\u0128\6\40\15\0\5\40"+
    "\5\0\2\40\1\u0129\24\40\2\0\3\40\1\u0129\24\40"+
    "\15\0\5\40\5\0\5\40\1\u012a\21\40\2\0\6\40"+
    "\1\u012a\21\40\15\0\5\40\5\0\21\40\1\u012b\5\40"+
    "\2\0\22\40\1\u012b\5\40\15\0\5\40\5\0\14\21"+
    "\1\u012c\12\21\2\0\15\40\1\u012d\12\40\15\0\5\40"+
    "\5\0\14\40\1\u012d\12\40\2\0\15\40\1\u012d\12\40"+
    "\15\0\5\40\5\0\22\40\1\u012e\4\40\2\0\23\40"+
    "\1\u012e\4\40\15\0\5\40\5\0\10\40\1\u012f\16\40"+
    "\2\0\11\40\1\u012f\16\40\15\0\5\40\5\0\24\40"+
    "\1\u0130\2\40\2\0\25\40\1\u0130\2\40\15\0\5\40"+
    "\5\0\27\21\2\0\1\u0131\27\40\15\0\5\40\5\0"+
    "\27\40\2\0\1\u0131\27\40\15\0\5\40\5\0\15\40"+
    "\1\u0132\11\40\2\0\16\40\1\u0132\11\40\15\0\5\40"+
    "\5\0\6\40\1\u0133\20\40\2\0\7\40\1\u0133\20\40"+
    "\15\0\5\40\5\0\21\40\1\u0134\5\40\2\0\22\40"+
    "\1\u0134\5\40\15\0\5\40\5\0\4\40\1\u0135\22\40"+
    "\2\0\5\40\1\u0135\22\40\15\0\5\40\5\0\4\40"+
    "\1\u0136\22\40\2\0\5\40\1\u0136\22\40\15\0\5\40"+
    "\5\0\10\40\1\u0137\16\40\2\0\11\40\1\u0137\16\40"+
    "\15\0\5\40\5\0\10\40\1\u0138\16\40\2\0\11\40"+
    "\1\u0138\16\40\15\0\5\40\5\0\22\40\1\u0139\4\40"+
    "\2\0\23\40\1\u0139\4\40\15\0\5\40\5\0\10\40"+
    "\1\u013a\16\40\2\0\11\40\1\u013a\16\40\15\0\5\40"+
    "\5\0\10\40\1\u013b\16\40\2\0\11\40\1\u013b\16\40"+
    "\15\0\5\40\5\0\22\40\1\u013c\4\40\2\0\23\40"+
    "\1\u013c\4\40\15\0\5\40\5\0\20\40\1\u013d\6\40"+
    "\2\0\21\40\1\u013d\6\40\15\0\5\40\5\0\1\u013e"+
    "\26\40\2\0\1\40\1\u013e\26\40\15\0\5\40\5\0"+
    "\15\40\1\u013f\11\40\2\0\16\40\1\u013f\11\40\15\0"+
    "\5\40\5\0\21\40\1\u0140\5\40\2\0\22\40\1\u0140"+
    "\5\40\15\0\5\40\5\0\12\40\1\u0141\14\40\2\0"+
    "\13\40\1\u0141\14\40\15\0\5\40\5\0\22\40\1\u0142"+
    "\4\40\2\0\23\40\1\u0142\4\40\15\0\5\40\5\0"+
    "\10\40\1\u0143\16\40\2\0\11\40\1\u0143\16\40\15\0"+
    "\5\40\5\0\1\u0144\26\40\2\0\1\40\1\u0144\26\40"+
    "\15\0\5\40\5\0\23\40\1\u0145\3\40\2\0\24\40"+
    "\1\u0145\3\40\15\0\5\40\5\0\15\40\1\u0146\11\40"+
    "\2\0\16\40\1\u0146\11\40\15\0\5\40\5\0\23\40"+
    "\1\u0147\3\40\2\0\24\40\1\u0147\3\40\15\0\5\40"+
    "\5\0\1\u0148\26\40\2\0\1\40\1\u0148\26\40\15\0"+
    "\5\40\5\0\15\40\1\u0149\11\40\2\0\16\40\1\u0149"+
    "\11\40\15\0\5\40\5\0\2\40\1\u014a\24\40\2\0"+
    "\3\40\1\u014a\24\40\15\0\5\40\5\0\3\40\1\u014b"+
    "\23\40\2\0\4\40\1\u014b\23\40\15\0\5\40\5\0"+
    "\22\40\1\u014c\4\40\2\0\23\40\1\u014c\4\40\15\0"+
    "\5\40\5\0\17\40\1\u014d\7\40\2\0\20\40\1\u014d"+
    "\7\40\15\0\5\40\5\0\17\40\1\u014e\7\40\2\0"+
    "\20\40\1\u014e\7\40\15\0\5\40\5\0\10\40\1\u014f"+
    "\16\40\2\0\11\40\1\u014f\16\40\15\0\5\40\5\0"+
    "\14\40\1\u0150\12\40\2\0\15\40\1\u0150\12\40\15\0"+
    "\5\40\5\0\6\40\1\u0151\20\40\2\0\7\40\1\u0151"+
    "\20\40\15\0\5\40\5\0\2\40\1\u0152\24\40\2\0"+
    "\3\40\1\u0152\24\40\15\0\5\40\5\0\15\40\1\u0153"+
    "\11\40\2\0\16\40\1\u0153\11\40\15\0\5\40\5\0"+
    "\10\40\1\u0154\16\40\2\0\11\40\1\u0154\16\40\15\0"+
    "\5\40\5\0\17\40\1\u0155\7\40\2\0\20\40\1\u0155"+
    "\7\40\15\0\5\40\5\0\14\40\1\u0156\12\40\2\0"+
    "\15\40\1\u0156\12\40\15\0\5\40\5\0\1\u0157\26\40"+
    "\2\0\1\40\1\u0157\26\40\15\0\5\40\5\0\4\40"+
    "\1\u0158\22\40\2\0\1\u0159\4\40\1\u0158\22\40\15\0"+
    "\5\40\5\0\1\u015a\26\40\2\0\1\40\1\u015a\26\40"+
    "\15\0\5\40\5\0\3\40\1\u015b\23\40\2\0\4\40"+
    "\1\u015b\23\40\15\0\5\40\5\0\10\40\1\u015c\16\40"+
    "\2\0\11\40\1\u015c\16\40\15\0\5\40\5\0\2\40"+
    "\1\u015d\24\40\2\0\3\40\1\u015d\24\40\15\0\5\40"+
    "\5\0\21\40\1\u015e\5\40\2\0\22\40\1\u015e\5\40"+
    "\15\0\5\40\5\0\22\40\1\u015f\4\40\2\0\23\40"+
    "\1\u015f\4\40\15\0\5\40\5\0\10\40\1\u0160\16\40"+
    "\2\0\11\40\1\u0160\16\40\15\0\5\40\5\0\1\u0161"+
    "\26\40\2\0\1\40\1\u0161\26\40\15\0\5\40\5\0"+
    "\10\40\1\u0162\16\40\2\0\11\40\1\u0162\16\40\15\0"+
    "\5\40\5\0\2\40\1\u0163\24\40\2\0\3\40\1\u0163"+
    "\24\40\15\0\5\40\5\0\20\40\1\u0164\6\40\2\0"+
    "\21\40\1\u0164\6\40\15\0\5\40\5\0\17\40\1\u0165"+
    "\7\40\2\0\20\40\1\u0165\7\40\15\0\5\40\5\0"+
    "\17\40\1\u0166\7\40\2\0\20\40\1\u0166\7\40\15\0"+
    "\5\40\5\0\23\40\1\u0167\3\40\2\0\24\40\1\u0167"+
    "\3\40\15\0\5\40\5\0\10\40\1\u0168\16\40\2\0"+
    "\11\40\1\u0168\16\40\15\0\5\40\5\0\1\u0169\26\40"+
    "\2\0\1\40\1\u0169\26\40\15\0\5\40\5\0\15\40"+
    "\1\u016a\11\40\2\0\16\40\1\u016a\11\40\15\0\5\40"+
    "\5\0\15\40\1\u016b\11\40\2\0\16\40\1\u016b\11\40"+
    "\15\0\5\40\5\0\15\40\1\u016c\11\40\2\0\16\40"+
    "\1\u016c\11\40\15\0\5\40\5\0\10\40\1\u016d\16\40"+
    "\2\0\11\40\1\u016d\16\40\15\0\5\40\5\0\27\40"+
    "\2\0\1\u016e\27\40\15\0\5\40\5\0\4\40\1\u016f"+
    "\22\40\2\0\5\40\1\u016f\22\40\15\0\5\40\5\0"+
    "\10\40\1\u0170\16\40\2\0\11\40\1\u0170\16\40\15\0"+
    "\5\40\5\0\10\40\1\u0171\16\40\2\0\11\40\1\u0171"+
    "\16\40\15\0\5\40\5\0\21\40\1\u0172\5\40\2\0"+
    "\22\40\1\u0172\5\40\15\0\5\40\5\0\14\40\1\u0173"+
    "\12\40\2\0\15\40\1\u0173\12\40\15\0\5\40\5\0"+
    "\15\40\1\u0174\11\40\2\0\16\40\1\u0174\11\40\15\0"+
    "\5\40\5\0\17\40\1\u0175\7\40\2\0\20\40\1\u0175"+
    "\7\40\15\0\5\40\5\0\1\u0176\26\40\2\0\1\40"+
    "\1\u0176\26\40\15\0\5\40\5\0\15\40\1\u0177\11\40"+
    "\2\0\16\40\1\u0177\11\40\15\0\5\40\5\0\1\u0178"+
    "\26\40\2\0\1\40\1\u0178\26\40\15\0\5\40\5\0"+
    "\22\40\1\u0179\4\40\2\0\23\40\1\u0179\4\40\15\0"+
    "\5\40\5\0\14\40\1\u017a\12\40\2\0\15\40\1\u017a"+
    "\12\40\15\0\5\40\5\0\4\40\1\u017b\22\40\2\0"+
    "\5\40\1\u017b\22\40\15\0\5\40\5\0\12\40\1\u017c"+
    "\14\40\2\0\13\40\1\u017c\14\40\15\0\5\40\5\0"+
    "\3\40\1\u017d\23\40\2\0\4\40\1\u017d\23\40\15\0"+
    "\5\40\5\0\1\u017e\26\40\2\0\1\40\1\u017e\26\40"+
    "\15\0\5\40\5\0\10\40\1\u017f\16\40\2\0\11\40"+
    "\1\u017f\16\40\15\0\5\40\5\0\4\40\1\u0180\22\40"+
    "\2\0\5\40\1\u0180\22\40\15\0\5\40\5\0\12\40"+
    "\1\u0181\14\40\2\0\13\40\1\u0181\14\40\15\0\5\40"+
    "\5\0\26\40\1\u0182\2\0\27\40\1\u0182\15\0\5\40"+
    "\5\0\20\40\1\u0183\6\40\2\0\21\40\1\u0183\6\40"+
    "\15\0\5\40\5\0\10\40\1\u0184\16\40\2\0\11\40"+
    "\1\u0184\16\40\15\0\5\40\5\0\1\u0185\26\40\2\0"+
    "\1\40\1\u0185\26\40\15\0\5\40\5\0\26\40\1\u0186"+
    "\2\0\27\40\1\u0186\15\0\5\40\5\0\3\40\1\u0187"+
    "\23\40\2\0\4\40\1\u0187\23\40\15\0\5\40\5\0"+
    "\1\u0188\26\40\2\0\1\40\1\u0188\26\40\15\0\5\40"+
    "\5\0\1\u0189\26\40\2\0\1\40\1\u0189\26\40\15\0"+
    "\5\40\5\0\3\40\1\u018a\23\40\2\0\4\40\1\u018a"+
    "\23\40\15\0\5\40\5\0\1\u018b\26\40\2\0\1\40"+
    "\1\u018b\26\40\15\0\5\40\5\0\20\40\1\u018c\6\40"+
    "\2\0\21\40\1\u018c\6\40\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[25272];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\2\11\1\1\1\11\3\1\5\11"+
    "\15\1\2\11\15\1\2\11\2\1\1\0\40\1\1\0"+
    "\1\11\41\1\1\0\40\1\1\0\36\1\1\0\32\1"+
    "\1\0\30\1\1\0\25\1\1\0\23\1\1\11\171\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[396];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Codigo de usuario en sintaxis java
    public static LinkedList<TError> TablaEL = new LinkedList<TError>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public L_Analyzer_Requests(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols_Requests.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico "+yytext()+" Linea: "+(yyline+1)+" Columna: "+(yycolumn+1));
                        TError datos = new TError(yytext(),yyline + 1,yycolumn + 1,"Error Lexico","Simbolo no existe en el lenguaje");
                        TablaEL.add(datos);
            }
          // fall through
          case 46: break;
          case 2:
            { /* ignore whitespace */
            }
          // fall through
          case 47: break;
          case 3:
            { System.out.println("Reconocio "+yytext()+" exclamacion"); return new Symbol(Symbols_Requests.ExclamationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 48: break;
          case 4:
            { System.out.println("Reconocio "+yytext()+" comillas"); return new Symbol(Symbols_Requests.QuotationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 49: break;
          case 5:
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Symbols_Requests.Comma, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 50: break;
          case 6:
            { System.out.println("Reconocio "+yytext()+" tiempo"); return new Symbol(Symbols_Requests.Time, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 51: break;
          case 7:
            { System.out.println("Reconocio "+yytext()+" dos puntos"); return new Symbol(Symbols_Requests.Colon, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 52: break;
          case 8:
            { System.out.println("Reconocio "+yytext()+" menor que"); return new Symbol(Symbols_Requests.LessThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 53: break;
          case 9:
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Symbols_Requests.Equal, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 54: break;
          case 10:
            { System.out.println("Reconocio "+yytext()+" mayor que"); return new Symbol(Symbols_Requests.GreaterThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 55: break;
          case 11:
            { System.out.println("Reconocio "+yytext()+" interrogacion"); return new Symbol(Symbols_Requests.QuestionMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 56: break;
          case 12:
            { System.out.println("Reconocio "+yytext()+" valor de NI"); return new Symbol(Symbols_Requests.NIValue, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 57: break;
          case 13:
            { System.out.println("Reconocio "+yytext()+" corchete izquierdo"); return new Symbol(Symbols_Requests.LeftBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 58: break;
          case 14:
            { System.out.println("Reconocio "+yytext()+" corchete derecho"); return new Symbol(Symbols_Requests.RightBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 59: break;
          case 15:
            { System.out.println("Reconocio "+yytext()+" valor"); return new Symbol(Symbols_Requests.UPValue, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 60: break;
          case 16:
            { System.out.println("Reconocio "+yytext()+" llave izquierda"); return new Symbol(Symbols_Requests.LeftBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 61: break;
          case 17:
            { System.out.println("Reconocio "+yytext()+" llave derecha"); return new Symbol(Symbols_Requests.RightBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 62: break;
          case 18:
            { System.out.println("Reconocio "+yytext()+" id trivia"); return new Symbol(Symbols_Requests.IDTrivia, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 63: break;
          case 19:
            { System.out.println("Reconocio "+yytext()+" version number"); return new Symbol(Symbols_Requests.VersionNumber, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 64: break;
          case 20:
            { System.out.println("Reconocio "+yytext()+" tema"); return new Symbol(Symbols_Requests.Tema, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 65: break;
          case 21:
            { System.out.println("Reconocio "+yytext()+" xson"); return new Symbol(Symbols_Requests.XSONsentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 66: break;
          case 22:
            { System.out.println("Reconocio "+yytext()+" nombre"); return new Symbol(Symbols_Requests.Nombre, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 67: break;
          case 23:
            { System.out.println("Reconocio "+yytext()+" usuario"); return new Symbol(Symbols_Requests.Usuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 68: break;
          case 24:
            { System.out.println("Reconocio "+yytext()+" version"); return new Symbol(Symbols_Requests.Version, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 69: break;
          case 25:
            { System.out.println("Reconocio "+yytext()+" password"); return new Symbol(Symbols_Requests.Password, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 70: break;
          case 26:
            { System.out.println("Reconocio "+yytext()+" sentencia id trivia"); return new Symbol(Symbols_Requests.IDTriviaSentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 71: break;
          case 27:
            { System.out.println("Reconocio "+yytext()+" fecha"); return new Symbol(Symbols_Requests.Date, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 72: break;
          case 28:
            { System.out.println("Reconocio "+yytext()+" institucion"); return new Symbol(Symbols_Requests.Institucion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 73: break;
          case 29:
            { System.out.println("Reconocio "+yytext()+" nueva trivia"); return new Symbol(Symbols_Requests.NuevaTrivia, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 74: break;
          case 30:
            { System.out.println("Reconocio "+yytext()+" datos usuario"); return new Symbol(Symbols_Requests.DatosUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 75: break;
          case 31:
            { System.out.println("Reconocio "+yytext()+" usuario nuevo"); return new Symbol(Symbols_Requests.UsuarioNuevo, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 76: break;
          case 32:
            { System.out.println("Reconocio "+yytext()+" fecha de creacion"); return new Symbol(Symbols_Requests.FechaCreacion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 77: break;
          case 33:
            { System.out.println("Reconocio "+yytext()+" nuevo password"); return new Symbol(Symbols_Requests.NuevoPassword, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 78: break;
          case 34:
            { System.out.println("Reconocio "+yytext()+" eliminar trivia"); return new Symbol(Symbols_Requests.EliminarTrivia, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 79: break;
          case 35:
            { System.out.println("Reconocio "+yytext()+" tiempo pregunta"); return new Symbol(Symbols_Requests.TiempoPregunta, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 80: break;
          case 36:
            { System.out.println("Reconocio "+yytext()+" usuario antiguo"); return new Symbol(Symbols_Requests.UsuarioAntiguo, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 81: break;
          case 37:
            { System.out.println("Reconocio "+yytext()+" eliminar usuario"); return new Symbol(Symbols_Requests.EliminarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 82: break;
          case 38:
            { System.out.println("Reconocio "+yytext()+" usuario creacion"); return new Symbol(Symbols_Requests.UsuarioCreacion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 83: break;
          case 39:
            { System.out.println("Reconocio "+yytext()+" modificar usuario"); return new Symbol(Symbols_Requests.ModificarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 84: break;
          case 40:
            { System.out.println("Reconocio "+yytext()+" parametros trivia"); return new Symbol(Symbols_Requests.ParametrosTrivia, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 85: break;
          case 41:
            { System.out.println("Reconocio "+yytext()+" fecha modificacion"); return new Symbol(Symbols_Requests.FechaModificacion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 86: break;
          case 42:
            { System.out.println("Reconocio "+yytext()+" realizar solicitud"); return new Symbol(Symbols_Requests.RealizarSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 87: break;
          case 43:
            { System.out.println("Reconocio "+yytext()+" realizar solicitudes"); return new Symbol(Symbols_Requests.RealizarSolicitudes, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 88: break;
          case 44:
            { System.out.println("Reconocio "+yytext()+" fin solicitud realizada"); return new Symbol(Symbols_Requests.FinSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 89: break;
          case 45:
            { System.out.println("Reconocio "+yytext()+" fin solicitudes realizadas"); return new Symbol(Symbols_Requests.FinSolicitudes, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 90: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
