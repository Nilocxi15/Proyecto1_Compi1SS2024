// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexerRequests.jflex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;
import java.util.LinkedList;
import models.TError;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class L_Analyzer_Requests implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8,  9, 
    10, 11, 12, 13, 14, 14, 14, 14, 14, 14, 15,  0, 16, 17, 18, 19, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 26, 26, 29, 30, 31, 32, 
    33, 26, 34, 35, 36, 37, 38, 39, 40, 26, 41, 42,  0, 43,  0, 44, 
     0, 45, 46, 47, 48, 49, 50, 51, 52, 53, 51, 51, 54, 55, 56, 57, 
    58, 51, 59, 60, 61, 62, 63, 64, 65, 51, 66, 67,  0, 68,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 51,  0,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0, 51,  0,  0, 
     0, 51,  0, 51,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0, 
     0, 51,  0,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0, 51,  0,  0, 
     0, 51,  0, 51,  0,  0,  0,  0,  0,  0, 51,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\3\6\1\7"+
    "\1\10\1\11\1\12\1\13\14\14\1\15\1\16\13\6"+
    "\1\17\1\20\1\6\1\0\1\14\1\6\1\14\1\6"+
    "\2\14\2\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\0\1\21\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\0\1\14\1\6\1\14"+
    "\1\6\1\14\2\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\2\22\1\0\1\14\1\6\1\14\1\6\1\14"+
    "\2\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\0"+
    "\1\6\1\14\3\6\1\14\1\6\1\14\1\6\2\23"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\0\1\6\1\14\3\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\2\24\2\25\1\0\1\6"+
    "\1\14\3\6\1\14\1\6\1\14\1\6\2\26\1\14"+
    "\2\6\1\0\4\6\1\14\1\6\1\14\3\6\1\27"+
    "\4\6\1\14\10\6\2\30\12\6\1\31\5\6\1\32"+
    "\1\6\1\33\11\6\1\34\6\6\1\35\3\6\1\36"+
    "\5\6\1\37\5\6\1\40\2\6\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\105\0\105\0\212\0\105\0\105\0\105\0\317"+
    "\0\u0114\0\u0159\0\105\0\105\0\105\0\105\0\105\0\u019e"+
    "\0\u01e3\0\u0228\0\u026d\0\u02b2\0\u02f7\0\u033c\0\u0381\0\u03c6"+
    "\0\u040b\0\u0450\0\u0495\0\105\0\105\0\u04da\0\u051f\0\u0564"+
    "\0\u05a9\0\u05ee\0\u0633\0\u0678\0\u06bd\0\u0702\0\u0747\0\u078c"+
    "\0\105\0\105\0\u07d1\0\u0816\0\u085b\0\u08a0\0\u08e5\0\u092a"+
    "\0\u096f\0\u09b4\0\u09f9\0\u0a3e\0\u0a83\0\u0ac8\0\u0b0d\0\u0b52"+
    "\0\u0b97\0\u0bdc\0\u0c21\0\u0c66\0\u0cab\0\u0cf0\0\u0d35\0\u0d7a"+
    "\0\u0dbf\0\u0e04\0\u0e49\0\u0e8e\0\u0ed3\0\105\0\u0f18\0\u0f5d"+
    "\0\u0fa2\0\u0fe7\0\u102c\0\u1071\0\u10b6\0\u10fb\0\u1140\0\u1185"+
    "\0\u11ca\0\u120f\0\u1254\0\u1299\0\u12de\0\u1323\0\u1368\0\u13ad"+
    "\0\u13f2\0\u1437\0\u147c\0\u14c1\0\u1506\0\u154b\0\u1590\0\u15d5"+
    "\0\u161a\0\u165f\0\u16a4\0\u16e9\0\u172e\0\u1773\0\u17b8\0\u17fd"+
    "\0\u1842\0\u1887\0\u18cc\0\u1911\0\u1956\0\u199b\0\u19e0\0\u1a25"+
    "\0\u1a6a\0\u1aaf\0\u1af4\0\u1b39\0\u019e\0\u0159\0\u1b7e\0\u1bc3"+
    "\0\u1c08\0\u1c4d\0\u1c92\0\u1cd7\0\u1d1c\0\u1d61\0\u1da6\0\u1deb"+
    "\0\u1e30\0\u1e75\0\u1eba\0\u1eff\0\u1f44\0\u1f89\0\u1fce\0\u2013"+
    "\0\u2058\0\u209d\0\u20e2\0\u2127\0\u216c\0\u21b1\0\u21f6\0\u223b"+
    "\0\u2280\0\u22c5\0\u230a\0\u234f\0\u2394\0\u23d9\0\u019e\0\u0159"+
    "\0\u241e\0\u2463\0\u24a8\0\u24ed\0\u2532\0\u2577\0\u25bc\0\u2601"+
    "\0\u2646\0\u268b\0\u26d0\0\u2715\0\u275a\0\u279f\0\u27e4\0\u2829"+
    "\0\u286e\0\u28b3\0\u28f8\0\u293d\0\u2982\0\u29c7\0\u2a0c\0\u2a51"+
    "\0\u019e\0\u0159\0\u2a96\0\u2adb\0\u2b20\0\u2b65\0\u2baa\0\u2bef"+
    "\0\u2c34\0\u2c79\0\u2cbe\0\u2d03\0\u019e\0\u0159\0\u2d48\0\u2d8d"+
    "\0\u2dd2\0\u2e17\0\u2e5c\0\u2ea1\0\u2ee6\0\u2f2b\0\u2f70\0\u2fb5"+
    "\0\u2ffa\0\u303f\0\u3084\0\u30c9\0\105\0\u310e\0\u3153\0\u3198"+
    "\0\u31dd\0\u3222\0\u3267\0\u32ac\0\u32f1\0\u3336\0\u337b\0\u33c0"+
    "\0\u3405\0\u344a\0\u019e\0\u0159\0\u348f\0\u34d4\0\u3519\0\u355e"+
    "\0\u35a3\0\u35e8\0\u362d\0\u3672\0\u36b7\0\u36fc\0\u0159\0\u3741"+
    "\0\u3786\0\u37cb\0\u3810\0\u3855\0\u0159\0\u389a\0\u0159\0\u38df"+
    "\0\u3924\0\u3969\0\u39ae\0\u39f3\0\u3a38\0\u3a7d\0\u3ac2\0\u3b07"+
    "\0\u0159\0\u3b4c\0\u3b91\0\u3bd6\0\u3c1b\0\u3c60\0\u3ca5\0\u0159"+
    "\0\u3cea\0\u3d2f\0\u3d74\0\u3db9\0\u3dfe\0\u3e43\0\u3e88\0\u3ecd"+
    "\0\u3f12\0\u0159\0\u3f57\0\u3f9c\0\u3fe1\0\u4026\0\u406b\0\u0159"+
    "\0\u40b0\0\u40f5\0\u0159";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\2\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\3\20\1\21\1\22\1\23\2\20\1\24\1\20"+
    "\1\25\1\26\1\20\1\27\1\30\2\20\1\31\1\32"+
    "\1\20\1\33\1\20\1\34\1\35\4\12\1\36\1\37"+
    "\1\40\2\12\1\41\1\12\1\42\1\43\1\12\1\44"+
    "\1\45\2\12\1\46\1\47\1\12\1\50\1\12\1\51"+
    "\1\52\107\0\1\3\114\0\5\53\5\0\26\12\2\0"+
    "\27\12\12\0\1\54\1\0\5\53\5\0\26\12\2\0"+
    "\27\12\14\0\5\12\5\0\26\12\2\0\27\12\14\0"+
    "\5\12\5\0\26\20\2\0\27\12\14\0\5\12\5\0"+
    "\1\55\25\20\2\0\1\12\1\56\25\12\14\0\5\12"+
    "\5\0\11\20\1\57\14\20\2\0\12\12\1\60\14\12"+
    "\14\0\5\12\5\0\4\20\1\61\3\20\1\62\15\20"+
    "\2\0\5\12\1\63\3\12\1\64\15\12\14\0\5\12"+
    "\5\0\13\20\1\65\12\20\2\0\14\12\1\66\12\12"+
    "\14\0\5\12\5\0\14\20\1\67\11\20\2\0\15\12"+
    "\1\70\11\12\14\0\5\12\5\0\14\20\1\71\11\20"+
    "\2\0\15\12\1\72\11\12\14\0\5\12\5\0\1\73"+
    "\25\20\2\0\1\12\1\74\25\12\14\0\5\12\5\0"+
    "\4\20\1\75\21\20\2\0\5\12\1\76\21\12\14\0"+
    "\5\12\5\0\17\20\1\77\6\20\2\0\20\12\1\100"+
    "\6\12\14\0\5\12\5\0\4\20\1\101\21\20\2\0"+
    "\5\12\1\102\21\12\14\0\5\12\5\0\17\20\1\103"+
    "\6\20\2\0\20\12\1\104\6\12\14\0\5\12\5\0"+
    "\1\56\25\12\2\0\1\12\1\56\25\12\14\0\5\12"+
    "\5\0\11\12\1\60\14\12\2\0\12\12\1\60\14\12"+
    "\14\0\5\12\5\0\4\12\1\63\3\12\1\64\15\12"+
    "\2\0\5\12\1\63\3\12\1\64\15\12\14\0\5\12"+
    "\5\0\13\12\1\66\12\12\2\0\14\12\1\66\12\12"+
    "\14\0\5\12\5\0\14\12\1\70\11\12\2\0\15\12"+
    "\1\70\11\12\14\0\5\12\5\0\14\12\1\72\11\12"+
    "\2\0\15\12\1\72\11\12\14\0\5\12\5\0\1\74"+
    "\25\12\2\0\1\12\1\74\25\12\14\0\5\12\5\0"+
    "\4\12\1\76\21\12\2\0\5\12\1\76\21\12\14\0"+
    "\5\12\5\0\17\12\1\100\6\12\2\0\20\12\1\100"+
    "\6\12\14\0\5\12\5\0\4\12\1\102\21\12\2\0"+
    "\5\12\1\102\21\12\14\0\5\12\5\0\17\12\1\104"+
    "\6\12\2\0\20\12\1\104\6\12\13\0\1\105\5\12"+
    "\5\0\26\12\2\0\27\12\14\0\1\106\104\0\5\12"+
    "\5\0\20\20\1\107\5\20\2\0\21\12\1\110\5\12"+
    "\14\0\5\12\5\0\20\12\1\110\5\12\2\0\21\12"+
    "\1\110\5\12\14\0\5\12\5\0\10\20\1\111\15\20"+
    "\2\0\11\12\1\112\15\12\14\0\5\12\5\0\10\12"+
    "\1\112\15\12\2\0\11\12\1\112\15\12\14\0\5\12"+
    "\5\0\2\20\1\113\23\20\2\0\3\12\1\114\23\12"+
    "\14\0\5\12\5\0\13\20\1\115\12\20\2\0\14\12"+
    "\1\116\12\12\14\0\5\12\5\0\2\12\1\114\23\12"+
    "\2\0\3\12\1\114\23\12\14\0\5\12\5\0\13\12"+
    "\1\116\12\12\2\0\14\12\1\116\12\12\14\0\5\12"+
    "\5\0\17\20\1\117\6\20\2\0\20\12\1\120\6\12"+
    "\14\0\5\12\5\0\17\12\1\120\6\12\2\0\20\12"+
    "\1\120\6\12\14\0\5\12\5\0\3\20\1\121\22\20"+
    "\2\0\4\12\1\122\22\12\14\0\5\12\5\0\3\12"+
    "\1\122\22\12\2\0\4\12\1\122\22\12\14\0\5\12"+
    "\5\0\12\20\1\123\13\20\2\0\13\12\1\124\13\12"+
    "\14\0\5\12\5\0\12\12\1\124\13\12\2\0\13\12"+
    "\1\124\13\12\14\0\5\12\5\0\17\20\1\125\6\20"+
    "\2\0\20\12\1\126\6\12\14\0\5\12\5\0\17\12"+
    "\1\126\6\12\2\0\20\12\1\126\6\12\14\0\5\12"+
    "\5\0\1\127\25\20\2\0\1\12\1\130\25\12\14\0"+
    "\5\12\5\0\1\130\25\12\2\0\1\12\1\130\25\12"+
    "\14\0\5\12\5\0\21\20\1\131\4\20\2\0\22\12"+
    "\1\132\4\12\14\0\5\12\5\0\21\12\1\132\4\12"+
    "\2\0\22\12\1\132\4\12\14\0\5\12\5\0\16\20"+
    "\1\133\7\20\2\0\17\12\1\134\7\12\14\0\5\12"+
    "\5\0\16\12\1\134\7\12\2\0\17\12\1\134\7\12"+
    "\14\0\5\12\5\0\14\20\1\135\11\20\2\0\15\12"+
    "\1\136\11\12\14\0\5\12\5\0\14\12\1\136\11\12"+
    "\2\0\15\12\1\136\11\12\14\0\2\137\103\0\5\12"+
    "\5\0\14\20\1\140\11\20\2\0\15\12\1\141\11\12"+
    "\14\0\5\12\5\0\14\12\1\141\11\12\2\0\15\12"+
    "\1\141\11\12\14\0\5\12\5\0\12\20\1\142\13\20"+
    "\2\0\13\12\1\143\13\12\14\0\5\12\5\0\12\12"+
    "\1\143\13\12\2\0\13\12\1\143\13\12\14\0\5\12"+
    "\5\0\7\20\1\144\16\20\2\0\10\12\1\145\16\12"+
    "\14\0\5\12\5\0\7\12\1\145\16\12\2\0\10\12"+
    "\1\145\16\12\14\0\5\12\5\0\26\20\2\0\1\146"+
    "\26\12\14\0\5\12\5\0\26\12\2\0\1\146\26\12"+
    "\14\0\5\12\5\0\20\20\1\147\5\20\2\0\21\12"+
    "\1\150\5\12\14\0\5\12\5\0\20\12\1\150\5\12"+
    "\2\0\21\12\1\150\5\12\14\0\5\12\5\0\10\20"+
    "\1\151\15\20\2\0\11\12\1\152\15\12\14\0\5\12"+
    "\5\0\10\12\1\152\15\12\2\0\11\12\1\152\15\12"+
    "\14\0\5\12\5\0\1\20\1\153\24\20\2\0\2\12"+
    "\1\154\24\12\14\0\5\12\5\0\1\12\1\154\24\12"+
    "\2\0\2\12\1\154\24\12\14\0\5\12\5\0\17\20"+
    "\1\155\6\20\2\0\20\12\1\156\6\12\14\0\5\12"+
    "\5\0\17\12\1\156\6\12\2\0\20\12\1\156\6\12"+
    "\14\0\5\12\5\0\11\20\1\157\14\20\2\0\12\12"+
    "\1\160\14\12\14\0\5\12\5\0\11\12\1\160\14\12"+
    "\2\0\12\12\1\160\14\12\14\0\5\12\5\0\1\161"+
    "\25\20\2\0\1\12\1\162\25\12\14\0\5\12\5\0"+
    "\1\162\25\12\2\0\1\12\1\162\25\12\14\0\5\12"+
    "\5\0\17\20\1\163\6\20\2\0\20\12\1\164\6\12"+
    "\14\0\5\12\5\0\17\12\1\164\6\12\2\0\20\12"+
    "\1\164\6\12\14\0\5\12\5\0\13\20\1\165\12\20"+
    "\2\0\14\12\1\166\12\12\14\0\5\12\5\0\13\12"+
    "\1\166\12\12\2\0\14\12\1\166\12\12\14\0\5\167"+
    "\100\0\5\12\5\0\17\20\1\170\6\20\2\0\20\12"+
    "\1\171\6\12\14\0\5\12\5\0\17\12\1\171\6\12"+
    "\2\0\20\12\1\171\6\12\14\0\5\12\5\0\10\20"+
    "\1\172\15\20\2\0\11\12\1\173\15\12\14\0\5\12"+
    "\5\0\10\12\1\173\15\12\2\0\11\12\1\173\15\12"+
    "\14\0\5\12\5\0\1\174\25\20\2\0\1\12\1\175"+
    "\25\12\14\0\5\12\5\0\1\175\25\12\2\0\1\12"+
    "\1\175\25\12\14\0\5\12\5\0\17\12\1\176\6\12"+
    "\2\0\20\12\1\176\6\12\14\0\5\12\5\0\10\20"+
    "\1\177\15\20\2\0\11\12\1\200\15\12\14\0\5\12"+
    "\5\0\10\12\1\200\15\12\2\0\11\12\1\200\15\12"+
    "\14\0\5\12\5\0\5\20\1\201\20\20\2\0\6\12"+
    "\1\202\20\12\14\0\5\12\5\0\5\12\1\202\20\12"+
    "\2\0\6\12\1\202\20\12\14\0\5\12\5\0\16\20"+
    "\1\203\7\20\2\0\17\12\1\204\7\12\14\0\5\12"+
    "\5\0\16\12\1\204\7\12\2\0\17\12\1\204\7\12"+
    "\14\0\5\12\5\0\23\20\1\205\2\20\2\0\24\12"+
    "\1\206\2\12\14\0\5\12\5\0\23\12\1\206\2\12"+
    "\2\0\24\12\1\206\2\12\14\0\5\12\5\0\10\20"+
    "\1\207\15\20\2\0\11\12\1\210\15\12\14\0\5\12"+
    "\5\0\10\12\1\210\15\12\2\0\11\12\1\210\15\12"+
    "\14\0\5\12\5\0\16\20\1\211\7\20\2\0\17\12"+
    "\1\212\7\12\14\0\5\12\5\0\16\12\1\212\7\12"+
    "\2\0\17\12\1\212\7\12\14\0\5\12\5\0\10\20"+
    "\1\213\15\20\2\0\11\12\1\214\15\12\14\0\5\12"+
    "\5\0\10\12\1\214\15\12\2\0\11\12\1\214\15\12"+
    "\13\0\1\215\105\0\5\12\5\0\26\20\2\0\1\216"+
    "\26\12\14\0\5\12\5\0\26\12\2\0\1\216\26\12"+
    "\14\0\5\12\5\0\13\20\1\217\12\20\2\0\14\12"+
    "\1\220\12\12\14\0\5\12\5\0\13\12\1\220\12\12"+
    "\2\0\14\12\1\220\12\12\14\0\5\12\5\0\26\20"+
    "\2\0\1\221\26\12\14\0\5\12\5\0\26\12\2\0"+
    "\1\221\26\12\14\0\5\12\5\0\14\12\1\222\11\12"+
    "\2\0\15\12\1\222\11\12\14\0\5\12\5\0\20\20"+
    "\1\223\5\20\2\0\21\12\1\224\5\12\14\0\5\12"+
    "\5\0\20\12\1\224\5\12\2\0\21\12\1\224\5\12"+
    "\14\0\5\12\5\0\10\20\1\225\15\20\2\0\11\12"+
    "\1\226\15\12\14\0\5\12\5\0\10\12\1\226\15\12"+
    "\2\0\11\12\1\226\15\12\14\0\5\12\5\0\4\20"+
    "\1\227\21\20\2\0\5\12\1\230\21\12\14\0\5\12"+
    "\5\0\4\12\1\230\21\12\2\0\5\12\1\230\21\12"+
    "\14\0\5\12\5\0\14\20\1\231\11\20\2\0\15\12"+
    "\1\232\11\12\14\0\5\12\5\0\14\12\1\232\11\12"+
    "\2\0\15\12\1\232\11\12\14\0\5\12\5\0\25\20"+
    "\1\233\2\0\26\12\1\234\14\0\5\12\5\0\25\12"+
    "\1\234\2\0\26\12\1\234\14\0\5\12\5\0\10\20"+
    "\1\235\15\20\2\0\11\12\1\236\15\12\14\0\5\12"+
    "\5\0\10\12\1\236\15\12\2\0\11\12\1\236\15\12"+
    "\14\0\5\12\5\0\14\20\1\237\11\20\2\0\15\12"+
    "\1\240\11\12\14\0\5\12\5\0\14\12\1\240\11\12"+
    "\2\0\15\12\1\240\11\12\15\0\2\241\102\0\5\12"+
    "\5\0\21\12\1\242\4\12\2\0\22\12\1\242\4\12"+
    "\14\0\5\12\5\0\1\243\25\20\2\0\1\12\1\244"+
    "\25\12\14\0\5\12\5\0\1\244\25\12\2\0\1\12"+
    "\1\244\25\12\14\0\5\12\5\0\2\12\1\245\23\12"+
    "\2\0\3\12\1\245\23\12\14\0\5\12\5\0\11\12"+
    "\1\246\14\12\2\0\12\12\1\246\14\12\14\0\5\12"+
    "\5\0\21\20\1\247\4\20\2\0\22\12\1\250\4\12"+
    "\14\0\5\12\5\0\21\12\1\250\4\12\2\0\22\12"+
    "\1\250\4\12\14\0\5\12\5\0\2\20\1\251\23\20"+
    "\2\0\3\12\1\252\23\12\14\0\5\12\5\0\2\12"+
    "\1\252\23\12\2\0\3\12\1\252\23\12\14\0\5\12"+
    "\5\0\16\20\1\253\7\20\2\0\17\12\1\254\7\12"+
    "\14\0\5\12\5\0\16\12\1\254\7\12\2\0\17\12"+
    "\1\254\7\12\14\0\5\12\5\0\1\255\25\20\2\0"+
    "\1\12\1\256\25\12\14\0\5\12\5\0\1\256\25\12"+
    "\2\0\1\12\1\256\25\12\14\0\5\12\5\0\14\20"+
    "\1\257\11\20\2\0\15\12\1\260\11\12\14\0\5\12"+
    "\5\0\14\12\1\260\11\12\2\0\15\12\1\260\11\12"+
    "\14\0\5\12\5\0\13\20\1\261\12\20\2\0\14\12"+
    "\1\262\12\12\14\0\5\12\5\0\13\12\1\262\12\12"+
    "\2\0\14\12\1\262\12\12\14\0\5\263\100\0\5\12"+
    "\5\0\17\12\1\264\6\12\2\0\20\12\1\264\6\12"+
    "\14\0\5\12\5\0\16\20\1\265\7\20\2\0\17\12"+
    "\1\266\7\12\14\0\5\12\5\0\16\12\1\266\7\12"+
    "\2\0\17\12\1\266\7\12\14\0\5\12\5\0\16\12"+
    "\1\267\7\12\2\0\17\12\1\267\7\12\14\0\5\12"+
    "\5\0\10\12\1\270\15\12\2\0\11\12\1\270\15\12"+
    "\14\0\5\12\5\0\2\20\1\271\23\20\2\0\3\12"+
    "\1\272\23\12\14\0\5\12\5\0\2\12\1\272\23\12"+
    "\2\0\3\12\1\272\23\12\14\0\5\12\5\0\1\273"+
    "\25\20\2\0\1\12\1\274\25\12\14\0\5\12\5\0"+
    "\1\274\25\12\2\0\1\12\1\274\25\12\14\0\5\12"+
    "\5\0\3\20\1\275\22\20\2\0\4\12\1\276\22\12"+
    "\14\0\5\12\5\0\3\12\1\276\22\12\2\0\4\12"+
    "\1\276\22\12\14\0\5\12\5\0\16\20\1\277\7\20"+
    "\2\0\17\12\1\300\7\12\14\0\5\12\5\0\16\12"+
    "\1\300\7\12\2\0\17\12\1\300\7\12\14\0\5\12"+
    "\5\0\26\20\2\0\1\301\26\12\14\0\5\12\5\0"+
    "\26\12\2\0\1\301\26\12\14\0\5\302\100\0\5\12"+
    "\5\0\21\12\1\303\4\12\2\0\22\12\1\303\4\12"+
    "\14\0\5\12\5\0\26\20\2\0\1\304\26\12\14\0"+
    "\5\12\5\0\26\12\2\0\1\304\26\12\14\0\5\12"+
    "\5\0\4\12\1\305\21\12\2\0\5\12\1\305\21\12"+
    "\14\0\5\12\5\0\2\12\1\306\23\12\2\0\3\12"+
    "\1\306\23\12\14\0\5\12\5\0\10\20\1\307\15\20"+
    "\2\0\11\12\1\310\15\12\14\0\5\12\5\0\10\12"+
    "\1\310\15\12\2\0\11\12\1\310\15\12\14\0\5\12"+
    "\5\0\16\20\1\311\7\20\2\0\17\12\1\312\7\12"+
    "\14\0\5\12\5\0\16\12\1\312\7\12\2\0\17\12"+
    "\1\312\7\12\14\0\5\12\5\0\26\20\2\0\1\313"+
    "\26\12\14\0\5\12\5\0\26\12\2\0\1\313\26\12"+
    "\14\0\5\12\5\0\13\12\1\314\12\12\2\0\14\12"+
    "\1\314\12\12\14\0\5\315\100\0\5\12\5\0\1\316"+
    "\25\12\2\0\1\12\1\316\25\12\14\0\5\12\5\0"+
    "\21\12\1\317\4\12\2\0\22\12\1\317\4\12\14\0"+
    "\5\12\5\0\1\320\25\12\2\0\1\12\1\320\25\12"+
    "\14\0\5\12\5\0\10\12\1\321\15\12\2\0\11\12"+
    "\1\321\15\12\14\0\5\12\5\0\14\20\1\322\11\20"+
    "\2\0\15\12\1\323\11\12\14\0\5\12\5\0\14\12"+
    "\1\323\11\12\2\0\15\12\1\323\11\12\14\0\5\12"+
    "\5\0\26\20\2\0\1\324\26\12\14\0\5\12\5\0"+
    "\26\12\2\0\1\324\26\12\14\0\5\12\5\0\17\12"+
    "\1\325\6\12\2\0\20\12\1\325\6\12\14\0\5\12"+
    "\5\0\21\12\1\326\4\12\2\0\22\12\1\326\4\12"+
    "\14\0\5\12\5\0\16\12\1\327\7\12\2\0\17\12"+
    "\1\327\7\12\14\0\5\12\5\0\17\12\1\330\6\12"+
    "\2\0\20\12\1\330\6\12\14\0\5\12\5\0\2\12"+
    "\1\331\23\12\2\0\3\12\1\331\23\12\14\0\5\12"+
    "\5\0\20\12\1\332\5\12\2\0\21\12\1\332\5\12"+
    "\14\0\5\12\5\0\13\20\1\333\12\20\2\0\14\12"+
    "\1\334\12\12\14\0\5\12\5\0\13\12\1\334\12\12"+
    "\2\0\14\12\1\334\12\12\14\0\5\12\5\0\21\12"+
    "\1\335\4\12\2\0\22\12\1\335\4\12\14\0\5\12"+
    "\5\0\14\12\1\336\11\12\2\0\15\12\1\336\11\12"+
    "\14\0\5\12\5\0\4\12\1\337\21\12\2\0\5\12"+
    "\1\337\21\12\14\0\5\12\5\0\10\12\1\340\15\12"+
    "\2\0\11\12\1\340\15\12\14\0\5\12\5\0\21\12"+
    "\1\341\4\12\2\0\22\12\1\341\4\12\14\0\5\12"+
    "\5\0\10\12\1\342\15\12\2\0\11\12\1\342\15\12"+
    "\14\0\5\12\5\0\21\12\1\343\4\12\2\0\22\12"+
    "\1\343\4\12\14\0\5\12\5\0\17\12\1\344\6\12"+
    "\2\0\20\12\1\344\6\12\14\0\5\12\5\0\11\12"+
    "\1\345\14\12\2\0\12\12\1\345\14\12\14\0\5\12"+
    "\5\0\22\12\1\346\3\12\2\0\23\12\1\346\3\12"+
    "\14\0\5\12\5\0\14\12\1\347\11\12\2\0\15\12"+
    "\1\347\11\12\14\0\5\12\5\0\1\350\25\12\2\0"+
    "\1\12\1\350\25\12\14\0\5\12\5\0\14\12\1\351"+
    "\11\12\2\0\15\12\1\351\11\12\14\0\5\12\5\0"+
    "\3\12\1\352\22\12\2\0\4\12\1\352\22\12\14\0"+
    "\5\12\5\0\21\12\1\353\4\12\2\0\22\12\1\353"+
    "\4\12\14\0\5\12\5\0\10\12\1\354\15\12\2\0"+
    "\11\12\1\354\15\12\14\0\5\12\5\0\14\12\1\355"+
    "\11\12\2\0\15\12\1\355\11\12\14\0\5\12\5\0"+
    "\16\12\1\356\7\12\2\0\17\12\1\356\7\12\14\0"+
    "\5\12\5\0\13\12\1\357\12\12\2\0\14\12\1\357"+
    "\12\12\14\0\5\12\5\0\4\12\1\360\21\12\2\0"+
    "\1\361\4\12\1\360\21\12\14\0\5\12\5\0\1\362"+
    "\25\12\2\0\1\12\1\362\25\12\14\0\5\12\5\0"+
    "\2\12\1\363\23\12\2\0\3\12\1\363\23\12\14\0"+
    "\5\12\5\0\10\12\1\364\15\12\2\0\11\12\1\364"+
    "\15\12\14\0\5\12\5\0\17\12\1\365\6\12\2\0"+
    "\20\12\1\365\6\12\14\0\5\12\5\0\16\12\1\366"+
    "\7\12\2\0\17\12\1\366\7\12\14\0\5\12\5\0"+
    "\16\12\1\367\7\12\2\0\17\12\1\367\7\12\14\0"+
    "\5\12\5\0\10\12\1\370\15\12\2\0\11\12\1\370"+
    "\15\12\14\0\5\12\5\0\14\12\1\371\11\12\2\0"+
    "\15\12\1\371\11\12\14\0\5\12\5\0\26\12\2\0"+
    "\1\372\26\12\14\0\5\12\5\0\4\12\1\373\21\12"+
    "\2\0\5\12\1\373\21\12\14\0\5\12\5\0\10\12"+
    "\1\374\15\12\2\0\11\12\1\374\15\12\14\0\5\12"+
    "\5\0\20\12\1\375\5\12\2\0\21\12\1\375\5\12"+
    "\14\0\5\12\5\0\16\12\1\376\7\12\2\0\17\12"+
    "\1\376\7\12\14\0\5\12\5\0\1\377\25\12\2\0"+
    "\1\12\1\377\25\12\14\0\5\12\5\0\14\12\1\u0100"+
    "\11\12\2\0\15\12\1\u0100\11\12\14\0\5\12\5\0"+
    "\21\12\1\u0101\4\12\2\0\22\12\1\u0101\4\12\14\0"+
    "\5\12\5\0\4\12\1\u0102\21\12\2\0\5\12\1\u0102"+
    "\21\12\14\0\5\12\5\0\11\12\1\u0103\14\12\2\0"+
    "\12\12\1\u0103\14\12\14\0\5\12\5\0\3\12\1\u0104"+
    "\22\12\2\0\4\12\1\u0104\22\12\14\0\5\12\5\0"+
    "\1\u0105\25\12\2\0\1\12\1\u0105\25\12\14\0\5\12"+
    "\5\0\10\12\1\u0106\15\12\2\0\11\12\1\u0106\15\12"+
    "\14\0\5\12\5\0\4\12\1\u0107\21\12\2\0\5\12"+
    "\1\u0107\21\12\14\0\5\12\5\0\11\12\1\u0108\14\12"+
    "\2\0\12\12\1\u0108\14\12\14\0\5\12\5\0\25\12"+
    "\1\u0109\2\0\26\12\1\u0109\14\0\5\12\5\0\17\12"+
    "\1\u010a\6\12\2\0\20\12\1\u010a\6\12\14\0\5\12"+
    "\5\0\10\12\1\u010b\15\12\2\0\11\12\1\u010b\15\12"+
    "\14\0\5\12\5\0\1\u010c\25\12\2\0\1\12\1\u010c"+
    "\25\12\14\0\5\12\5\0\25\12\1\u010d\2\0\26\12"+
    "\1\u010d\14\0\5\12\5\0\3\12\1\u010e\22\12\2\0"+
    "\4\12\1\u010e\22\12\14\0\5\12\5\0\1\u010f\25\12"+
    "\2\0\1\12\1\u010f\25\12\14\0\5\12\5\0\1\u0110"+
    "\25\12\2\0\1\12\1\u0110\25\12\14\0\5\12\5\0"+
    "\3\12\1\u0111\22\12\2\0\4\12\1\u0111\22\12\14\0"+
    "\5\12\5\0\1\u0112\25\12\2\0\1\12\1\u0112\25\12"+
    "\14\0\5\12\5\0\17\12\1\u0113\6\12\2\0\20\12"+
    "\1\u0113\6\12\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[16698];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\3\1\5\11\14\1\2\11"+
    "\13\1\2\11\1\1\1\0\30\1\1\0\1\11\30\1"+
    "\1\0\27\1\1\0\25\1\1\0\23\1\1\0\21\1"+
    "\1\0\16\1\1\0\12\1\1\11\106\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[275];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
    //Codigo de usuario en sintaxis java
    public static LinkedList<TError> TablaEL = new LinkedList<TError>();


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public L_Analyzer_Requests(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols_Requests.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error Lexico "+yytext()+" Linea: "+(yyline+1)+" Columna: "+(yycolumn+1));
                        TError datos = new TError(yytext(),yyline + 1,yycolumn + 1,"Error Lexico","Simbolo no existe en el lenguaje");
                        TablaEL.add(datos);
            }
          // fall through
          case 34: break;
          case 2:
            { /* ignore whitespace */
            }
          // fall through
          case 35: break;
          case 3:
            { System.out.println("Reconocio "+yytext()+" exclamacion"); return new Symbol(Symbols_Requests.ExclamationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 36: break;
          case 4:
            { System.out.println("Reconocio "+yytext()+" comillas"); return new Symbol(Symbols_Requests.QuotationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 37: break;
          case 5:
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Symbols_Requests.Comma, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 38: break;
          case 6:
            { System.out.println("Reconocio "+yytext()+" valor"); return new Symbol(Symbols_Requests.UPValue, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 39: break;
          case 7:
            { System.out.println("Reconocio "+yytext()+" dos puntos"); return new Symbol(Symbols_Requests.Colon, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 40: break;
          case 8:
            { System.out.println("Reconocio "+yytext()+" menor que"); return new Symbol(Symbols_Requests.LessThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 41: break;
          case 9:
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Symbols_Requests.Equal, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 42: break;
          case 10:
            { System.out.println("Reconocio "+yytext()+" mayor que"); return new Symbol(Symbols_Requests.GreaterThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 43: break;
          case 11:
            { System.out.println("Reconocio "+yytext()+" interrogacion"); return new Symbol(Symbols_Requests.QuestionMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 44: break;
          case 12:
            { System.out.println("Reconocio "+yytext()+" valor de NI"); return new Symbol(Symbols_Requests.NIValue, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 45: break;
          case 13:
            { System.out.println("Reconocio "+yytext()+" corchete izquierdo"); return new Symbol(Symbols_Requests.LeftBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 46: break;
          case 14:
            { System.out.println("Reconocio "+yytext()+" corchete derecho"); return new Symbol(Symbols_Requests.RightBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 47: break;
          case 15:
            { System.out.println("Reconocio "+yytext()+" llave izquierda"); return new Symbol(Symbols_Requests.LeftBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 48: break;
          case 16:
            { System.out.println("Reconocio "+yytext()+" llave derecha"); return new Symbol(Symbols_Requests.RightBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 49: break;
          case 17:
            { System.out.println("Reconocio "+yytext()+" version number"); return new Symbol(Symbols_Requests.VersionNumber, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 50: break;
          case 18:
            { System.out.println("Reconocio "+yytext()+" xson"); return new Symbol(Symbols_Requests.XSONsentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 51: break;
          case 19:
            { System.out.println("Reconocio "+yytext()+" nombre"); return new Symbol(Symbols_Requests.Nombre, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 52: break;
          case 20:
            { System.out.println("Reconocio "+yytext()+" usuario"); return new Symbol(Symbols_Requests.Usuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 53: break;
          case 21:
            { System.out.println("Reconocio "+yytext()+" version"); return new Symbol(Symbols_Requests.Version, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 54: break;
          case 22:
            { System.out.println("Reconocio "+yytext()+" password"); return new Symbol(Symbols_Requests.Password, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 55: break;
          case 23:
            { System.out.println("Reconocio "+yytext()+" fecha"); return new Symbol(Symbols_Requests.Date, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 56: break;
          case 24:
            { System.out.println("Reconocio "+yytext()+" institucion"); return new Symbol(Symbols_Requests.Institucion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 57: break;
          case 25:
            { System.out.println("Reconocio "+yytext()+" datos usuario"); return new Symbol(Symbols_Requests.DatosUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 58: break;
          case 26:
            { System.out.println("Reconocio "+yytext()+" usuario nuevo"); return new Symbol(Symbols_Requests.UsuarioNuevo, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 59: break;
          case 27:
            { System.out.println("Reconocio "+yytext()+" fecha de creacion"); return new Symbol(Symbols_Requests.FechaCreacion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 60: break;
          case 28:
            { System.out.println("Reconocio "+yytext()+" eliminar usuario"); return new Symbol(Symbols_Requests.EliminarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 61: break;
          case 29:
            { System.out.println("Reconocio "+yytext()+" modificar usuario"); return new Symbol(Symbols_Requests.ModificarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 62: break;
          case 30:
            { System.out.println("Reconocio "+yytext()+" realizar solicitud"); return new Symbol(Symbols_Requests.RealizarSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 63: break;
          case 31:
            { System.out.println("Reconocio "+yytext()+" realizar solicitudes"); return new Symbol(Symbols_Requests.RealizarSolicitudes, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 64: break;
          case 32:
            { System.out.println("Reconocio "+yytext()+" fin solicitud realizada"); return new Symbol(Symbols_Requests.FinSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 65: break;
          case 33:
            { System.out.println("Reconocio "+yytext()+" fin solicitudes realizadas"); return new Symbol(Symbols_Requests.FinSolicitudes, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
