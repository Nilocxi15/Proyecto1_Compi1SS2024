    /*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones Y paquetes
package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

import models.TError;
import models.createUser;

//------> Codigo para el parser,variables, metodos, etc.
parser code
{:
    public static LinkedList<TError> TablaESS = new LinkedList<TError>();

    public boolean result = false;

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s) {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        int tipo = s.sym;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: " + lexema);
        System.out.println("\t\tFila: " + fila);
        System.out.println("\t\tColumna: " + columna);
        System.out.println("\t\tTipo: " + tipo);

        // Sugerencia del token esperado
        String expectedToken = getExpectedToken(tipo);

        TError data = new TError(lexema, fila, columna, "Sintáctico", "Se esperaba el token '" + expectedToken + "'");
        TablaESS.add(data);
    }

private String getExpectedToken(int tipo) {
    switch (tipo) {
        case Symbols_Requests.LessThan:
            return ">' o '}";
        case Symbols_Requests.GreaterThan:
            return "?' , '!' o '";
        case Symbols_Requests.QuestionMark:
            return "<' o ' \" (comilla)";
        case Symbols_Requests.Equal:
            return "version";
        case Symbols_Requests.QuotationMark:
            return ":' , '{' , ' , (coma)' o 'valor del campo";
        case Symbols_Requests.ExclamationMark:
            return "<' o la sentencia 'fin_solicitud(es)_realizada(s)";
        case Symbols_Requests.Colon:
            return "de instrucción' o 'nombre del campo";
        case Symbols_Requests.Comma:
            return "\" (comilla)' o '}";
        case Symbols_Requests.LeftBrace:
            return ">' , '[' o ' , (coma)";
        case Symbols_Requests.RightBrace:
            return ", (coma)' o ']";
        case Symbols_Requests.LeftBracket:
            return ":";
        case Symbols_Requests.RightBracket:
            return "]";
        case Symbols_Requests.XSONsentence:
            return "?";
        case Symbols_Requests.Version:
            return "xson";
        case Symbols_Requests.VersionNumber:
            return "\" (comilla)";
        case Symbols_Requests.RealizarSolicitud:
            return "!";
        case Symbols_Requests.RealizarSolicitudes:
            return "!";
        case Symbols_Requests.FinSolicitud:
            return "<";
        case Symbols_Requests.FinSolicitudes:
            return "<";
        case Symbols_Requests.UsuarioNuevo:
            return "\" (comilla)";
        case Symbols_Requests.ModificarUsuario:
            return "ModificarUsuario";
        case Symbols_Requests.EliminarUsuario:
            return "\" (comilla)";
        case Symbols_Requests.DatosUsuario:
            return "\" (comilla)";
        case Symbols_Requests.Usuario:
            return "\" (comilla)";
        case Symbols_Requests.Password:
            return "\" (comilla)";
        case Symbols_Requests.Nombre:
            return "\" (comilla)";
        case Symbols_Requests.Institucion:
            return "\" (comilla)";
        case Symbols_Requests.NIValue:
            return "NIValue";
        case Symbols_Requests.UPValue:
            return "UPValue";
        case Symbols_Requests.FechaCreacion:
            return "\" (comilla)";
        case Symbols_Requests.Date:
            return "\" (comilla)";
        // Agrega más casos según los tokens que manejes
        default:
            return "token desconocido";
    }
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
    //Verificación de campos completos USUARIONUEVO
    int contUser = 0;
    int contPass = 0;
    int contName = 0;
    int contInst = 0;
    int contDate = 0;

    int contFields = 0;

    public void contFields(String field){
        switch(field){
            case "Usuario":
                contUser++;
                contFields++;
                break;
            case "Password":
                contPass++;
                contFields++;
                break;
            case "Nombre":
                contName++;
                contFields++;
                break;
            case "Institucion":
                contInst++;
                contFields++;
                break;
            case "FechaCreacion":
                contDate++;
                contFields++;
                break;
        }
    }

    public void cleanFields(){
        contUser = 0;
        contPass = 0;
        contName = 0;
        contInst = 0;
        contDate = 0;
        contFields = 0;
    }

    public void checkFields(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFields/contUser) != 5){
            result = false;
            System.out.println("Error: El campo Usuario no esta completo o esta duplicado");
            TError datos = new TError("Usuario", line, column, "Semántico", "Campo USUARIO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contPass) != 5){
            result = false;
            System.out.println("Error: El campo Password no esta completo o esta duplicado");
            TError datos = new TError("Password", line, column, "Semántico", "Campo PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contName) != 5){
            result = false;
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contInst) != 5){
            result = false;
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contDate) != 5){
            result = false;
            System.out.println("Error: El campo Fecha de Creacion esta repetido");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION duplicado");
            TablaESS.add(datos);
        }
    }

    //Verificación de campos completos NUEVATRIVIA
    int contIDTrivia = 0;
    int contTime = 0;
    int contNameNV = 0;
    int contTheme = 0;
    int contUserNV = 0;
    int contDateNV = 0;
    int contFieldsNV = 0;

    private void contFieldsNV(String field){
        contFieldsNV++;
        switch(field){
            case "IDTrivia":
                contIDTrivia++;
                break;
            case "Tiempo":
                contTime++;
                break;
            case "Nombre":
                contNameNV++;
                break;
            case "Tema":
                contTheme++;
                break;
            case "UsuarioCreacion":
                contUserNV++;
                break;
            case "FechaCreacion":
                contDateNV++;
                break;
        }
    }

    private void checkFieldsNV(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFieldsNV/contIDTrivia) != 6){
            result = false;
            System.out.println("Error: El campo IDTrivia no esta completo o esta duplicado");
            TError datos = new TError("IDTrivia", line, column, "Semántico", "Campo ID_TRIVIA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contTime) != 6){
            result = false;
            System.out.println("Error: El campo Tiempo no esta completo o esta duplicado");
            TError datos = new TError("Tiempo", line, column, "Semántico", "Campo TIEMPO_PREGUNTA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contNameNV) != 6){
            result = false;
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contTheme) != 6){
            result = false;
            System.out.println("Error: El campo Tema no esta completo o esta duplicado");
            TError datos = new TError("Tema", line, column, "Semántico", "Campo TEMA faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contUserNV) != 6){
            result = false;
            System.out.println("Error: El campo Usuario de Creacion no esta completo o esta duplicado");
            TError datos = new TError("UsuarioCreacion", line, column, "Semántico", "Campo USUARIO_CREACION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsNV/contDateNV) != 6){
            result = false;
            System.out.println("Error: El campo Fecha de Creacion no esta completo o esta duplicado");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION faltante o repetido");
            TablaESS.add(datos);
        }
    }

    private void cleanFieldsNV(){
        contIDTrivia = 0;
        contTime = 0;
        contNameNV = 0;
        contTheme = 0;
        contUserNV = 0;
        contDateNV = 0;
        contFieldsNV = 0;
    }

    //Verificación de campos completos MODIFICARUSUARIO
    int contUserA = 0;
    int contUserN = 0;
    int contPassN = 0;
    int fechaMod = 0;
    int inst = 0;
    int contFieldsMU = 0;

    private void contFieldsMU(String field){
        contFieldsMU++;
        switch(field){
            case "UsuarioAntiguo":
                contUserA++;
                break;
            case "UsuarioNuevo":
                contUserN++;
                break;
            case "NuevoPassword":
                contPassN++;
                break;
            case "FechaModificacion":
                fechaMod++;
                break;
            case "Institucion":
                inst++;
                break;
        }
    }

    private void cleanFieldsMU(){
        contUserA = 0;
        contUserN = 0;
        contPassN = 0;
        fechaMod = 0;
        inst = 0;
        contFieldsMU = 0;
    }

    private void checkFieldsMU(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFieldsMU/contUserA) != 5){
            result = false;
            System.out.println("Error: El campo Usuario Antiguo no esta completo o esta duplicado");
            TError datos = new TError("UsuarioAntiguo", line, column, "Semántico", "Campo USUARIO_ANTIGUO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/contUserN) != 5){
            result = false;
            System.out.println("Error: El campo Usuario Nuevo no esta completo o esta duplicado");
            TError datos = new TError("UsuarioNuevo", line, column, "Semántico", "Campo USUARIO_NUEVO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/contPassN) != 5){
            result = false;
            System.out.println("Error: El campo Nuevo Password no esta completo o esta duplicado");
            TError datos = new TError("NuevoPassword", line, column, "Semántico", "Campo NUEVO_PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/fechaMod) != 5){
            result = false;
            System.out.println("Error: El campo Fecha de Modificacion no esta completo o esta duplicado");
            TError datos = new TError("FechaModificacion", line, column, "Semántico", "Campo FECHA_MODIFICACION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFieldsMU/inst) != 5){
            result = false;
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
    }
:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales
terminal String LessThan, GreaterThan, QuestionMark, Equal, QuotationMark, ExclamationMark, Colon, Comma,
                LeftBrace, RightBrace, LeftBracket, RightBracket, XSONsentence, Version, VersionNumber,
                RealizarSolicitud, RealizarSolicitudes, FinSolicitud, FinSolicitudes, UsuarioNuevo,
                ModificarUsuario, EliminarUsuario, DatosUsuario, Usuario, Password, Nombre, Institucion,
                NIValue, UPValue, FechaCreacion, Date, ParametrosTrivia, IDTriviaSentence, TiempoPregunta, Tema,
                Time, IDTrivia, NuevaTrivia, UsuarioCreacion, UsuarioAntiguo, NuevoPassword, FechaModificacion,
                EliminarTrivia;

//------> declaracion de no terminales
nonterminal  INICIO, SINGLEREQUEST, USUARIONUEVO, MODIFICARUSUARIO, ELIMINARUSUARIO, NUEVATRIVIA,
                NEWUSERLOOP, NEWUSERBLOCK, NEWTRIVIALOOP, NEWTRIVIABLOCK, VALUES, NAMES, VALUESCONCAT,
                LOOP, LOOP2, HEADER, MODIFICARUSUARIOLOOP, MODIFICARUSUARIOBLOCK, ELIMINARUSUARIOLOOP,
                ELIMINARTRIVIA, ELIMINARTRIVIALOOP;

start with INICIO;

/*--------------- 3ra Area: Reglas Gramaticales -----------------------*/
INICIO ::= HEADER LOOP
            | error {:System.out.println("Error en la sentencia inicial");
            cleanFields();:};

HEADER ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan;

LOOP ::= SINGLEREQUEST
	| LessThan ExclamationMark RealizarSolicitudes GreaterThan LOOP2 {:System.out.println("Entra en sentencia multiple");:}
    | /*epsilon*/;

LOOP2 ::= SINGLEREQUEST LOOP2
        |LessThan FinSolicitudes ExclamationMark GreaterThan {:System.out.println("Sale de sentencia multiple");:};

SINGLEREQUEST ::= USUARIONUEVO
                | MODIFICARUSUARIO
                | ELIMINARUSUARIO
                | NUEVATRIVIA
                | ELIMINARTRIVIA;

USUARIONUEVO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark UsuarioNuevo QuotationMark GreaterThan
                    LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket
                    NEWUSERLOOP
                    RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                    {:cleanFields();:}
                | error USUARIONUEVO {:System.out.println("Error en la declaración de USUARIONUEVO"); :};

NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace Comma NEWUSERLOOP
                {:checkFields();:}
                | LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace
                {:checkFields();:}
                | error {:System.out.println("Error en la declaración de NEWUSERLOOP"); :};

NEWUSERBLOCK ::= QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                {:contFields("Usuario");:}
                | QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                {:contFields("Password");:}
                | QuotationMark Nombre QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                {:contFields("Nombre");:}
                | QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                {:contFields("Institucion");:}
                | QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma
                {:contFields("FechaCreacion");:}
                | error {:System.out.println("Error en la declaración de NEWUSERBLOCK");
                result = false;
                cleanFields();:};

MODIFICARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan
                    LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket
                    MODIFICARUSUARIOLOOP
                    RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                    {:result = true;
                    System.out.println("MODIFICAR_USUARIO reconocido y aceptado");:}
                    {:cleanFieldsMU();:}
                    |error MODIFICARUSUARIO {:System.out.println("Error en la declaración de MODIFICARUSUARIO"); :};

MODIFICARUSUARIOLOOP ::= LeftBrace MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK
                        RightBrace Comma MODIFICARUSUARIOLOOP
                        {:checkFieldsMU();:}
                        |LeftBrace MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK MODIFICARUSUARIOBLOCK RightBrace
                        {:checkFieldsMU();:}
                        |error {:System.out.println("Error en la declaración de MODIFICARUSUARIOLOOP"); :};

MODIFICARUSUARIOBLOCK ::= QuotationMark UsuarioAntiguo QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                        {:contFieldsMU("UsuarioAntiguo");:}
                        | QuotationMark UsuarioNuevo QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                        {:contFieldsMU("UsuarioNuevo");:}
                        | QuotationMark NuevoPassword QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                        {:contFieldsMU("NuevoPassword");:}
                        | QuotationMark FechaModificacion QuotationMark Colon QuotationMark Date QuotationMark Comma
                        {:contFieldsMU("FechaModificacion");:}
                        | QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                        {:contFieldsMU("Institucion");:}
                        | error {:System.out.println("Error en la declaración de MODIFICARUSUARIOBLOCK");
                        result = false;
                        cleanFieldsMU();:};

ELIMINARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarUsuario QuotationMark GreaterThan
                    LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket
                    ELIMINARUSUARIOLOOP
                    RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan {:result = true;
                    System.out.println("Eliminar usuario reconocido y aceptado");:}
                | error ELIMINARUSUARIO {:System.out.println("Error en la declaración de ELIMINARUSUARIO");
                result = false;:};

ELIMINARUSUARIOLOOP ::= LeftBrace
                        QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark
                        RightBrace Comma ELIMINARUSUARIOLOOP
                        | LeftBrace
                        QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark
                        RightBrace
                        | error {:System.out.println("Error en la declaración de ELIMINARUSUARIOLOOP");
                        result = false;:};

NUEVATRIVIA ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark NuevaTrivia QuotationMark GreaterThan
                LeftBrace QuotationMark ParametrosTrivia QuotationMark Colon LeftBracket
                NEWTRIVIALOOP
                RightBracket RightBrace
                LessThan FinSolicitud ExclamationMark GreaterThan {:System.out.println("Sentencia de nueva trivia reconocida y aceptada");
                cleanFieldsNV();:}
                | error NUEVATRIVIA {:System.out.println("Error en la declaración de NUEVATRIVIA"); :};

NEWTRIVIALOOP ::= LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace Comma NEWTRIVIALOOP
                {:checkFieldsNV();:}
                | LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace
                {:checkFieldsNV();:}
                | error {:System.out.println("Error en la declaración de NEWTRIVIALOOP"); :};

NEWTRIVIABLOCK ::= QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark Comma
                    {:contFieldsNV("IDTrivia");:}
                    | QuotationMark TiempoPregunta QuotationMark Colon Time Comma
                    {:contFieldsNV("Tiempo");:}
                    | QuotationMark Nombre QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma
                    {:contFieldsNV("Nombre");:}
                    | QuotationMark Tema QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma
                    {:contFieldsNV("Tema");:}
                    | QuotationMark UsuarioCreacion QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                    {:contFieldsNV("UsuarioCreacion");:}
                    | QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma
                    {:contFieldsNV("FechaCreacion");:}
                    | error {:System.out.println("Error en la declaración de NEWTRIVIABLOCK");
                    result = false;
                    cleanFieldsNV();:};

ELIMINARTRIVIA ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarTrivia QuotationMark GreaterThan
                    LeftBrace QuotationMark ParametrosTrivia QuotationMark Colon LeftBracket
                    ELIMINARTRIVIALOOP
                    RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                | error ELIMINARTRIVIA {:System.out.println("Error en la declaración de ELIMINARTRIVIA"); :};

ELIMINARTRIVIALOOP ::= LeftBrace
                        QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark
                        RightBrace Comma ELIMINARTRIVIALOOP
                        | LeftBrace
                        QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark
                        RightBrace
                        | error {:System.out.println("Error en la declaración de ELIMINARTRIVIALOOP"); :};

VALUES ::= UPValue
            | NIValue
            | Time
            | error {:System.out.println("Error en la declaración de VALUES"); :};

VALUESCONCAT ::= UPValue VALUESCONCAT
                | NIValue VALUESCONCAT
                | UPValue
                | NIValue
                | error {:System.out.println("Error en la declaración de VALUESCONCAT"); :};


NAMES ::= NIValue NAMES
            | NIValue
            | error {:System.out.println("Error en la declaración de NAMES"); :};