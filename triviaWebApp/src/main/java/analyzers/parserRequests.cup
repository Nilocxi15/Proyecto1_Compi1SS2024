/*--------------- 1ra Area: Codigo de Usuario -----------------------*/
//-------> importaciones Y paquetes
package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;

import models.TError;
import models.createUser;

//------> Codigo para el parser,variables, metodos, etc.
parser code
{:
    public static LinkedList<TError> TablaESS = new LinkedList<TError>();

    public boolean result = false;

    //Metodo al que se llama automaticamente ante algun error sintactico
public void syntax_error(Symbol s) {
    String lexema = s.value.toString();
    int fila = s.right;
    int columna = s.left;
    int tipo = s.sym;

    System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
    System.out.println("\t\tLexema: " + lexema);
    System.out.println("\t\tFila: " + fila);
    System.out.println("\t\tColumna: " + columna);
    System.out.println("\t\tTipo: " + tipo);

    // Sugerencia del token esperado
    String expectedToken = getExpectedToken(tipo);

    TError data = new TError(lexema, fila, columna, "Sintáctico", "Se esperaba el token '" + expectedToken + "'");
    TablaESS.add(data);
}

private String getExpectedToken(int tipo) {
    switch (tipo) {
        case Symbols_Requests.LessThan:
            return ">' o '}";
        case Symbols_Requests.GreaterThan:
            return "?' o '!";
        case Symbols_Requests.QuestionMark:
            return "<' o ' \" (comilla)";
        case Symbols_Requests.Equal:
            return "version";
        case Symbols_Requests.QuotationMark:
            return "Comillas";
        case Symbols_Requests.ExclamationMark:
            return "<' o la sentencia 'fin_solicitud_realizada";
        case Symbols_Requests.Colon:
            return "de instrucción' o 'nombre del campo";
        case Symbols_Requests.Comma:
            return "Comma";
        case Symbols_Requests.LeftBrace:
            return "LeftBrace";
        case Symbols_Requests.RightBrace:
            return "RightBrace";
        case Symbols_Requests.LeftBracket:
            return "LeftBracket";
        case Symbols_Requests.RightBracket:
            return "RightBracket";
        case Symbols_Requests.XSONsentence:
            return "XSONsentence";
        case Symbols_Requests.Version:
            return "Version";
        case Symbols_Requests.VersionNumber:
            return "VersionNumber";
        case Symbols_Requests.RealizarSolicitud:
            return "RealizarSolicitud";
        case Symbols_Requests.RealizarSolicitudes:
            return "RealizarSolicitudes";
        case Symbols_Requests.FinSolicitud:
            return "FinSolicitud";
        case Symbols_Requests.FinSolicitudes:
            return "FinSolicitudes";
        case Symbols_Requests.UsuarioNuevo:
            return "UsuarioNuevo";
        case Symbols_Requests.ModificarUsuario:
            return "ModificarUsuario";
        case Symbols_Requests.EliminarUsuario:
            return "EliminarUsuario";
        case Symbols_Requests.DatosUsuario:
            return "DatosUsuario";
        case Symbols_Requests.Usuario:
            return "Usuario";
        case Symbols_Requests.Password:
            return "Password";
        case Symbols_Requests.Nombre:
            return "Nombre";
        case Symbols_Requests.Institucion:
            return "Institucion";
        case Symbols_Requests.NIValue:
            return "NIValue";
        case Symbols_Requests.UPValue:
            return "UPValue";
        case Symbols_Requests.FechaCreacion:
            return "FechaCreacion";
        case Symbols_Requests.Date:
            return "Date";
        // Agrega más casos según los tokens que manejes
        default:
            return "token desconocido";
    }
}

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

    }
:}

//------> Codigo para las acciones gramaticales
action code
{:
    //Verificación de campos completos USUARIONUEVO
    int contUser = 0;
    int contPass = 0;
    int contName = 0;
    int contInst = 0;
    int contDate = 0;

    int contFields = 0;

    public void contFields(String field){
        switch(field){
            case "Usuario":
                contUser++;
                contFields++;
                break;
            case "Password":
                contPass++;
                contFields++;
                break;
            case "Nombre":
                contName++;
                contFields++;
                break;
            case "Institucion":
                contInst++;
                contFields++;
                break;
            case "FechaCreacion":
                contDate++;
                contFields++;
                break;
        }
    }

    public void cleanFields(){
        contUser = 0;
        contPass = 0;
        contName = 0;
        contInst = 0;
        contDate = 0;
    }

    public void checkFields(){
        int line = 0;
        int column = 0;

        result = true;

        if((contFields/contUser) != 5){
            result = false;
            System.out.println("Error: El campo Usuario no esta completo o esta duplicado");
            TError datos = new TError("Usuario", line, column, "Semántico", "Campo USUARIO faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contPass) != 5){
            result = false;
            System.out.println("Error: El campo Password no esta completo o esta duplicado");
            TError datos = new TError("Password", line, column, "Semántico", "Campo PASSWORD faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contName) != 5){
            result = false;
            System.out.println("Error: El campo Nombre no esta completo o esta duplicado");
            TError datos = new TError("Nombre", line, column, "Semántico", "Campo NOMBRE faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contInst) != 5){
            result = false;
            System.out.println("Error: El campo Institucion no esta completo o esta duplicado");
            TError datos = new TError("Institucion", line, column, "Semántico", "Campo INSTITUCION faltante o repetido");
            TablaESS.add(datos);
        }
        if((contFields/contDate) != 5){
            result = false;
            System.out.println("Error: El campo Fecha de Creacion esta repetido");
            TError datos = new TError("FechaCreacion", line, column, "Semántico", "Campo FECHA_CREACION duplicado");
            TablaESS.add(datos);
        }
    }

:}

/*--------------- 2da Area: Declaraciones -----------------------*/
//------> declaracion de terminales
terminal String LessThan, GreaterThan, QuestionMark, Equal, QuotationMark, ExclamationMark, Colon, Comma,
                LeftBrace, RightBrace, LeftBracket, RightBracket, XSONsentence, Version, VersionNumber,
                RealizarSolicitud, RealizarSolicitudes, FinSolicitud, FinSolicitudes, UsuarioNuevo,
                ModificarUsuario, EliminarUsuario, DatosUsuario, Usuario, Password, Nombre, Institucion,
                NIValue, UPValue, FechaCreacion, Date;

//------> declaracion de no terminales
nonterminal  INICIO, SINGLEREQUEST, USUARIONUEVO, MODIFICARUSUARIO, ELIMINARUSUARIO, NEWUSERLOOP, NEWUSERBLOCK,
                VALUES, NAMES;

start with INICIO;

/*--------------- 3ra Area: Reglas Gramaticales -----------------------*/
INICIO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan
            SINGLEREQUEST {:System.out.println("Sentencia correcta y aceptada");:}
            | error {:System.out.println("Error en la sentencia inicial");
            cleanFields();:};

SINGLEREQUEST ::= USUARIONUEVO
                | MODIFICARUSUARIO
                | ELIMINARUSUARIO;

USUARIONUEVO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark UsuarioNuevo QuotationMark GreaterThan
                    LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket
                    NEWUSERLOOP
                    RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                    {:cleanFields();:}
                | error USUARIONUEVO {:System.out.println("Error en la declaración de USUARIONUEVO"); :};

MODIFICARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan
                    LeftBrace LeftBracket RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                | error MODIFICARUSUARIO {:System.out.println("Error en la declaración de MODIFICARUSUARIO"); :};

ELIMINARUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarUsuario QuotationMark GreaterThan
                    LeftBrace LeftBracket RightBracket RightBrace
                    LessThan FinSolicitud ExclamationMark GreaterThan
                | error ELIMINARUSUARIO {:System.out.println("Error en la declaración de ELIMINARUSUARIO"); :};

NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace Comma NEWUSERLOOP
                {:System.out.println("Entra a NEWUSERLOOP");
                checkFields();
                System.out.println("Sale de NEWUSERLOOP");:}
                | LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace
                {:System.out.println("Entra a NEWUSERLOOP SINGLE");
                checkFields();
                System.out.println("Sale de NEWUSERLOOP SINGLE");:}
                | error {:System.out.println("Error en la declaración de NEWUSERLOOP"); :};

NEWUSERBLOCK ::= QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                {:contFields("Usuario");
                System.out.println("Entra en un valor ");:}
                | QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma
                 {:contFields("Password");
                 System.out.println("Entra en un valor ");:}
                | QuotationMark Nombre QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                {:contFields("Nombre");
                System.out.println("Entra en un valor ");:}
                | QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma
                {:contFields("Institucion");
                System.out.println("Entra en un valor ");:}
                | QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma
                {:contFields("FechaCreacion");
                System.out.println("Entra en un valor ");:}
                | error {:System.out.println("Error en la declaración de NEWUSERBLOCK");
                result = false;
                cleanFields();:};

VALUES ::= UPValue
            | NIValue
            | error {:System.out.println("Error en la declaración de VALUES"); :};

NAMES ::= NIValue NAMES
            | NIValue
            | error {:System.out.println("Error en la declaración de NAMES"); :};