// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class L_Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8,  9, 
    10, 11, 12, 13, 14, 14, 14, 14, 14, 14, 15,  0, 16, 17, 18, 19, 
     0, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 
    35, 29, 36, 37, 38, 39, 40, 41, 42, 29, 29, 43,  0, 44,  0, 45, 
     0, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 
    61, 55, 62, 63, 64, 65, 66, 67, 68, 55, 55, 69,  0, 70,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 55,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0, 55,  0,  0, 
     0, 55,  0, 55,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0, 
     0, 55,  0,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0, 55,  0,  0, 
     0, 55,  0, 55,  0,  0,  0,  0,  0,  0, 55,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\3\6\1\7"+
    "\1\10\1\11\1\12\1\13\16\14\1\15\1\16\15\6"+
    "\1\17\1\20\1\6\1\0\2\14\2\6\2\14\2\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\2\21\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\0\1\22\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\0\1\14\1\6\1\14\1\6"+
    "\1\14\2\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\2\23\1\0\1\14\1\6"+
    "\2\24\1\14\2\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\0\3\6\1\14"+
    "\2\6\1\14\1\6\2\25\1\14\1\6\1\14\1\6"+
    "\2\26\1\14\1\6\1\14\1\6\1\0\3\6\1\14"+
    "\2\6\1\14\1\6\1\14\1\6\1\14\1\6\2\27"+
    "\2\30\1\0\3\6\1\14\2\6\1\14\1\6\2\31"+
    "\1\14\1\6\1\0\3\6\1\14\2\6\1\14\1\6"+
    "\2\32\1\33\3\6\1\14\6\6\2\34\12\6\1\35"+
    "\2\6\1\36\2\6\1\37\5\6\1\40\1\6\1\41";

  private static int [] zzUnpackAction() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\107\0\107\0\216\0\107\0\107\0\107\0\325"+
    "\0\u011c\0\u0163\0\107\0\107\0\107\0\107\0\107\0\u01aa"+
    "\0\u01f1\0\u0238\0\u027f\0\u02c6\0\u030d\0\u0354\0\u039b\0\u03e2"+
    "\0\u0429\0\u0470\0\u04b7\0\u04fe\0\u0545\0\107\0\107\0\u058c"+
    "\0\u05d3\0\u061a\0\u0661\0\u06a8\0\u06ef\0\u0736\0\u077d\0\u07c4"+
    "\0\u080b\0\u0852\0\u0899\0\u08e0\0\107\0\107\0\u0927\0\u096e"+
    "\0\u09b5\0\u09fc\0\u0a43\0\u0a8a\0\u0ad1\0\u0b18\0\u0b5f\0\u0ba6"+
    "\0\u0bed\0\u0c34\0\u0c7b\0\u0cc2\0\u0d09\0\u0d50\0\u0d97\0\u0dde"+
    "\0\u01aa\0\u0163\0\u0e25\0\u0e6c\0\u0eb3\0\u0efa\0\u0f41\0\u0f88"+
    "\0\u0fcf\0\u1016\0\u105d\0\u10a4\0\u10eb\0\u1132\0\u1179\0\107"+
    "\0\u11c0\0\u1207\0\u124e\0\u1295\0\u12dc\0\u1323\0\u136a\0\u13b1"+
    "\0\u13f8\0\u143f\0\u1486\0\u14cd\0\u1514\0\u155b\0\u15a2\0\u15e9"+
    "\0\u1630\0\u1677\0\u16be\0\u1705\0\u174c\0\u1793\0\u17da\0\u1821"+
    "\0\u1868\0\u18af\0\u18f6\0\u193d\0\u1984\0\u19cb\0\u1a12\0\u1a59"+
    "\0\u1aa0\0\u1ae7\0\u1b2e\0\u1b75\0\u1bbc\0\u1c03\0\u1c4a\0\u1c91"+
    "\0\u1cd8\0\u1d1f\0\u1d66\0\u1dad\0\u1df4\0\u1e3b\0\u1e82\0\u1ec9"+
    "\0\u1f10\0\u1f57\0\u1f9e\0\u1fe5\0\u202c\0\u2073\0\u01aa\0\u0163"+
    "\0\u20ba\0\u2101\0\u2148\0\u01aa\0\u0163\0\u218f\0\u21d6\0\u221d"+
    "\0\u2264\0\u22ab\0\u22f2\0\u2339\0\u2380\0\u23c7\0\u240e\0\u2455"+
    "\0\u249c\0\u24e3\0\u252a\0\u2571\0\u25b8\0\u25ff\0\u2646\0\u268d"+
    "\0\u26d4\0\u271b\0\u2762\0\u27a9\0\u27f0\0\u2837\0\u287e\0\u28c5"+
    "\0\u290c\0\u2953\0\u299a\0\u01aa\0\u0163\0\u29e1\0\u2a28\0\u2a6f"+
    "\0\u2ab6\0\u01aa\0\u0163\0\u2afd\0\u2b44\0\u2b8b\0\u2bd2\0\u2c19"+
    "\0\u2c60\0\u2ca7\0\u2cee\0\u2d35\0\u2d7c\0\u2dc3\0\u2e0a\0\u2e51"+
    "\0\u2e98\0\u2edf\0\u2f26\0\u2f6d\0\u01aa\0\u0163\0\u01aa\0\u0163"+
    "\0\u2fb4\0\u2ffb\0\u3042\0\u3089\0\u30d0\0\u3117\0\u315e\0\u31a5"+
    "\0\u31ec\0\u01aa\0\u0163\0\u3233\0\u327a\0\u32c1\0\u3308\0\u334f"+
    "\0\u3396\0\u33dd\0\u3424\0\u346b\0\u34b2\0\u34f9\0\u01aa\0\u0163"+
    "\0\107\0\u3540\0\u3587\0\u35ce\0\u3615\0\u365c\0\u36a3\0\u36ea"+
    "\0\u3731\0\u3778\0\u37bf\0\u01aa\0\u0163\0\u3806\0\u384d\0\u3894"+
    "\0\u38db\0\u3922\0\u3969\0\u39b0\0\u39f7\0\u3a3e\0\u3a85\0\u0163"+
    "\0\u3acc\0\u3b13\0\u0163\0\u3b5a\0\u3ba1\0\u0163\0\u3be8\0\u3c2f"+
    "\0\u3c76\0\u3cbd\0\u3d04\0\u0163\0\u3d4b\0\u0163";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\2\10\1\12\1\13\1\14\1\15\1\16"+
    "\1\17\4\20\1\21\1\22\2\20\1\23\2\20\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\32\1\20\1\33"+
    "\1\34\1\20\1\35\1\36\1\37\5\12\1\40\1\41"+
    "\2\12\1\42\2\12\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\51\1\12\1\52\1\53\1\12\1\54\1\55"+
    "\1\56\111\0\1\3\116\0\5\57\5\0\27\12\2\0"+
    "\30\12\12\0\1\60\1\0\5\57\5\0\27\12\2\0"+
    "\30\12\14\0\5\12\5\0\27\12\2\0\30\12\14\0"+
    "\5\12\5\0\27\20\2\0\30\12\14\0\5\12\5\0"+
    "\15\20\1\61\2\20\1\62\6\20\2\0\16\12\1\63"+
    "\2\12\1\64\6\12\14\0\5\12\5\0\4\20\1\65"+
    "\3\20\1\66\16\20\2\0\5\12\1\67\3\12\1\70"+
    "\16\12\14\0\5\12\5\0\15\20\1\71\11\20\2\0"+
    "\16\12\1\72\11\12\14\0\5\12\5\0\16\20\1\73"+
    "\10\20\2\0\17\12\1\74\10\12\14\0\5\12\5\0"+
    "\16\20\1\75\10\20\2\0\17\12\1\76\10\12\14\0"+
    "\5\12\5\0\16\20\1\77\10\20\2\0\17\12\1\100"+
    "\10\12\14\0\5\12\5\0\12\20\1\101\14\20\2\0"+
    "\13\12\1\102\14\12\14\0\5\12\5\0\1\103\26\20"+
    "\2\0\1\12\1\104\26\12\14\0\5\12\5\0\4\20"+
    "\1\105\22\20\2\0\5\12\1\106\22\12\14\0\5\12"+
    "\5\0\22\20\1\107\4\20\2\0\23\12\1\110\4\12"+
    "\14\0\5\12\5\0\21\20\1\111\5\20\2\0\22\12"+
    "\1\112\5\12\14\0\5\12\5\0\4\20\1\113\22\20"+
    "\2\0\5\12\1\114\22\12\14\0\5\12\5\0\21\20"+
    "\1\115\5\20\2\0\22\12\1\116\5\12\14\0\5\12"+
    "\5\0\15\12\1\63\2\12\1\64\6\12\2\0\16\12"+
    "\1\63\2\12\1\64\6\12\14\0\5\12\5\0\4\12"+
    "\1\67\3\12\1\70\16\12\2\0\5\12\1\67\3\12"+
    "\1\70\16\12\14\0\5\12\5\0\15\12\1\72\11\12"+
    "\2\0\16\12\1\72\11\12\14\0\5\12\5\0\16\12"+
    "\1\74\10\12\2\0\17\12\1\74\10\12\14\0\5\12"+
    "\5\0\16\12\1\76\10\12\2\0\17\12\1\76\10\12"+
    "\14\0\5\12\5\0\16\12\1\100\10\12\2\0\17\12"+
    "\1\100\10\12\14\0\5\12\5\0\12\12\1\102\14\12"+
    "\2\0\13\12\1\102\14\12\14\0\5\12\5\0\1\104"+
    "\26\12\2\0\1\12\1\104\26\12\14\0\5\12\5\0"+
    "\4\12\1\106\22\12\2\0\5\12\1\106\22\12\14\0"+
    "\5\12\5\0\22\12\1\110\4\12\2\0\23\12\1\110"+
    "\4\12\14\0\5\12\5\0\21\12\1\112\5\12\2\0"+
    "\22\12\1\112\5\12\14\0\5\12\5\0\4\12\1\114"+
    "\22\12\2\0\5\12\1\114\22\12\14\0\5\12\5\0"+
    "\21\12\1\116\5\12\2\0\22\12\1\116\5\12\13\0"+
    "\1\117\5\12\5\0\27\12\2\0\30\12\14\0\1\120"+
    "\106\0\5\12\5\0\24\20\1\121\2\20\2\0\25\12"+
    "\1\122\2\12\14\0\5\12\5\0\20\20\1\123\6\20"+
    "\2\0\21\12\1\124\6\12\14\0\5\12\5\0\24\12"+
    "\1\122\2\12\2\0\25\12\1\122\2\12\14\0\5\12"+
    "\5\0\20\12\1\124\6\12\2\0\21\12\1\124\6\12"+
    "\14\0\5\12\5\0\2\20\1\125\24\20\2\0\3\12"+
    "\1\126\24\12\14\0\5\12\5\0\15\20\1\127\11\20"+
    "\2\0\16\12\1\130\11\12\14\0\5\12\5\0\2\12"+
    "\1\126\24\12\2\0\3\12\1\126\24\12\14\0\5\12"+
    "\5\0\15\12\1\130\11\12\2\0\16\12\1\130\11\12"+
    "\14\0\5\12\5\0\21\20\1\131\5\20\2\0\22\12"+
    "\1\132\5\12\14\0\5\12\5\0\21\12\1\132\5\12"+
    "\2\0\22\12\1\132\5\12\14\0\5\12\5\0\6\20"+
    "\1\133\20\20\2\0\7\12\1\134\20\12\14\0\5\12"+
    "\5\0\6\12\1\134\20\12\2\0\7\12\1\134\20\12"+
    "\14\0\5\12\5\0\3\20\1\135\23\20\2\0\4\12"+
    "\1\136\23\12\14\0\5\12\5\0\3\12\1\136\23\12"+
    "\2\0\4\12\1\136\23\12\14\0\5\12\5\0\14\20"+
    "\1\137\12\20\2\0\15\12\1\140\12\12\14\0\5\12"+
    "\5\0\14\12\1\140\12\12\2\0\15\12\1\140\12\12"+
    "\14\0\5\12\5\0\21\20\1\141\5\20\2\0\22\12"+
    "\1\142\5\12\14\0\5\12\5\0\21\12\1\142\5\12"+
    "\2\0\22\12\1\142\5\12\14\0\5\12\5\0\21\20"+
    "\1\143\5\20\2\0\22\12\1\144\5\12\14\0\5\12"+
    "\5\0\21\12\1\144\5\12\2\0\22\12\1\144\5\12"+
    "\14\0\5\12\5\0\1\145\26\20\2\0\1\12\1\146"+
    "\26\12\14\0\5\12\5\0\1\146\26\12\2\0\1\12"+
    "\1\146\26\12\14\0\5\12\5\0\23\20\1\147\3\20"+
    "\2\0\24\12\1\150\3\12\14\0\5\12\5\0\23\12"+
    "\1\150\3\12\2\0\24\12\1\150\3\12\14\0\5\12"+
    "\5\0\20\20\1\151\6\20\2\0\21\12\1\152\6\12"+
    "\14\0\5\12\5\0\20\12\1\152\6\12\2\0\21\12"+
    "\1\152\6\12\14\0\5\12\5\0\16\20\1\153\10\20"+
    "\2\0\17\12\1\154\10\12\14\0\5\12\5\0\16\12"+
    "\1\154\10\12\2\0\17\12\1\154\10\12\14\0\2\155"+
    "\105\0\5\12\5\0\10\20\1\156\16\20\2\0\11\12"+
    "\1\157\16\12\14\0\5\12\5\0\10\12\1\157\16\12"+
    "\2\0\11\12\1\157\16\12\14\0\5\12\5\0\16\20"+
    "\1\160\10\20\2\0\17\12\1\161\10\12\14\0\5\12"+
    "\5\0\16\12\1\161\10\12\2\0\17\12\1\161\10\12"+
    "\14\0\5\12\5\0\7\20\1\162\17\20\2\0\10\12"+
    "\1\163\17\12\14\0\5\12\5\0\7\12\1\163\17\12"+
    "\2\0\10\12\1\163\17\12\14\0\5\12\5\0\27\20"+
    "\2\0\1\164\27\12\14\0\5\12\5\0\27\12\2\0"+
    "\1\164\27\12\14\0\5\12\5\0\22\20\1\165\4\20"+
    "\2\0\23\12\1\166\4\12\14\0\5\12\5\0\22\12"+
    "\1\166\4\12\2\0\23\12\1\166\4\12\14\0\5\12"+
    "\5\0\10\20\1\167\16\20\2\0\11\12\1\170\16\12"+
    "\14\0\5\12\5\0\10\12\1\170\16\12\2\0\11\12"+
    "\1\170\16\12\14\0\5\12\5\0\10\20\1\171\16\20"+
    "\2\0\11\12\1\172\16\12\14\0\5\12\5\0\10\12"+
    "\1\172\16\12\2\0\11\12\1\172\16\12\14\0\5\12"+
    "\5\0\1\20\1\173\25\20\2\0\2\12\1\174\25\12"+
    "\14\0\5\12\5\0\1\12\1\174\25\12\2\0\2\12"+
    "\1\174\25\12\14\0\5\12\5\0\21\20\1\175\5\20"+
    "\2\0\22\12\1\176\5\12\14\0\5\12\5\0\21\12"+
    "\1\176\5\12\2\0\22\12\1\176\5\12\14\0\5\12"+
    "\5\0\17\20\1\177\7\20\2\0\20\12\1\200\7\12"+
    "\14\0\5\12\5\0\17\12\1\200\7\12\2\0\20\12"+
    "\1\200\7\12\14\0\5\12\5\0\22\20\1\201\4\20"+
    "\2\0\23\12\1\202\4\12\14\0\5\12\5\0\22\12"+
    "\1\202\4\12\2\0\23\12\1\202\4\12\14\0\5\12"+
    "\5\0\1\203\26\20\2\0\1\12\1\204\26\12\14\0"+
    "\5\12\5\0\1\204\26\12\2\0\1\12\1\204\26\12"+
    "\14\0\5\12\5\0\21\20\1\205\5\20\2\0\22\12"+
    "\1\206\5\12\14\0\5\12\5\0\21\12\1\206\5\12"+
    "\2\0\22\12\1\206\5\12\14\0\5\12\5\0\15\20"+
    "\1\207\11\20\2\0\16\12\1\210\11\12\14\0\5\12"+
    "\5\0\15\12\1\210\11\12\2\0\16\12\1\210\11\12"+
    "\14\0\5\211\102\0\5\12\5\0\16\20\1\212\10\20"+
    "\2\0\17\12\1\213\10\12\14\0\5\12\5\0\16\12"+
    "\1\213\10\12\2\0\17\12\1\213\10\12\14\0\5\12"+
    "\5\0\20\20\1\214\6\20\2\0\21\12\1\215\6\12"+
    "\14\0\5\12\5\0\20\12\1\215\6\12\2\0\21\12"+
    "\1\215\6\12\14\0\5\12\5\0\1\216\26\20\2\0"+
    "\1\12\1\217\26\12\14\0\5\12\5\0\1\217\26\12"+
    "\2\0\1\12\1\217\26\12\14\0\5\12\5\0\4\12"+
    "\1\220\22\12\2\0\5\12\1\220\22\12\14\0\5\12"+
    "\5\0\10\20\1\221\16\20\2\0\11\12\1\222\16\12"+
    "\14\0\5\12\5\0\10\12\1\222\16\12\2\0\11\12"+
    "\1\222\16\12\14\0\5\12\5\0\15\20\1\223\11\20"+
    "\2\0\16\12\1\224\11\12\14\0\5\12\5\0\15\12"+
    "\1\224\11\12\2\0\16\12\1\224\11\12\14\0\5\12"+
    "\5\0\5\20\1\225\21\20\2\0\6\12\1\226\21\12"+
    "\14\0\5\12\5\0\5\12\1\226\21\12\2\0\6\12"+
    "\1\226\21\12\14\0\5\12\5\0\20\20\1\227\6\20"+
    "\2\0\21\12\1\230\6\12\14\0\5\12\5\0\20\12"+
    "\1\230\6\12\2\0\21\12\1\230\6\12\14\0\5\12"+
    "\5\0\25\20\1\231\1\20\2\0\26\12\1\232\1\12"+
    "\14\0\5\12\5\0\25\12\1\232\1\12\2\0\26\12"+
    "\1\232\1\12\14\0\5\12\5\0\23\20\1\233\3\20"+
    "\2\0\24\12\1\234\3\12\14\0\5\12\5\0\23\12"+
    "\1\234\3\12\2\0\24\12\1\234\3\12\14\0\5\12"+
    "\5\0\23\20\1\235\3\20\2\0\24\12\1\236\3\12"+
    "\14\0\5\12\5\0\23\12\1\236\3\12\2\0\24\12"+
    "\1\236\3\12\14\0\5\12\5\0\20\20\1\237\6\20"+
    "\2\0\21\12\1\240\6\12\14\0\5\12\5\0\20\12"+
    "\1\240\6\12\2\0\21\12\1\240\6\12\14\0\5\12"+
    "\5\0\10\20\1\241\16\20\2\0\11\12\1\242\16\12"+
    "\14\0\5\12\5\0\10\12\1\242\16\12\2\0\11\12"+
    "\1\242\16\12\13\0\1\243\107\0\5\12\5\0\27\20"+
    "\2\0\1\244\27\12\14\0\5\12\5\0\27\12\2\0"+
    "\1\244\27\12\14\0\5\12\5\0\27\20\2\0\1\245"+
    "\27\12\14\0\5\12\5\0\27\12\2\0\1\245\27\12"+
    "\14\0\5\12\5\0\15\12\1\246\11\12\2\0\16\12"+
    "\1\246\11\12\14\0\5\12\5\0\22\20\1\247\4\20"+
    "\2\0\23\12\1\250\4\12\14\0\5\12\5\0\22\12"+
    "\1\250\4\12\2\0\23\12\1\250\4\12\14\0\5\12"+
    "\5\0\27\20\2\0\1\251\27\12\14\0\5\12\5\0"+
    "\27\12\2\0\1\251\27\12\14\0\5\12\5\0\10\20"+
    "\1\252\16\20\2\0\11\12\1\253\16\12\14\0\5\12"+
    "\5\0\10\12\1\253\16\12\2\0\11\12\1\253\16\12"+
    "\14\0\5\12\5\0\4\20\1\254\22\20\2\0\5\12"+
    "\1\255\22\12\14\0\5\12\5\0\4\12\1\255\22\12"+
    "\2\0\5\12\1\255\22\12\14\0\5\12\5\0\16\20"+
    "\1\256\10\20\2\0\17\12\1\257\10\12\14\0\5\12"+
    "\5\0\16\12\1\257\10\12\2\0\17\12\1\257\10\12"+
    "\14\0\5\12\5\0\4\20\1\260\22\20\2\0\5\12"+
    "\1\261\22\12\14\0\5\12\5\0\4\12\1\261\22\12"+
    "\2\0\5\12\1\261\22\12\14\0\5\12\5\0\21\20"+
    "\1\262\5\20\2\0\22\12\1\263\5\12\14\0\5\12"+
    "\5\0\21\12\1\263\5\12\2\0\22\12\1\263\5\12"+
    "\14\0\5\12\5\0\10\20\1\264\16\20\2\0\11\12"+
    "\1\265\16\12\14\0\5\12\5\0\10\12\1\265\16\12"+
    "\2\0\11\12\1\265\16\12\14\0\5\12\5\0\16\20"+
    "\1\266\10\20\2\0\17\12\1\267\10\12\14\0\5\12"+
    "\5\0\16\12\1\267\10\12\2\0\17\12\1\267\10\12"+
    "\15\0\2\270\104\0\5\12\5\0\20\12\1\271\6\12"+
    "\2\0\21\12\1\271\6\12\14\0\5\12\5\0\2\12"+
    "\1\272\24\12\2\0\3\12\1\272\24\12\14\0\5\12"+
    "\5\0\24\12\1\273\2\12\2\0\25\12\1\273\2\12"+
    "\14\0\5\12\5\0\23\20\1\274\3\20\2\0\24\12"+
    "\1\275\3\12\14\0\5\12\5\0\23\12\1\275\3\12"+
    "\2\0\24\12\1\275\3\12\14\0\5\12\5\0\23\12"+
    "\1\276\3\12\2\0\24\12\1\276\3\12\14\0\5\12"+
    "\5\0\2\20\1\277\24\20\2\0\3\12\1\300\24\12"+
    "\14\0\5\12\5\0\2\12\1\300\24\12\2\0\3\12"+
    "\1\300\24\12\14\0\5\12\5\0\20\20\1\301\6\20"+
    "\2\0\21\12\1\302\6\12\14\0\5\12\5\0\20\12"+
    "\1\302\6\12\2\0\21\12\1\302\6\12\14\0\5\12"+
    "\5\0\21\20\1\303\5\20\2\0\22\12\1\304\5\12"+
    "\14\0\5\12\5\0\21\12\1\304\5\12\2\0\22\12"+
    "\1\304\5\12\14\0\5\12\5\0\16\20\1\305\10\20"+
    "\2\0\17\12\1\306\10\12\14\0\5\12\5\0\16\12"+
    "\1\306\10\12\2\0\17\12\1\306\10\12\14\0\5\12"+
    "\5\0\15\20\1\307\11\20\2\0\16\12\1\310\11\12"+
    "\14\0\5\12\5\0\15\12\1\310\11\12\2\0\16\12"+
    "\1\310\11\12\14\0\5\311\102\0\5\12\5\0\4\12"+
    "\1\312\22\12\2\0\5\12\1\312\22\12\14\0\5\12"+
    "\5\0\20\12\1\313\6\12\2\0\21\12\1\313\6\12"+
    "\14\0\5\12\5\0\10\12\1\314\16\12\2\0\11\12"+
    "\1\314\16\12\14\0\5\12\5\0\2\20\1\315\24\20"+
    "\2\0\3\12\1\316\24\12\14\0\5\12\5\0\2\12"+
    "\1\316\24\12\2\0\3\12\1\316\24\12\14\0\5\12"+
    "\5\0\21\12\1\317\5\12\2\0\22\12\1\317\5\12"+
    "\14\0\5\12\5\0\1\320\26\20\2\0\1\12\1\321"+
    "\26\12\14\0\5\12\5\0\1\321\26\12\2\0\1\12"+
    "\1\321\26\12\14\0\5\12\5\0\3\20\1\322\23\20"+
    "\2\0\4\12\1\323\23\12\14\0\5\12\5\0\3\12"+
    "\1\323\23\12\2\0\4\12\1\323\23\12\14\0\5\12"+
    "\5\0\22\20\1\324\4\20\2\0\23\12\1\325\4\12"+
    "\14\0\5\12\5\0\22\12\1\325\4\12\2\0\23\12"+
    "\1\325\4\12\14\0\5\326\102\0\5\12\5\0\21\12"+
    "\1\327\5\12\2\0\22\12\1\327\5\12\14\0\5\12"+
    "\5\0\4\12\1\330\22\12\2\0\5\12\1\330\22\12"+
    "\14\0\5\12\5\0\16\12\1\331\10\12\2\0\17\12"+
    "\1\331\10\12\14\0\5\12\5\0\10\20\1\332\16\20"+
    "\2\0\11\12\1\333\16\12\14\0\5\12\5\0\10\12"+
    "\1\333\16\12\2\0\11\12\1\333\16\12\14\0\5\12"+
    "\5\0\23\12\1\334\3\12\2\0\24\12\1\334\3\12"+
    "\14\0\5\12\5\0\20\20\1\335\6\20\2\0\21\12"+
    "\1\336\6\12\14\0\5\12\5\0\20\12\1\336\6\12"+
    "\2\0\21\12\1\336\6\12\14\0\5\12\5\0\1\337"+
    "\26\20\2\0\1\12\1\340\26\12\14\0\5\12\5\0"+
    "\1\340\26\12\2\0\1\12\1\340\26\12\14\0\5\341"+
    "\102\0\5\12\5\0\17\12\1\342\7\12\2\0\20\12"+
    "\1\342\7\12\14\0\5\12\5\0\1\343\26\12\2\0"+
    "\1\12\1\343\26\12\14\0\5\12\5\0\27\12\2\0"+
    "\1\344\27\12\14\0\5\12\5\0\16\20\1\345\10\20"+
    "\2\0\17\12\1\346\10\12\14\0\5\12\5\0\16\12"+
    "\1\346\10\12\2\0\17\12\1\346\10\12\14\0\5\12"+
    "\5\0\1\347\26\12\2\0\1\12\1\347\26\12\14\0"+
    "\5\12\5\0\27\20\2\0\1\350\27\12\14\0\5\12"+
    "\5\0\27\12\2\0\1\350\27\12\14\0\5\12\5\0"+
    "\23\12\1\351\3\12\2\0\24\12\1\351\3\12\14\0"+
    "\5\12\5\0\2\12\1\352\24\12\2\0\3\12\1\352"+
    "\24\12\14\0\5\12\5\0\20\12\1\353\6\12\2\0"+
    "\21\12\1\353\6\12\14\0\5\12\5\0\15\20\1\354"+
    "\11\20\2\0\16\12\1\355\11\12\14\0\5\12\5\0"+
    "\15\12\1\355\11\12\2\0\16\12\1\355\11\12\14\0"+
    "\5\12\5\0\20\12\1\356\6\12\2\0\21\12\1\356"+
    "\6\12\14\0\5\12\5\0\23\12\1\357\3\12\2\0"+
    "\24\12\1\357\3\12\14\0\5\12\5\0\4\12\1\360"+
    "\22\12\2\0\5\12\1\360\22\12\14\0\5\12\5\0"+
    "\10\12\1\361\16\12\2\0\11\12\1\361\16\12\14\0"+
    "\5\12\5\0\4\12\1\362\22\12\2\0\5\12\1\362"+
    "\22\12\14\0\5\12\5\0\10\12\1\363\16\12\2\0"+
    "\11\12\1\363\16\12\14\0\5\12\5\0\21\12\1\364"+
    "\5\12\2\0\22\12\1\364\5\12\14\0\5\12\5\0"+
    "\21\12\1\365\5\12\2\0\22\12\1\365\5\12\14\0"+
    "\5\12\5\0\16\12\1\366\10\12\2\0\17\12\1\366"+
    "\10\12\14\0\5\12\5\0\21\12\1\367\5\12\2\0"+
    "\22\12\1\367\5\12\14\0\5\12\5\0\16\12\1\370"+
    "\10\12\2\0\17\12\1\370\10\12\14\0\5\12\5\0"+
    "\23\12\1\371\3\12\2\0\24\12\1\371\3\12\14\0"+
    "\5\12\5\0\22\12\1\372\4\12\2\0\23\12\1\372"+
    "\4\12\14\0\5\12\5\0\15\12\1\373\11\12\2\0"+
    "\16\12\1\373\11\12\14\0\5\12\5\0\17\12\1\374"+
    "\7\12\2\0\20\12\1\374\7\12\14\0\5\12\5\0"+
    "\1\375\26\12\2\0\1\12\1\375\26\12\14\0\5\12"+
    "\5\0\1\376\26\12\2\0\1\12\1\376\26\12\14\0"+
    "\5\12\5\0\23\12\1\377\3\12\2\0\24\12\1\377"+
    "\3\12\14\0\5\12\5\0\20\12\1\u0100\6\12\2\0"+
    "\21\12\1\u0100\6\12\14\0\5\12\5\0\4\12\1\u0101"+
    "\22\12\2\0\5\12\1\u0101\22\12\14\0\5\12\5\0"+
    "\10\12\1\u0102\16\12\2\0\11\12\1\u0102\16\12\14\0"+
    "\5\12\5\0\21\12\1\u0103\5\12\2\0\22\12\1\u0103"+
    "\5\12\14\0\5\12\5\0\16\12\1\u0104\10\12\2\0"+
    "\17\12\1\u0104\10\12\14\0\5\12\5\0\22\12\1\u0105"+
    "\4\12\2\0\23\12\1\u0105\4\12\14\0\5\12\5\0"+
    "\1\u0106\26\12\2\0\1\12\1\u0106\26\12\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[15762];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\3\1\5\11\16\1\2\11"+
    "\15\1\2\11\1\1\1\0\36\1\1\0\1\11\34\1"+
    "\1\0\33\1\1\0\31\1\1\0\24\1\1\0\20\1"+
    "\1\0\14\1\1\0\12\1\1\11\45\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[262];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public L_Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: Caracter no valido: " + yytext());
            }
          // fall through
          case 34: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 35: break;
          case 3:
            { System.out.println("Reconocio "+yytext()+" exclamacion"); return new Symbol(Symbols.ExclamationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 36: break;
          case 4:
            { System.out.println("Reconocio "+yytext()+" comillas"); return new Symbol(Symbols.QuotationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 37: break;
          case 5:
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Symbols.Comma, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 38: break;
          case 6:
            { System.out.println("Reconocio "+yytext()+" valores"); return new Symbol(Symbols.Values, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 39: break;
          case 7:
            { System.out.println("Reconocio "+yytext()+" dos puntos"); return new Symbol(Symbols.Colon, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 40: break;
          case 8:
            { System.out.println("Reconocio "+yytext()+" menor que"); return new Symbol(Symbols.LessThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 41: break;
          case 9:
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Symbols.Equal, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 42: break;
          case 10:
            { System.out.println("Reconocio "+yytext()+" mayor que"); return new Symbol(Symbols.GreaterThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 43: break;
          case 11:
            { System.out.println("Reconocio "+yytext()+" interrogacion"); return new Symbol(Symbols.QuestionMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 44: break;
          case 12:
            { System.out.println("Reconocio "+yytext()+" nombre"); return new Symbol(Symbols.Name, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 45: break;
          case 13:
            { System.out.println("Reconocio "+yytext()+" corchete izquierdo"); return new Symbol(Symbols.LeftBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 46: break;
          case 14:
            { System.out.println("Reconocio "+yytext()+" corchete derecho"); return new Symbol(Symbols.RightBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 47: break;
          case 15:
            { System.out.println("Reconocio "+yytext()+" llave izquierda"); return new Symbol(Symbols.LeftBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 48: break;
          case 16:
            { System.out.println("Reconocio "+yytext()+" llave derecha"); return new Symbol(Symbols.RightBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 49: break;
          case 17:
            { System.out.println("Reconocio "+yytext()+" ok"); return new Symbol(Symbols.Ok, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 50: break;
          case 18:
            { System.out.println("Reconocio "+yytext()+" numero de version"); return new Symbol(Symbols.VersionNumber, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 51: break;
          case 19:
            { System.out.println("Reconocio "+yytext()+" xson"); return new Symbol(Symbols.XSONsentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 52: break;
          case 20:
            { System.out.println("Reconocio "+yytext()+" error"); return new Symbol(Symbols.Error, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 53: break;
          case 21:
            { System.out.println("Reconocio "+yytext()+" sentencia nombre"); return new Symbol(Symbols.NameSentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 54: break;
          case 22:
            { System.out.println("Reconocio "+yytext()+" status"); return new Symbol(Symbols.Status, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 55: break;
          case 23:
            { System.out.println("Reconocio "+yytext()+" usuario"); return new Symbol(Symbols.Usuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 56: break;
          case 24:
            { System.out.println("Reconocio "+yytext()+" version"); return new Symbol(Symbols.Version, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 57: break;
          case 25:
            { System.out.println("Reconocio "+yytext()+" password"); return new Symbol(Symbols.Password, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 58: break;
          case 26:
            { System.out.println("Reconocio "+yytext()+" respuesta"); return new Symbol(Symbols.Respuesta, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 59: break;
          case 27:
            { System.out.println("Reconocio "+yytext()+" fecha"); return new Symbol(Symbols.Date, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 60: break;
          case 28:
            { System.out.println("Reconocio "+yytext()+" institucion"); return new Symbol(Symbols.Institution, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 61: break;
          case 29:
            { System.out.println("Reconocio "+yytext()+" login usuario"); return new Symbol(Symbols.LoginUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 62: break;
          case 30:
            { System.out.println("Reconocio "+yytext()+" fecha de creacion"); return new Symbol(Symbols.FechaCreacion, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 63: break;
          case 31:
            { System.out.println("Reconocio "+yytext()+" realizar solicitud"); return new Symbol(Symbols.RealizarSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 64: break;
          case 32:
            { System.out.println("Reconocio "+yytext()+" modificar usuario"); return new Symbol(Symbols.ModificarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 65: break;
          case 33:
            { System.out.println("Reconocio "+yytext()+" fin solicitud finalizada"); return new Symbol(Symbols.FinSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 66: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
