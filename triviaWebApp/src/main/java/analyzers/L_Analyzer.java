// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class L_Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8,  0, 
     9, 10,  0,  0,  0,  0,  0,  0,  0,  0, 11,  0, 12, 13, 14, 15, 
     0, 16, 17, 17, 17, 18, 19, 20, 17, 21, 17, 22, 23, 17, 24, 25, 
    26, 17, 27, 28, 29, 30, 31, 17, 32, 17, 17, 33,  0, 34,  0, 35, 
     0, 36,  0,  0,  0, 37, 38, 39,  0, 40,  0, 41, 42,  0, 43, 44, 
    45,  0, 46, 47, 48, 49, 50,  0, 51,  0,  0, 52,  0, 53,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\1\7\1\10\1\11\1\12\12\13\1\14\1\15\11\1"+
    "\1\16\1\17\1\0\2\13\2\0\1\13\1\0\1\13"+
    "\1\0\2\20\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\1\0\1\21\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\2\0\1\13\1\0\1\13\1\0\1\13"+
    "\1\0\1\13\1\0\1\13\1\0\2\22\1\13\1\0"+
    "\2\23\1\0\1\13\1\0\1\13\1\0\1\13\1\0"+
    "\1\13\1\0\1\13\4\0\1\13\1\0\2\24\1\13"+
    "\1\0\1\13\4\0\1\13\1\0\2\25\2\26\3\0"+
    "\1\13\4\0\2\27\13\0\1\30\2\0\1\31\4\0"+
    "\1\32";

  private static int [] zzUnpackAction() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\66\0\66\0\154\0\66\0\66\0\66\0\242"+
    "\0\66\0\66\0\66\0\66\0\66\0\330\0\u010e\0\u0144"+
    "\0\u017a\0\u01b0\0\u01e6\0\u021c\0\u0252\0\u0288\0\u02be\0\66"+
    "\0\66\0\u02f4\0\u032a\0\u0360\0\u0396\0\u03cc\0\u0402\0\u0438"+
    "\0\u046e\0\u04a4\0\66\0\66\0\u04da\0\u0510\0\u0546\0\u057c"+
    "\0\u05b2\0\u05e8\0\u061e\0\u0654\0\u068a\0\330\0\66\0\u06c0"+
    "\0\u06f6\0\u072c\0\u0762\0\u0798\0\u07ce\0\u0804\0\u083a\0\u0870"+
    "\0\u08a6\0\66\0\u08dc\0\u0912\0\u0948\0\u097e\0\u09b4\0\u09ea"+
    "\0\u0a20\0\u0a56\0\u0a8c\0\u0ac2\0\u0af8\0\u0b2e\0\u0b64\0\u0b9a"+
    "\0\u0bd0\0\u0c06\0\u0c3c\0\u0c72\0\u0ca8\0\u0cde\0\u0d14\0\u0d4a"+
    "\0\u0d80\0\u0db6\0\u0dec\0\u0e22\0\u0e58\0\u0e8e\0\u0ec4\0\u0efa"+
    "\0\u0f30\0\u0f66\0\u0f9c\0\330\0\66\0\u0fd2\0\u1008\0\330"+
    "\0\66\0\u103e\0\u1074\0\u10aa\0\u10e0\0\u1116\0\u114c\0\u1182"+
    "\0\u11b8\0\u11ee\0\u1224\0\u125a\0\u1290\0\u12c6\0\u12fc\0\u1332"+
    "\0\u1368\0\330\0\66\0\u139e\0\u13d4\0\u140a\0\u1440\0\u1476"+
    "\0\u14ac\0\u14e2\0\u1518\0\u154e\0\330\0\66\0\330\0\66"+
    "\0\u1584\0\u15ba\0\u15f0\0\u1626\0\u165c\0\u1692\0\u16c8\0\u16fe"+
    "\0\330\0\66\0\u1734\0\u176a\0\u17a0\0\u17d6\0\u180c\0\u1842"+
    "\0\u1878\0\u18ae\0\u18e4\0\u191a\0\u1950\0\66\0\u1986\0\u19bc"+
    "\0\66\0\u19f2\0\u1a28\0\u1a5e\0\u1a94\0\66";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\2\2"+
    "\1\10\1\11\1\12\1\13\1\14\1\15\2\16\1\17"+
    "\1\20\3\16\1\21\1\16\1\22\1\16\1\23\1\24"+
    "\1\16\1\25\1\26\1\27\1\30\1\31\2\2\1\32"+
    "\1\33\3\2\1\34\1\2\1\35\1\2\1\36\1\37"+
    "\1\2\1\40\1\41\1\42\1\43\1\44\70\0\1\3"+
    "\73\0\1\45\75\0\21\16\45\0\10\16\1\46\2\16"+
    "\1\47\5\16\12\0\1\50\2\0\1\51\27\0\5\16"+
    "\1\52\13\16\7\0\1\53\35\0\11\16\1\54\7\16"+
    "\13\0\1\55\31\0\6\16\1\56\12\16\10\0\1\57"+
    "\34\0\2\16\1\60\16\16\4\0\1\61\40\0\15\16"+
    "\1\62\3\16\17\0\1\63\25\0\14\16\1\64\4\16"+
    "\16\0\1\65\26\0\2\16\1\66\16\16\4\0\1\67"+
    "\40\0\14\16\1\70\4\16\16\0\1\71\36\0\1\50"+
    "\2\0\1\51\17\0\1\50\2\0\1\51\34\0\1\53"+
    "\22\0\1\53\46\0\1\55\22\0\1\55\37\0\1\57"+
    "\22\0\1\57\36\0\1\61\22\0\1\61\55\0\1\63"+
    "\22\0\1\63\41\0\1\65\22\0\1\65\30\0\1\67"+
    "\22\0\1\67\54\0\1\71\22\0\1\71\17\0\1\72"+
    "\74\0\17\16\1\73\1\16\21\0\1\74\23\0\13\16"+
    "\1\75\5\16\15\0\1\76\46\0\1\74\22\0\1\74"+
    "\36\0\1\76\22\0\1\76\27\0\10\16\1\77\10\16"+
    "\12\0\1\100\42\0\1\100\22\0\1\100\32\0\4\16"+
    "\1\101\14\16\6\0\1\102\42\0\1\102\22\0\1\102"+
    "\36\0\14\16\1\103\4\16\16\0\1\104\42\0\1\104"+
    "\22\0\1\104\26\0\1\105\20\16\3\0\1\106\41\0"+
    "\1\106\23\0\1\106\41\0\16\16\1\107\2\16\20\0"+
    "\1\110\42\0\1\110\22\0\1\110\24\0\13\16\1\111"+
    "\5\16\15\0\1\112\42\0\1\112\22\0\1\112\27\0"+
    "\11\16\1\113\7\16\13\0\1\114\42\0\1\114\22\0"+
    "\1\114\31\0\5\16\1\115\13\16\7\0\1\116\42\0"+
    "\1\116\22\0\1\116\35\0\11\16\1\117\7\16\13\0"+
    "\1\120\42\0\1\120\22\0\1\120\31\0\21\16\2\0"+
    "\1\121\65\0\1\121\42\0\5\16\1\122\13\16\7\0"+
    "\1\123\42\0\1\123\22\0\1\123\35\0\12\16\1\124"+
    "\6\16\14\0\1\125\42\0\1\125\22\0\1\125\30\0"+
    "\15\16\1\126\3\16\17\0\1\127\42\0\1\127\22\0"+
    "\1\127\25\0\1\130\20\16\3\0\1\131\41\0\1\131"+
    "\23\0\1\131\41\0\14\16\1\132\4\16\16\0\1\133"+
    "\42\0\1\133\22\0\1\133\26\0\10\16\1\134\10\16"+
    "\12\0\1\135\42\0\1\135\22\0\1\135\32\0\11\16"+
    "\1\136\7\16\13\0\1\137\42\0\1\137\22\0\1\137"+
    "\31\0\13\16\1\140\5\16\15\0\1\141\42\0\1\141"+
    "\22\0\1\141\31\0\1\142\22\0\1\142\40\0\10\16"+
    "\1\143\10\16\12\0\1\144\42\0\1\144\22\0\1\144"+
    "\32\0\16\16\1\145\2\16\20\0\1\146\42\0\1\146"+
    "\22\0\1\146\24\0\16\16\1\147\2\16\20\0\1\150"+
    "\42\0\1\150\22\0\1\150\24\0\13\16\1\151\5\16"+
    "\15\0\1\152\42\0\1\152\22\0\1\152\27\0\5\16"+
    "\1\153\13\16\7\0\1\154\42\0\1\154\22\0\1\154"+
    "\35\0\21\16\2\0\1\155\65\0\1\155\52\0\1\156"+
    "\22\0\1\156\32\0\21\16\2\0\1\157\65\0\1\157"+
    "\42\0\2\16\1\160\16\16\4\0\1\161\42\0\1\161"+
    "\22\0\1\161\40\0\14\16\1\162\4\16\16\0\1\163"+
    "\42\0\1\163\22\0\1\163\26\0\5\16\1\164\13\16"+
    "\7\0\1\165\42\0\1\165\22\0\1\165\35\0\11\16"+
    "\1\166\7\16\13\0\1\167\42\0\1\167\22\0\1\167"+
    "\44\0\1\170\22\0\1\170\46\0\1\171\22\0\1\171"+
    "\41\0\1\172\22\0\1\172\24\0\14\16\1\173\4\16"+
    "\16\0\1\174\42\0\1\174\22\0\1\174\26\0\11\16"+
    "\1\175\7\16\13\0\1\176\42\0\1\176\22\0\1\176"+
    "\31\0\10\16\1\177\10\16\12\0\1\200\42\0\1\200"+
    "\22\0\1\200\34\0\1\201\22\0\1\201\45\0\1\202"+
    "\22\0\1\202\51\0\1\203\22\0\1\203\26\0\15\16"+
    "\1\204\3\16\17\0\1\205\42\0\1\205\22\0\1\205"+
    "\41\0\1\206\22\0\1\206\37\0\1\207\22\0\1\207"+
    "\47\0\1\210\22\0\1\210\24\0\1\211\20\16\3\0"+
    "\1\212\41\0\1\212\23\0\1\212\53\0\1\213\22\0"+
    "\1\213\53\0\1\214\42\0\1\215\23\0\1\215\57\0"+
    "\1\216\22\0\1\216\37\0\1\217\22\0\1\217\42\0"+
    "\1\220\22\0\1\220\31\0\1\221\22\0\1\221\42\0"+
    "\1\222\22\0\1\222\45\0\1\223\22\0\1\223\51\0"+
    "\1\224\22\0\1\224\42\0\1\225\22\0\1\225\37\0"+
    "\1\226\22\0\1\226\46\0\1\227\22\0\1\227\37\0"+
    "\1\230\22\0\1\230\30\0\1\231\23\0\1\231\57\0"+
    "\1\232\22\0\1\232\26\0\1\233\22\0\1\233\54\0"+
    "\1\234\22\0\1\234\43\0\1\235\22\0\1\235\25\0"+
    "\1\236\23\0\1\236\21\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[6858];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\1\1\5\11\12\1\2\11"+
    "\11\1\2\11\1\0\2\1\2\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\11\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\2\0\1\1\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\0\1\1\1\11"+
    "\1\1\1\0\1\1\1\11\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\0\1\1\4\0\1\1"+
    "\1\0\1\1\1\11\1\1\1\11\3\0\1\1\4\0"+
    "\1\1\1\11\13\0\1\11\2\0\1\11\4\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[158];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public L_Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: Caracter no valido: " + yytext());
            }
          // fall through
          case 27: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 28: break;
          case 3:
            { System.out.println("Reconocio "+yytext()+" exclamacion"); return new Symbol(Symbols.ExclamationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 29: break;
          case 4:
            { System.out.println("Reconocio "+yytext()+" comillas"); return new Symbol(Symbols.QuotationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 30: break;
          case 5:
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Symbols.Comma, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 31: break;
          case 6:
            { System.out.println("Reconocio "+yytext()+" dos puntos"); return new Symbol(Symbols.Colon, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 32: break;
          case 7:
            { System.out.println("Reconocio "+yytext()+" menor que"); return new Symbol(Symbols.LessThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 33: break;
          case 8:
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Symbols.Equal, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 34: break;
          case 9:
            { System.out.println("Reconocio "+yytext()+" mayor que"); return new Symbol(Symbols.GreaterThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 35: break;
          case 10:
            { System.out.println("Reconocio "+yytext()+" interrogacion"); return new Symbol(Symbols.QuestionMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 36: break;
          case 11:
            { System.out.println("Reconocio "+yytext()+" nombre"); return new Symbol(Symbols.Name, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 37: break;
          case 12:
            { System.out.println("Reconocio "+yytext()+" corchete izquierdo"); return new Symbol(Symbols.LeftBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 38: break;
          case 13:
            { System.out.println("Reconocio "+yytext()+" corchete derecho"); return new Symbol(Symbols.RightBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 39: break;
          case 14:
            { System.out.println("Reconocio "+yytext()+" llave izquierda"); return new Symbol(Symbols.LeftBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 40: break;
          case 15:
            { System.out.println("Reconocio "+yytext()+" llave derecha"); return new Symbol(Symbols.RightBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 41: break;
          case 16:
            { System.out.println("Reconocio "+yytext()+" ok"); return new Symbol(Symbols.Ok, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 42: break;
          case 17:
            { System.out.println("Reconocio "+yytext()+" numero de version"); return new Symbol(Symbols.VersionNumber, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 43: break;
          case 18:
            { System.out.println("Reconocio "+yytext()+" xson"); return new Symbol(Symbols.XSONsentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 44: break;
          case 19:
            { System.out.println("Reconocio "+yytext()+" error"); return new Symbol(Symbols.Error, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 45: break;
          case 20:
            { System.out.println("Reconocio "+yytext()+" status"); return new Symbol(Symbols.Status, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 46: break;
          case 21:
            { System.out.println("Reconocio "+yytext()+" usuario"); return new Symbol(Symbols.Usuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 47: break;
          case 22:
            { System.out.println("Reconocio "+yytext()+" version"); return new Symbol(Symbols.Version, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 48: break;
          case 23:
            { System.out.println("Reconocio "+yytext()+" respuesta"); return new Symbol(Symbols.Respuesta, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 49: break;
          case 24:
            { System.out.println("Reconocio "+yytext()+" login usuario"); return new Symbol(Symbols.LoginUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 50: break;
          case 25:
            { System.out.println("Reconocio "+yytext()+" realizar solicitud"); return new Symbol(Symbols.RealizarSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 51: break;
          case 26:
            { System.out.println("Reconocio "+yytext()+" fin solicitud finalizada"); return new Symbol(Symbols.FinSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 52: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
