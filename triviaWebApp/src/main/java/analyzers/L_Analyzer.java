// DO NOT EDIT
// Generated by JFlex 1.9.1 http://jflex.de/
// source: lexer.jflex

/*------------  1ra Area: Codigo de Usuario ---------*/
//------> Paquetes,importaciones
package analyzers;

import java_cup.runtime.*;

/*------------  2da Area: Opciones y Declaraciones ---------*/

@SuppressWarnings("fallthrough")
public class L_Analyzer implements java_cup.runtime.Scanner {

  /** This character denotes the end of file. */
  public static final int YYEOF = -1;

  /** Initial size of the lookahead buffer. */
  private static final int ZZ_BUFFERSIZE = 16384;

  // Lexical states.
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0, 0
  };

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  1,  2,  3,  1,  4,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     1,  5,  6,  0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  0,  8,  0, 
     9, 10, 11, 11, 11, 11, 11, 11, 11, 11, 12,  0, 13, 14, 15, 16, 
     0, 17, 18, 19, 20, 21, 22, 23, 24, 25, 24, 26, 27, 28, 29, 30, 
    31, 24, 32, 33, 34, 35, 36, 37, 38, 24, 24, 39,  0, 40,  0, 41, 
     0, 42, 43, 44, 45, 46, 47, 48, 11, 49, 11, 50, 51, 52, 53, 54, 
    55, 11, 56, 57, 58, 59, 60, 61, 62, 11, 11, 63,  0, 64,  0,  0, 
     0,  0,  0,  0,  0,  3,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0, 11,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0, 11,  0,  0, 
     0, 11,  0, 11,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0, 
     0, 11,  0,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0, 11,  0,  0, 
     0, 11,  0, 11,  0,  0,  0,  0,  0,  0, 11,  0,  0,  0,  0,  0
  };

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\2\2\1\3\1\4\1\5\2\6\1\7"+
    "\1\10\1\11\1\12\1\13\16\14\1\15\1\16\15\6"+
    "\1\17\1\20\1\0\2\14\2\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\2\21"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\22\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\2\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\1\14\1\6\1\14"+
    "\1\6\1\14\1\6\1\14\1\6\2\23\1\14\1\6"+
    "\2\24\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\1\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\1\14\3\6\1\14\2\6\1\14\1\6"+
    "\2\25\1\14\1\6\1\14\1\6\2\26\1\14\1\6"+
    "\1\14\3\6\1\14\2\6\1\14\1\6\1\14\1\6"+
    "\1\14\1\6\2\27\2\30\2\6\1\14\2\6\1\14"+
    "\1\6\2\31\1\14\3\6\1\14\2\6\1\14\1\6"+
    "\2\32\2\6\1\14\5\6\2\33\10\6\1\34\4\6"+
    "\1\35\5\6\1\36\1\6\1\37";

  private static int [] zzUnpackAction() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\101\0\101\0\202\0\101\0\101\0\101\0\303"+
    "\0\u0104\0\101\0\101\0\101\0\101\0\101\0\u0145\0\u0186"+
    "\0\u01c7\0\u0208\0\u0249\0\u028a\0\u02cb\0\u030c\0\u034d\0\u038e"+
    "\0\u03cf\0\u0410\0\u0451\0\u0492\0\101\0\101\0\u04d3\0\u0514"+
    "\0\u0555\0\u0596\0\u05d7\0\u0618\0\u0659\0\u069a\0\u06db\0\u071c"+
    "\0\u075d\0\u079e\0\u07df\0\101\0\101\0\u0820\0\u0861\0\u08a2"+
    "\0\u08e3\0\u0924\0\u0965\0\u09a6\0\u09e7\0\u0a28\0\u0a69\0\u0aaa"+
    "\0\u0aeb\0\u0b2c\0\u0b6d\0\u0bae\0\u0145\0\303\0\u0bef\0\u0c30"+
    "\0\u0c71\0\u0cb2\0\u0cf3\0\u0d34\0\u0d75\0\u0db6\0\u0df7\0\u0e38"+
    "\0\u0e79\0\u0eba\0\101\0\u0efb\0\u0f3c\0\u0f7d\0\u0fbe\0\u0fff"+
    "\0\u1040\0\u1081\0\u10c2\0\u1103\0\u1144\0\u1185\0\u11c6\0\u1207"+
    "\0\u1248\0\u1289\0\u12ca\0\u130b\0\u134c\0\u138d\0\u13ce\0\u140f"+
    "\0\u1450\0\u1491\0\u14d2\0\u1513\0\u1554\0\u1595\0\u15d6\0\u1617"+
    "\0\u1658\0\u1699\0\u16da\0\u171b\0\u175c\0\u179d\0\u17de\0\u181f"+
    "\0\u1860\0\u18a1\0\u18e2\0\u1923\0\u1964\0\u19a5\0\u19e6\0\u1a27"+
    "\0\u1a68\0\u1aa9\0\u1aea\0\u1b2b\0\u0145\0\303\0\u1b6c\0\u1bad"+
    "\0\u0145\0\303\0\u1bee\0\u1c2f\0\u1c70\0\u1cb1\0\u1cf2\0\u1d33"+
    "\0\u1d74\0\u1db5\0\u1df6\0\u1e37\0\u1e78\0\u1eb9\0\u1efa\0\u1f3b"+
    "\0\u1f7c\0\u1fbd\0\u1ffe\0\u203f\0\u2080\0\u20c1\0\u2102\0\u2143"+
    "\0\u2184\0\u21c5\0\u2206\0\u2247\0\u0145\0\303\0\u2288\0\u22c9"+
    "\0\u230a\0\u234b\0\u0145\0\303\0\u238c\0\u23cd\0\u240e\0\u244f"+
    "\0\u2490\0\u24d1\0\u2512\0\u2553\0\u2594\0\u25d5\0\u2616\0\u2657"+
    "\0\u2698\0\u26d9\0\u271a\0\u0145\0\303\0\u0145\0\303\0\u275b"+
    "\0\u279c\0\u27dd\0\u281e\0\u285f\0\u28a0\0\u28e1\0\u0145\0\303"+
    "\0\u2922\0\u2963\0\u29a4\0\u29e5\0\u2a26\0\u2a67\0\u2aa8\0\u2ae9"+
    "\0\u2b2a\0\u0145\0\303\0\u2b6b\0\u2bac\0\u2bed\0\u2c2e\0\u2c6f"+
    "\0\u2cb0\0\u2cf1\0\u2d32\0\u0145\0\303\0\u2d73\0\u2db4\0\u2df5"+
    "\0\u2e36\0\u2e77\0\u2eb8\0\u2ef9\0\u2f3a\0\303\0\u2f7b\0\u2fbc"+
    "\0\u2ffd\0\u303e\0\303\0\u307f\0\u30c0\0\u3101\0\u3142\0\u3183"+
    "\0\303\0\u31c4\0\303";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\2\3\1\0\1\4\1\5\1\6\1\7\1\2"+
    "\1\10\1\11\1\10\1\12\1\13\1\14\1\15\1\16"+
    "\4\17\1\20\1\21\2\17\1\22\1\17\1\23\1\24"+
    "\1\25\1\26\1\27\1\30\1\31\1\17\1\32\1\33"+
    "\1\17\1\34\1\35\1\36\5\10\1\37\1\40\1\10"+
    "\1\41\1\10\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\1\10\1\51\1\52\1\10\1\53\1\54\1\55"+
    "\103\0\1\3\107\0\3\10\5\0\26\10\2\0\26\10"+
    "\12\0\1\56\3\10\5\0\26\10\2\0\26\10\13\0"+
    "\3\10\5\0\26\17\2\0\26\10\13\0\3\10\5\0"+
    "\14\17\1\57\2\17\1\60\6\17\2\0\14\10\1\61"+
    "\2\10\1\62\6\10\13\0\3\10\5\0\10\17\1\63"+
    "\15\17\2\0\10\10\1\64\15\10\13\0\3\10\5\0"+
    "\14\17\1\65\11\17\2\0\14\10\1\66\11\10\13\0"+
    "\3\10\5\0\15\17\1\67\10\17\2\0\15\10\1\70"+
    "\10\10\13\0\3\10\5\0\15\17\1\71\10\17\2\0"+
    "\15\10\1\72\10\10\13\0\3\10\5\0\15\17\1\73"+
    "\10\17\2\0\15\10\1\74\10\10\13\0\3\10\5\0"+
    "\11\17\1\75\14\17\2\0\11\10\1\76\14\10\13\0"+
    "\3\10\5\0\1\77\25\17\2\0\1\10\1\100\24\10"+
    "\13\0\3\10\5\0\4\17\1\101\21\17\2\0\5\10"+
    "\1\102\20\10\13\0\3\10\5\0\21\17\1\103\4\17"+
    "\2\0\21\10\1\104\4\10\13\0\3\10\5\0\20\17"+
    "\1\105\5\17\2\0\20\10\1\106\5\10\13\0\3\10"+
    "\5\0\4\17\1\107\21\17\2\0\5\10\1\110\20\10"+
    "\13\0\3\10\5\0\20\17\1\111\5\17\2\0\20\10"+
    "\1\112\5\10\13\0\3\10\5\0\14\10\1\61\2\10"+
    "\1\62\6\10\2\0\14\10\1\61\2\10\1\62\6\10"+
    "\13\0\3\10\5\0\10\10\1\64\15\10\2\0\10\10"+
    "\1\64\15\10\13\0\3\10\5\0\14\10\1\66\11\10"+
    "\2\0\14\10\1\66\11\10\13\0\3\10\5\0\15\10"+
    "\1\70\10\10\2\0\15\10\1\70\10\10\13\0\3\10"+
    "\5\0\15\10\1\72\10\10\2\0\15\10\1\72\10\10"+
    "\13\0\3\10\5\0\15\10\1\74\10\10\2\0\15\10"+
    "\1\74\10\10\13\0\3\10\5\0\11\10\1\76\14\10"+
    "\2\0\11\10\1\76\14\10\13\0\3\10\5\0\1\100"+
    "\25\10\2\0\1\10\1\100\24\10\13\0\3\10\5\0"+
    "\4\10\1\102\21\10\2\0\5\10\1\102\20\10\13\0"+
    "\3\10\5\0\21\10\1\104\4\10\2\0\21\10\1\104"+
    "\4\10\13\0\3\10\5\0\20\10\1\106\5\10\2\0"+
    "\20\10\1\106\5\10\13\0\3\10\5\0\4\10\1\110"+
    "\21\10\2\0\5\10\1\110\20\10\13\0\3\10\5\0"+
    "\20\10\1\112\5\10\2\0\20\10\1\112\5\10\13\0"+
    "\1\113\100\0\3\10\5\0\23\17\1\114\2\17\2\0"+
    "\23\10\1\115\2\10\13\0\3\10\5\0\17\17\1\116"+
    "\6\17\2\0\17\10\1\117\6\10\13\0\3\10\5\0"+
    "\23\10\1\115\2\10\2\0\23\10\1\115\2\10\13\0"+
    "\3\10\5\0\17\10\1\117\6\10\2\0\17\10\1\117"+
    "\6\10\13\0\3\10\5\0\14\17\1\120\11\17\2\0"+
    "\14\10\1\121\11\10\13\0\3\10\5\0\14\10\1\121"+
    "\11\10\2\0\14\10\1\121\11\10\13\0\3\10\5\0"+
    "\20\17\1\122\5\17\2\0\20\10\1\123\5\10\13\0"+
    "\3\10\5\0\20\10\1\123\5\10\2\0\20\10\1\123"+
    "\5\10\13\0\3\10\5\0\6\17\1\124\17\17\2\0"+
    "\7\10\1\125\16\10\13\0\3\10\5\0\6\10\1\125"+
    "\17\10\2\0\7\10\1\125\16\10\13\0\3\10\5\0"+
    "\3\17\1\126\22\17\2\0\4\10\1\127\21\10\13\0"+
    "\3\10\5\0\3\10\1\127\22\10\2\0\4\10\1\127"+
    "\21\10\13\0\3\10\5\0\13\17\1\130\12\17\2\0"+
    "\13\10\1\131\12\10\13\0\3\10\5\0\13\10\1\131"+
    "\12\10\2\0\13\10\1\131\12\10\13\0\3\10\5\0"+
    "\20\17\1\132\5\17\2\0\20\10\1\133\5\10\13\0"+
    "\3\10\5\0\20\10\1\133\5\10\2\0\20\10\1\133"+
    "\5\10\13\0\3\10\5\0\20\17\1\134\5\17\2\0"+
    "\20\10\1\135\5\10\13\0\3\10\5\0\20\10\1\135"+
    "\5\10\2\0\20\10\1\135\5\10\13\0\3\10\5\0"+
    "\1\136\25\17\2\0\1\10\1\137\24\10\13\0\3\10"+
    "\5\0\1\137\25\10\2\0\1\10\1\137\24\10\13\0"+
    "\3\10\5\0\22\17\1\140\3\17\2\0\22\10\1\141"+
    "\3\10\13\0\3\10\5\0\22\10\1\141\3\10\2\0"+
    "\22\10\1\141\3\10\13\0\3\10\5\0\17\17\1\142"+
    "\6\17\2\0\17\10\1\143\6\10\13\0\3\10\5\0"+
    "\17\10\1\143\6\10\2\0\17\10\1\143\6\10\13\0"+
    "\3\10\5\0\15\17\1\144\10\17\2\0\15\10\1\145"+
    "\10\10\13\0\3\10\5\0\15\10\1\145\10\10\2\0"+
    "\15\10\1\145\10\10\13\0\3\10\5\0\10\17\1\146"+
    "\15\17\2\0\10\10\1\147\15\10\13\0\3\10\5\0"+
    "\10\10\1\147\15\10\2\0\10\10\1\147\15\10\13\0"+
    "\3\10\5\0\15\17\1\150\10\17\2\0\15\10\1\151"+
    "\10\10\13\0\3\10\5\0\15\10\1\151\10\10\2\0"+
    "\15\10\1\151\10\10\13\0\3\10\5\0\26\17\2\0"+
    "\1\152\25\10\13\0\3\10\5\0\26\10\2\0\1\152"+
    "\25\10\13\0\3\10\5\0\21\17\1\153\4\17\2\0"+
    "\21\10\1\154\4\10\13\0\3\10\5\0\21\10\1\154"+
    "\4\10\2\0\21\10\1\154\4\10\13\0\3\10\5\0"+
    "\10\17\1\155\15\17\2\0\10\10\1\156\15\10\13\0"+
    "\3\10\5\0\10\10\1\156\15\10\2\0\10\10\1\156"+
    "\15\10\13\0\3\10\5\0\10\17\1\157\15\17\2\0"+
    "\10\10\1\160\15\10\13\0\3\10\5\0\10\10\1\160"+
    "\15\10\2\0\10\10\1\160\15\10\13\0\3\10\5\0"+
    "\1\17\1\161\24\17\2\0\2\10\1\162\23\10\13\0"+
    "\3\10\5\0\1\10\1\162\24\10\2\0\2\10\1\162"+
    "\23\10\13\0\3\10\5\0\20\17\1\163\5\17\2\0"+
    "\20\10\1\164\5\10\13\0\3\10\5\0\20\10\1\164"+
    "\5\10\2\0\20\10\1\164\5\10\13\0\3\10\5\0"+
    "\16\17\1\165\7\17\2\0\16\10\1\166\7\10\13\0"+
    "\3\10\5\0\16\10\1\166\7\10\2\0\16\10\1\166"+
    "\7\10\13\0\3\10\5\0\21\17\1\167\4\17\2\0"+
    "\21\10\1\170\4\10\13\0\3\10\5\0\21\10\1\170"+
    "\4\10\2\0\21\10\1\170\4\10\13\0\3\10\5\0"+
    "\1\171\25\17\2\0\1\10\1\172\24\10\13\0\3\10"+
    "\5\0\1\172\25\10\2\0\1\10\1\172\24\10\13\0"+
    "\3\10\5\0\20\17\1\173\5\17\2\0\20\10\1\174"+
    "\5\10\13\0\3\10\5\0\20\10\1\174\5\10\2\0"+
    "\20\10\1\174\5\10\13\0\3\10\5\0\14\17\1\175"+
    "\11\17\2\0\14\10\1\176\11\10\13\0\3\10\5\0"+
    "\14\10\1\176\11\10\2\0\14\10\1\176\11\10\13\0"+
    "\3\10\5\0\15\17\1\177\10\17\2\0\15\10\1\200"+
    "\10\10\13\0\3\10\5\0\15\10\1\200\10\10\2\0"+
    "\15\10\1\200\10\10\13\0\3\10\5\0\17\17\1\201"+
    "\6\17\2\0\17\10\1\202\6\10\13\0\3\10\5\0"+
    "\17\10\1\202\6\10\2\0\17\10\1\202\6\10\13\0"+
    "\3\10\5\0\4\10\1\203\21\10\2\0\5\10\1\203"+
    "\20\10\13\0\3\10\5\0\10\17\1\204\15\17\2\0"+
    "\10\10\1\205\15\10\13\0\3\10\5\0\10\10\1\205"+
    "\15\10\2\0\10\10\1\205\15\10\13\0\3\10\5\0"+
    "\14\17\1\206\11\17\2\0\14\10\1\207\11\10\13\0"+
    "\3\10\5\0\14\10\1\207\11\10\2\0\14\10\1\207"+
    "\11\10\13\0\3\10\5\0\5\17\1\210\20\17\2\0"+
    "\6\10\1\211\17\10\13\0\3\10\5\0\5\10\1\211"+
    "\20\10\2\0\6\10\1\211\17\10\13\0\3\10\5\0"+
    "\17\17\1\212\6\17\2\0\17\10\1\213\6\10\13\0"+
    "\3\10\5\0\17\10\1\213\6\10\2\0\17\10\1\213"+
    "\6\10\13\0\3\10\5\0\24\17\1\214\1\17\2\0"+
    "\24\10\1\215\1\10\13\0\3\10\5\0\24\10\1\215"+
    "\1\10\2\0\24\10\1\215\1\10\13\0\3\10\5\0"+
    "\22\17\1\216\3\17\2\0\22\10\1\217\3\10\13\0"+
    "\3\10\5\0\22\10\1\217\3\10\2\0\22\10\1\217"+
    "\3\10\13\0\3\10\5\0\22\17\1\220\3\17\2\0"+
    "\22\10\1\221\3\10\13\0\3\10\5\0\22\10\1\221"+
    "\3\10\2\0\22\10\1\221\3\10\13\0\3\10\5\0"+
    "\17\17\1\222\6\17\2\0\17\10\1\223\6\10\13\0"+
    "\3\10\5\0\17\10\1\223\6\10\2\0\17\10\1\223"+
    "\6\10\13\0\3\10\5\0\10\17\1\224\15\17\2\0"+
    "\10\10\1\225\15\10\13\0\3\10\5\0\10\10\1\225"+
    "\15\10\2\0\10\10\1\225\15\10\13\0\3\10\5\0"+
    "\26\17\2\0\1\226\25\10\13\0\3\10\5\0\26\10"+
    "\2\0\1\226\25\10\13\0\3\10\5\0\14\10\1\227"+
    "\11\10\2\0\14\10\1\227\11\10\13\0\3\10\5\0"+
    "\21\17\1\230\4\17\2\0\21\10\1\231\4\10\13\0"+
    "\3\10\5\0\21\10\1\231\4\10\2\0\21\10\1\231"+
    "\4\10\13\0\3\10\5\0\26\17\2\0\1\232\25\10"+
    "\13\0\3\10\5\0\26\10\2\0\1\232\25\10\13\0"+
    "\3\10\5\0\10\17\1\233\15\17\2\0\10\10\1\234"+
    "\15\10\13\0\3\10\5\0\10\10\1\234\15\10\2\0"+
    "\10\10\1\234\15\10\13\0\3\10\5\0\4\17\1\235"+
    "\21\17\2\0\5\10\1\236\20\10\13\0\3\10\5\0"+
    "\4\10\1\236\21\10\2\0\5\10\1\236\20\10\13\0"+
    "\3\10\5\0\15\17\1\237\10\17\2\0\15\10\1\240"+
    "\10\10\13\0\3\10\5\0\15\10\1\240\10\10\2\0"+
    "\15\10\1\240\10\10\13\0\3\10\5\0\4\17\1\241"+
    "\21\17\2\0\5\10\1\242\20\10\13\0\3\10\5\0"+
    "\4\10\1\242\21\10\2\0\5\10\1\242\20\10\13\0"+
    "\3\10\5\0\20\17\1\243\5\17\2\0\20\10\1\244"+
    "\5\10\13\0\3\10\5\0\20\10\1\244\5\10\2\0"+
    "\20\10\1\244\5\10\13\0\3\10\5\0\10\17\1\245"+
    "\15\17\2\0\10\10\1\246\15\10\13\0\3\10\5\0"+
    "\10\10\1\246\15\10\2\0\10\10\1\246\15\10\13\0"+
    "\3\10\5\0\15\17\1\247\10\17\2\0\15\10\1\250"+
    "\10\10\13\0\3\10\5\0\15\10\1\250\10\10\2\0"+
    "\15\10\1\250\10\10\13\0\3\10\5\0\17\10\1\251"+
    "\6\10\2\0\17\10\1\251\6\10\13\0\3\10\5\0"+
    "\23\10\1\252\2\10\2\0\23\10\1\252\2\10\13\0"+
    "\3\10\5\0\22\17\1\253\3\17\2\0\22\10\1\254"+
    "\3\10\13\0\3\10\5\0\22\10\1\254\3\10\2\0"+
    "\22\10\1\254\3\10\13\0\3\10\5\0\22\10\1\255"+
    "\3\10\2\0\22\10\1\255\3\10\13\0\3\10\5\0"+
    "\2\17\1\256\23\17\2\0\3\10\1\257\22\10\13\0"+
    "\3\10\5\0\2\10\1\257\23\10\2\0\3\10\1\257"+
    "\22\10\13\0\3\10\5\0\17\17\1\260\6\17\2\0"+
    "\17\10\1\261\6\10\13\0\3\10\5\0\17\10\1\261"+
    "\6\10\2\0\17\10\1\261\6\10\13\0\3\10\5\0"+
    "\20\17\1\262\5\17\2\0\20\10\1\263\5\10\13\0"+
    "\3\10\5\0\20\10\1\263\5\10\2\0\20\10\1\263"+
    "\5\10\13\0\3\10\5\0\15\17\1\264\10\17\2\0"+
    "\15\10\1\265\10\10\13\0\3\10\5\0\15\10\1\265"+
    "\10\10\2\0\15\10\1\265\10\10\13\0\3\10\5\0"+
    "\14\17\1\266\11\17\2\0\14\10\1\267\11\10\13\0"+
    "\3\10\5\0\14\10\1\267\11\10\2\0\14\10\1\267"+
    "\11\10\13\0\3\10\5\0\4\10\1\270\21\10\2\0"+
    "\5\10\1\270\20\10\13\0\3\10\5\0\10\10\1\271"+
    "\15\10\2\0\10\10\1\271\15\10\13\0\3\10\5\0"+
    "\2\17\1\272\23\17\2\0\3\10\1\273\22\10\13\0"+
    "\3\10\5\0\2\10\1\273\23\10\2\0\3\10\1\273"+
    "\22\10\13\0\3\10\5\0\20\10\1\274\5\10\2\0"+
    "\20\10\1\274\5\10\13\0\3\10\5\0\1\275\25\17"+
    "\2\0\1\10\1\276\24\10\13\0\3\10\5\0\1\276"+
    "\25\10\2\0\1\10\1\276\24\10\13\0\3\10\5\0"+
    "\3\17\1\277\22\17\2\0\4\10\1\300\21\10\13\0"+
    "\3\10\5\0\3\10\1\300\22\10\2\0\4\10\1\300"+
    "\21\10\13\0\3\10\5\0\21\17\1\301\4\17\2\0"+
    "\21\10\1\302\4\10\13\0\3\10\5\0\21\10\1\302"+
    "\4\10\2\0\21\10\1\302\4\10\13\0\3\10\5\0"+
    "\20\10\1\303\5\10\2\0\20\10\1\303\5\10\13\0"+
    "\3\10\5\0\15\10\1\304\10\10\2\0\15\10\1\304"+
    "\10\10\13\0\3\10\5\0\10\17\1\305\15\17\2\0"+
    "\10\10\1\306\15\10\13\0\3\10\5\0\10\10\1\306"+
    "\15\10\2\0\10\10\1\306\15\10\13\0\3\10\5\0"+
    "\22\10\1\307\3\10\2\0\22\10\1\307\3\10\13\0"+
    "\3\10\5\0\17\17\1\310\6\17\2\0\17\10\1\311"+
    "\6\10\13\0\3\10\5\0\17\10\1\311\6\10\2\0"+
    "\17\10\1\311\6\10\13\0\3\10\5\0\1\312\25\17"+
    "\2\0\1\10\1\313\24\10\13\0\3\10\5\0\1\313"+
    "\25\10\2\0\1\10\1\313\24\10\13\0\3\10\5\0"+
    "\16\10\1\314\7\10\2\0\16\10\1\314\7\10\13\0"+
    "\3\10\5\0\26\10\2\0\1\315\25\10\13\0\3\10"+
    "\5\0\15\17\1\316\10\17\2\0\15\10\1\317\10\10"+
    "\13\0\3\10\5\0\15\10\1\317\10\10\2\0\15\10"+
    "\1\317\10\10\13\0\3\10\5\0\1\320\25\10\2\0"+
    "\1\10\1\320\24\10\13\0\3\10\5\0\26\17\2\0"+
    "\1\321\25\10\13\0\3\10\5\0\26\10\2\0\1\321"+
    "\25\10\13\0\3\10\5\0\22\10\1\322\3\10\2\0"+
    "\22\10\1\322\3\10\13\0\3\10\5\0\17\10\1\323"+
    "\6\10\2\0\17\10\1\323\6\10\13\0\3\10\5\0"+
    "\14\17\1\324\11\17\2\0\14\10\1\325\11\10\13\0"+
    "\3\10\5\0\14\10\1\325\11\10\2\0\14\10\1\325"+
    "\11\10\13\0\3\10\5\0\17\10\1\326\6\10\2\0"+
    "\17\10\1\326\6\10\13\0\3\10\5\0\22\10\1\327"+
    "\3\10\2\0\22\10\1\327\3\10\13\0\3\10\5\0"+
    "\4\10\1\330\21\10\2\0\5\10\1\330\20\10\13\0"+
    "\3\10\5\0\4\10\1\331\21\10\2\0\5\10\1\331"+
    "\20\10\13\0\3\10\5\0\10\10\1\332\15\10\2\0"+
    "\10\10\1\332\15\10\13\0\3\10\5\0\20\10\1\333"+
    "\5\10\2\0\20\10\1\333\5\10\13\0\3\10\5\0"+
    "\20\10\1\334\5\10\2\0\20\10\1\334\5\10\13\0"+
    "\3\10\5\0\20\10\1\335\5\10\2\0\20\10\1\335"+
    "\5\10\13\0\3\10\5\0\15\10\1\336\10\10\2\0"+
    "\15\10\1\336\10\10\13\0\3\10\5\0\22\10\1\337"+
    "\3\10\2\0\22\10\1\337\3\10\13\0\3\10\5\0"+
    "\21\10\1\340\4\10\2\0\21\10\1\340\4\10\13\0"+
    "\3\10\5\0\16\10\1\341\7\10\2\0\16\10\1\341"+
    "\7\10\13\0\3\10\5\0\1\342\25\10\2\0\1\10"+
    "\1\342\24\10\13\0\3\10\5\0\1\343\25\10\2\0"+
    "\1\10\1\343\24\10\13\0\3\10\5\0\22\10\1\344"+
    "\3\10\2\0\22\10\1\344\3\10\13\0\3\10\5\0"+
    "\17\10\1\345\6\10\2\0\17\10\1\345\6\10\13\0"+
    "\3\10\5\0\4\10\1\346\21\10\2\0\5\10\1\346"+
    "\20\10\13\0\3\10\5\0\10\10\1\347\15\10\2\0"+
    "\10\10\1\347\15\10\13\0\3\10\5\0\20\10\1\350"+
    "\5\10\2\0\20\10\1\350\5\10\13\0\3\10\5\0"+
    "\15\10\1\351\10\10\2\0\15\10\1\351\10\10\13\0"+
    "\3\10\5\0\21\10\1\352\4\10\2\0\21\10\1\352"+
    "\4\10\13\0\3\10\5\0\1\353\25\10\2\0\1\10"+
    "\1\353\24\10\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[12805];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** Error code for "Unknown internal scanner error". */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  /** Error code for "could not match input". */
  private static final int ZZ_NO_MATCH = 1;
  /** Error code for "pushback value was too large". */
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /**
   * Error messages for {@link #ZZ_UNKNOWN_ERROR}, {@link #ZZ_NO_MATCH}, and
   * {@link #ZZ_PUSHBACK_2BIG} respectively.
   */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\2\11\1\1\3\11\2\1\5\11\16\1\2\11"+
    "\15\1\2\11\1\0\34\1\1\11\240\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[235];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** Input device. */
  private java.io.Reader zzReader;

  /** Current state of the DFA. */
  private int zzState;

  /** Current lexical state. */
  private int zzLexicalState = YYINITIAL;

  /**
   * This buffer contains the current text to be matched and is the source of the {@link #yytext()}
   * string.
   */
  private char zzBuffer[] = new char[Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen())];

  /** Text position at the last accepting state. */
  private int zzMarkedPos;

  /** Current text position in the buffer. */
  private int zzCurrentPos;

  /** Marks the beginning of the {@link #yytext()} string in the buffer. */
  private int zzStartRead;

  /** Marks the last character in the buffer, that has been read from input. */
  private int zzEndRead;

  /**
   * Whether the scanner is at the end of file.
   * @see #yyatEOF
   */
  private boolean zzAtEOF;

  /**
   * The number of occupied positions in {@link #zzBuffer} beyond {@link #zzEndRead}.
   *
   * <p>When a lead/high surrogate has been read from the input stream into the final
   * {@link #zzBuffer} position, this will have a value of 1; otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /** Number of newlines encountered up to the start of the matched text. */
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  private int yycolumn;

  /** Number of characters up to the start of the matched text. */
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public L_Analyzer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    return ZZ_CMAP[input];
  }

  /**
   * Refills the input buffer.
   *
   * @return {@code false} iff there was new input.
   * @exception java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead - zzStartRead);

      /* translate stored positions */
      zzEndRead -= zzStartRead;
      zzCurrentPos -= zzStartRead;
      zzMarkedPos -= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate && zzCanGrow()) {
      /* if not, and it can grow: blow it up */
      char newBuffer[] = new char[Math.min(zzBuffer.length * 2, zzMaxBufferLen())];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      if (requested == 0) {
        throw new java.io.EOFException("Scan buffer limit reached ["+zzBuffer.length+"]");
      }
      else {
        throw new java.io.IOException(
            "Reader returned 0 characters. See JFlex examples/zero-reader for a workaround.");
      }
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
        if (numRead == requested) { // We requested too few chars to encode a full Unicode character
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        } else {                    // There is room in the buffer for at least one more char
          int c = zzReader.read();  // Expecting to read a paired low surrogate char
          if (c == -1) {
            return true;
          } else {
            zzBuffer[zzEndRead++] = (char)c;
          }
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input reader.
   *
   * @throws java.io.IOException if the reader could not be closed.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true; // indicate end of file
    zzEndRead = zzStartRead; // invalidate buffer

    if (zzReader != null) {
      zzReader.close();
    }
  }


  /**
   * Resets the scanner to read from a new input stream.
   *
   * <p>Does not close the old reader.
   *
   * <p>All internal variables are reset, the old input stream <b>cannot</b> be reused (internal
   * buffer is discarded and lost). Lexical state is set to {@code ZZ_INITIAL}.
   *
   * <p>Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader The new input stream.
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzEOFDone = false;
    yyResetPosition();
    zzLexicalState = YYINITIAL;
    int initBufferSize = Math.min(ZZ_BUFFERSIZE, zzMaxBufferLen());
    if (zzBuffer.length > initBufferSize) {
      zzBuffer = new char[initBufferSize];
    }
  }

  /**
   * Resets the input position.
   */
  private final void yyResetPosition() {
      zzAtBOL  = true;
      zzAtEOF  = false;
      zzCurrentPos = 0;
      zzMarkedPos = 0;
      zzStartRead = 0;
      zzEndRead = 0;
      zzFinalHighSurrogate = 0;
      yyline = 0;
      yycolumn = 0;
      yychar = 0L;
  }


  /**
   * Returns whether the scanner has reached the end of the reader it reads from.
   *
   * @return whether the scanner has reached EOF.
   */
  public final boolean yyatEOF() {
    return zzAtEOF;
  }


  /**
   * Returns the current lexical state.
   *
   * @return the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state.
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   *
   * @return the matched text.
   */
  public final String yytext() {
    return new String(zzBuffer, zzStartRead, zzMarkedPos-zzStartRead);
  }


  /**
   * Returns the character at the given position from the matched text.
   *
   * <p>It is equivalent to {@code yytext().charAt(pos)}, but faster.
   *
   * @param position the position of the character to fetch. A value from 0 to {@code yylength()-1}.
   *
   * @return the character at {@code position}.
   */
  public final char yycharat(int position) {
    return zzBuffer[zzStartRead + position];
  }


  /**
   * How many characters were matched.
   *
   * @return the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * <p>In a well-formed scanner (no or only correct usage of {@code yypushback(int)} and a
   * match-all fallback rule) this method will only be called with things that
   * "Can't Possibly Happen".
   *
   * <p>If this method is called, something is seriously wrong (e.g. a JFlex bug producing a faulty
   * scanner etc.).
   *
   * <p>Usual syntax/scanner level error handling should be done in error fallback rules.
   *
   * @param errorCode the code of the error message to display.
   */
  private static void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    } catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * <p>They will be read again by then next call of the scanning method.
   *
   * @param number the number of characters to be read again. This number must not be greater than
   *     {@link #yylength()}.
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
  yyclose();    }
  }




  /**
   * Resumes scanning until the next regular expression is matched, the end of input is encountered
   * or an I/O-Error occurs.
   *
   * @return the next token.
   * @exception java.io.IOException if any I/O-Error occurs.
   */
  @Override  public java_cup.runtime.Symbol next_token() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char[] zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':  // fall through
        case '\u000C':  // fall through
        case '\u0085':  // fall through
        case '\u2028':  // fall through
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is
        // (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof)
            zzPeek = false;
          else
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
          { return new java_cup.runtime.Symbol(Symbols.EOF); }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { System.out.println("Error: Caracter no valido: " + yytext());
            }
          // fall through
          case 32: break;
          case 2:
            { /* Ignorar espacios en blanco */
            }
          // fall through
          case 33: break;
          case 3:
            { System.out.println("Reconocio "+yytext()+" exclamacion"); return new Symbol(Symbols.ExclamationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 34: break;
          case 4:
            { System.out.println("Reconocio "+yytext()+" comillas"); return new Symbol(Symbols.QuotationMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 35: break;
          case 5:
            { System.out.println("Reconocio "+yytext()+" coma"); return new Symbol(Symbols.Comma, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 36: break;
          case 6:
            { System.out.println("Reconocio "+yytext()+" valores"); return new Symbol(Symbols.Values, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 37: break;
          case 7:
            { System.out.println("Reconocio "+yytext()+" dos puntos"); return new Symbol(Symbols.Colon, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 38: break;
          case 8:
            { System.out.println("Reconocio "+yytext()+" menor que"); return new Symbol(Symbols.LessThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 39: break;
          case 9:
            { System.out.println("Reconocio "+yytext()+" igual"); return new Symbol(Symbols.Equal, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 40: break;
          case 10:
            { System.out.println("Reconocio "+yytext()+" mayor que"); return new Symbol(Symbols.GreaterThan, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 41: break;
          case 11:
            { System.out.println("Reconocio "+yytext()+" interrogacion"); return new Symbol(Symbols.QuestionMark, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 42: break;
          case 12:
            { System.out.println("Reconocio "+yytext()+" nombre"); return new Symbol(Symbols.Name, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 43: break;
          case 13:
            { System.out.println("Reconocio "+yytext()+" corchete izquierdo"); return new Symbol(Symbols.LeftBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 44: break;
          case 14:
            { System.out.println("Reconocio "+yytext()+" corchete derecho"); return new Symbol(Symbols.RightBracket, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 45: break;
          case 15:
            { System.out.println("Reconocio "+yytext()+" llave izquierda"); return new Symbol(Symbols.LeftBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 46: break;
          case 16:
            { System.out.println("Reconocio "+yytext()+" llave derecha"); return new Symbol(Symbols.RightBrace, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 47: break;
          case 17:
            { System.out.println("Reconocio "+yytext()+" ok"); return new Symbol(Symbols.Ok, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 48: break;
          case 18:
            { System.out.println("Reconocio "+yytext()+" numero de version"); return new Symbol(Symbols.VersionNumber, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 49: break;
          case 19:
            { System.out.println("Reconocio "+yytext()+" xson"); return new Symbol(Symbols.XSONsentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 50: break;
          case 20:
            { System.out.println("Reconocio "+yytext()+" error"); return new Symbol(Symbols.Error, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 51: break;
          case 21:
            { System.out.println("Reconocio "+yytext()+" sentencia nombre"); return new Symbol(Symbols.NameSentence, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 52: break;
          case 22:
            { System.out.println("Reconocio "+yytext()+" status"); return new Symbol(Symbols.Status, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 53: break;
          case 23:
            { System.out.println("Reconocio "+yytext()+" usuario"); return new Symbol(Symbols.Usuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 54: break;
          case 24:
            { System.out.println("Reconocio "+yytext()+" version"); return new Symbol(Symbols.Version, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 55: break;
          case 25:
            { System.out.println("Reconocio "+yytext()+" password"); return new Symbol(Symbols.Password, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 56: break;
          case 26:
            { System.out.println("Reconocio "+yytext()+" respuesta"); return new Symbol(Symbols.Respuesta, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 57: break;
          case 27:
            { System.out.println("Reconocio "+yytext()+" institucion"); return new Symbol(Symbols.Institution, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 58: break;
          case 28:
            { System.out.println("Reconocio "+yytext()+" login usuario"); return new Symbol(Symbols.LoginUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 59: break;
          case 29:
            { System.out.println("Reconocio "+yytext()+" realizar solicitud"); return new Symbol(Symbols.RealizarSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 60: break;
          case 30:
            { System.out.println("Reconocio "+yytext()+" modificar usuario"); return new Symbol(Symbols.ModificarUsuario, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 61: break;
          case 31:
            { System.out.println("Reconocio "+yytext()+" fin solicitud finalizada"); return new Symbol(Symbols.FinSolicitud, (yycolumn + 1), (yyline + 1), yytext());
            }
          // fall through
          case 62: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
