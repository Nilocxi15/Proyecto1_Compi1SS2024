
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import models.Trivia;
import com.example.triviaapp.LoginActivity;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer_login extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols_login.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer_login() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer_login(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer_login(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\025\000\002\002\004\000\002\002\004\000\002\002" +
    "\003\000\002\007\013\000\002\010\003\000\002\010\003" +
    "\000\002\010\003\000\002\003\045\000\002\004\036\000" +
    "\002\006\025\000\002\011\004\000\002\011\003\000\002" +
    "\012\054\000\002\005\004\000\002\005\003\000\002\013" +
    "\004\000\002\013\004\000\002\013\004\000\002\013\003" +
    "\000\002\013\003\000\002\013\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\004\004\007\001\002\000\004\002\uffff\001" +
    "\002\000\004\002\225\001\002\000\004\004\056\001\002" +
    "\000\006\020\011\023\010\001\002\000\004\012\021\001" +
    "\002\000\004\021\012\001\002\000\004\007\013\001\002" +
    "\000\004\010\014\001\002\000\004\022\015\001\002\000" +
    "\004\010\016\001\002\000\004\006\017\001\002\000\004" +
    "\005\020\001\002\000\004\004\ufffe\001\002\000\004\010" +
    "\022\001\002\000\004\027\023\001\002\000\004\010\024" +
    "\001\002\000\004\005\025\001\002\000\004\013\026\001" +
    "\002\000\004\010\027\001\002\000\004\030\030\001\002" +
    "\000\004\010\031\001\002\000\004\012\032\001\002\000" +
    "\004\015\033\001\002\000\004\013\034\001\002\000\004" +
    "\010\035\001\002\000\004\031\036\001\002\000\004\010" +
    "\037\001\002\000\004\012\040\001\002\000\004\010\041" +
    "\001\002\000\004\025\042\001\002\000\004\010\043\001" +
    "\002\000\004\014\044\001\002\000\004\016\045\001\002" +
    "\000\004\014\046\001\002\000\004\004\047\001\002\000" +
    "\004\026\050\001\002\000\004\011\051\001\002\000\004" +
    "\005\052\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffc\001\002\000\004\002\000\001\002\000\004\002\ufffd" +
    "\001\002\000\004\023\060\001\002\000\004\002\ufffb\001" +
    "\002\000\004\012\061\001\002\000\004\010\062\001\002" +
    "\000\006\027\064\034\063\001\002\000\004\010\125\001" +
    "\002\000\004\010\065\001\002\000\004\005\066\001\002" +
    "\000\004\013\067\001\002\000\004\010\070\001\002\000" +
    "\004\030\071\001\002\000\004\010\072\001\002\000\004" +
    "\012\073\001\002\000\004\015\074\001\002\000\004\013" +
    "\075\001\002\000\004\010\076\001\002\000\004\031\077" +
    "\001\002\000\004\010\100\001\002\000\004\012\101\001" +
    "\002\000\004\010\102\001\002\000\006\024\103\025\042" +
    "\001\002\000\004\010\104\001\002\000\004\017\105\001" +
    "\002\000\004\010\106\001\002\000\004\032\107\001\002" +
    "\000\004\010\110\001\002\000\004\012\111\001\002\000" +
    "\004\010\112\001\002\000\004\033\114\001\002\000\004" +
    "\010\116\001\002\000\006\010\ufff3\033\114\001\002\000" +
    "\004\010\ufff4\001\002\000\004\014\117\001\002\000\004" +
    "\016\120\001\002\000\004\014\121\001\002\000\004\004" +
    "\122\001\002\000\004\026\123\001\002\000\004\005\124" +
    "\001\002\000\004\002\ufffa\001\002\000\004\005\126\001" +
    "\002\000\004\013\127\001\002\000\004\010\130\001\002" +
    "\000\004\030\131\001\002\000\004\010\132\001\002\000" +
    "\004\012\133\001\002\000\004\015\134\001\002\000\004" +
    "\013\135\001\002\000\004\010\146\001\002\000\004\016" +
    "\141\001\002\000\006\013\135\016\ufff6\001\002\000\004" +
    "\016\ufff7\001\002\000\004\014\142\001\002\000\004\004" +
    "\143\001\002\000\004\026\144\001\002\000\004\005\145" +
    "\001\002\000\004\002\ufff8\001\002\000\004\035\147\001" +
    "\002\000\004\010\150\001\002\000\004\012\151\001\002" +
    "\000\004\010\152\001\002\000\004\043\153\001\002\000" +
    "\004\010\154\001\002\000\004\017\155\001\002\000\004" +
    "\010\156\001\002\000\004\036\157\001\002\000\004\010" +
    "\160\001\002\000\004\012\161\001\002\000\004\010\162" +
    "\001\002\000\010\033\166\042\164\044\165\001\002\000" +
    "\004\010\172\001\002\000\012\010\uffee\033\166\042\164" +
    "\044\165\001\002\000\012\010\uffed\033\166\042\164\044" +
    "\165\001\002\000\012\010\uffef\033\166\042\164\044\165" +
    "\001\002\000\004\010\ufff1\001\002\000\004\010\ufff2\001" +
    "\002\000\004\010\ufff0\001\002\000\004\017\173\001\002" +
    "\000\004\010\174\001\002\000\004\037\175\001\002\000" +
    "\004\010\176\001\002\000\004\012\177\001\002\000\004" +
    "\010\200\001\002\000\010\033\166\042\164\044\165\001" +
    "\002\000\004\010\202\001\002\000\004\017\203\001\002" +
    "\000\004\010\204\001\002\000\004\040\205\001\002\000" +
    "\004\010\206\001\002\000\004\012\207\001\002\000\004" +
    "\010\210\001\002\000\004\042\211\001\002\000\004\010" +
    "\212\001\002\000\004\017\213\001\002\000\004\010\214" +
    "\001\002\000\004\041\215\001\002\000\004\010\216\001" +
    "\002\000\004\012\217\001\002\000\004\010\220\001\002" +
    "\000\004\044\221\001\002\000\004\010\222\001\002\000" +
    "\004\014\223\001\002\000\004\017\224\001\002\000\006" +
    "\013\ufff5\016\ufff5\001\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\223\000\010\002\004\004\003\007\005\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\003\054\004\052" +
    "\006\056\010\053\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\005\112\001\001\000\002\001\001\000\004" +
    "\005\114\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\011\135\012\136\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\011\137\012\136\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\162\001\001\000\002\001" +
    "\001\000\004\013\170\001\001\000\004\013\167\001\001" +
    "\000\004\013\166\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\200\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer_login$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer_login$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer_login$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public static boolean status = false;
    public static String username = "";

 //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        status = false;
        username = "";
    }

        //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
        public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
        {
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;

            System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
            System.out.println("\t\tLexema: "+lexema);
            System.out.println("\t\tFila: "+fila);
            System.out.println("\t\tColumna: "+columna);

            status = false;
            username = "";
        }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer_login$actions {



  private final S_Analyzer_login parser;

  /** Constructor */
  CUP$S_Analyzer_login$actions(S_Analyzer_login parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_login$do_action_part00000000(
    int                        CUP$S_Analyzer_login$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_login$parser,
    java.util.Stack            CUP$S_Analyzer_login$stack,
    int                        CUP$S_Analyzer_login$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer_login$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer_login$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= S EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer_login$parser.done_parsing();
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // S ::= HEADER ANSWERS 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // S ::= ERROR 
            {
              String RESULT =null;
		System.out.println("Sentencia STATUS ERROR reconocida");
            status = false;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("S",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= LessThan Xson Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("HEADER",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // ANSWERS ::= OK 
            {
              String RESULT =null;
		System.out.println("Sentencia STATUS OK reconocida");
        status = true;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("ANSWERS",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // ANSWERS ::= ERROR 
            {
              String RESULT =null;
		System.out.println("Sentencia STATUS ERROR reconocida");
        status = false;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("ANSWERS",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // ANSWERS ::= TRIVIALIST 
            {
              String RESULT =null;
		System.out.println("Sentencia STATUS TRIVIALIST reconocida");
        status = true;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("ANSWERS",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // OK ::= LessThan EnvioRespuesta Colon QuotationMark LoginUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Ok QuotationMark Comma QuotationMark Usuario QuotationMark Colon QuotationMark NAME QuotationMark RightBrace RightBracket RightBrace LessThan FinEnvioRespuesta GreaterThan 
            {
              String RESULT =null;
		int nameleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-7)).left;
		int nameright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-7)).right;
		String name = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-7)).value;
		username = name;
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("OK",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-34)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // ERROR ::= LessThan EnvioRespuesta Colon QuotationMark LoginUsuario QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket LeftBrace QuotationMark Status QuotationMark Colon QuotationMark Error QuotationMark RightBrace RightBracket RightBrace LessThan FinEnvioRespuesta ExclamationMark GreaterThan 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("ERROR",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-27)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // TRIVIALIST ::= LessThan EnvioRespuesta Colon QuotationMark ListaTrivias QuotationMark GreaterThan LeftBrace QuotationMark Respuesta QuotationMark Colon LeftBracket TRIVIALOOP RightBracket RightBrace LessThan FinEnvioRespuesta GreaterThan 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("TRIVIALIST",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-18)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // TRIVIALOOP ::= TRIVIABLOCK TRIVIALOOP 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("TRIVIALOOP",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // TRIVIALOOP ::= TRIVIABLOCK 
            {
              String RESULT =null;

              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("TRIVIALOOP",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // TRIVIABLOCK ::= LeftBrace QuotationMark IdTrivia QuotationMark Colon QuotationMark IdTriviaValue QuotationMark Comma QuotationMark Nombre QuotationMark Colon QuotationMark SPECIALTEXT QuotationMark Comma QuotationMark Tema QuotationMark Colon QuotationMark SPECIALTEXT QuotationMark Comma QuotationMark TiempoPregunta QuotationMark Colon QuotationMark Number QuotationMark Comma QuotationMark UsuarioCreacion QuotationMark Colon QuotationMark SpecialText QuotationMark RightBrace Comma 
            {
              String RESULT =null;
		int idTriviaValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-35)).left;
		int idTriviaValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-35)).right;
		String idTriviaVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-35)).value;
		int nameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-27)).left;
		int nameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-27)).right;
		String nameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-27)).value;
		int topicValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-19)).left;
		int topicValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-19)).right;
		String topicVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-19)).value;
		int timeValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-11)).left;
		int timeValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-11)).right;
		String timeVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-11)).value;
		int authorValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-3)).left;
		int authorValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-3)).right;
		String authorVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-3)).value;
		Trivia data = new Trivia(String.valueOf(idTriviaVal), String.valueOf(nameVal),
                String.valueOf(topicVal), String.valueOf(timeVal), String.valueOf(authorVal));
                LoginActivity.getTrivias().add(data);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("TRIVIABLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-41)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // NAME ::= UserValue NAME 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("NAME",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // NAME ::= UserValue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("NAME",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // SPECIALTEXT ::= SpecialText SPECIALTEXT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SPECIALTEXT ::= UserValue SPECIALTEXT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SPECIALTEXT ::= Number SPECIALTEXT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.elementAt(CUP$S_Analyzer_login$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SPECIALTEXT ::= UserValue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SPECIALTEXT ::= Number 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SPECIALTEXT ::= SpecialText 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_login$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_login$result = parser.getSymbolFactory().newSymbol("SPECIALTEXT",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_login$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_login$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer_login$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_login$do_action(
    int                        CUP$S_Analyzer_login$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_login$parser,
    java.util.Stack            CUP$S_Analyzer_login$stack,
    int                        CUP$S_Analyzer_login$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer_login$do_action_part00000000(
                               CUP$S_Analyzer_login$act_num,
                               CUP$S_Analyzer_login$parser,
                               CUP$S_Analyzer_login$stack,
                               CUP$S_Analyzer_login$top);
    }
}

}
