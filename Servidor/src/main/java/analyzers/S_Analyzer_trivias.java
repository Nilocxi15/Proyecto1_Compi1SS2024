
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import filesManager.readFiles;
import models.Component;
import models.Trivia;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer_trivias extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols_trivias.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer_trivias() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer_trivias(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer_trivias(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\024\000\002\002\004\000\002\002\010\000\002\003" +
    "\005\000\002\003\004\000\002\004\061\000\002\005\007" +
    "\000\002\005\005\000\002\006\020\000\002\007\024\000" +
    "\002\007\040\000\002\007\034\000\002\010\003\000\002" +
    "\010\003\000\002\011\003\000\002\011\003\000\002\011" +
    "\003\000\002\012\004\000\002\012\004\000\002\012\003" +
    "\000\002\012\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\015\005\001\002\000\004\002\243\001" +
    "\002\000\004\004\006\001\002\000\004\010\007\001\002" +
    "\000\004\012\011\001\002\000\004\011\241\001\002\000" +
    "\004\014\015\001\002\000\004\006\013\001\002\000\006" +
    "\011\ufffe\012\011\001\002\000\004\011\uffff\001\002\000" +
    "\004\016\016\001\002\000\004\014\017\001\002\000\004" +
    "\007\020\001\002\000\004\014\021\001\002\000\004\042" +
    "\022\001\002\000\004\014\023\001\002\000\004\006\024" +
    "\001\002\000\004\014\025\001\002\000\004\017\026\001" +
    "\002\000\004\014\027\001\002\000\004\007\030\001\002" +
    "\000\004\014\031\001\002\000\006\007\032\043\033\001" +
    "\002\000\010\007\032\014\uffee\043\033\001\002\000\010" +
    "\007\032\014\uffef\043\033\001\002\000\004\014\035\001" +
    "\002\000\004\006\036\001\002\000\004\014\037\001\002" +
    "\000\004\020\040\001\002\000\004\014\041\001\002\000" +
    "\004\007\042\001\002\000\004\014\043\001\002\000\006" +
    "\007\032\043\033\001\002\000\004\014\045\001\002\000" +
    "\004\006\046\001\002\000\004\014\047\001\002\000\004" +
    "\021\050\001\002\000\004\014\051\001\002\000\004\007" +
    "\052\001\002\000\004\041\053\001\002\000\004\006\054" +
    "\001\002\000\004\014\055\001\002\000\004\022\056\001" +
    "\002\000\004\014\057\001\002\000\004\007\060\001\002" +
    "\000\004\014\061\001\002\000\004\043\062\001\002\000" +
    "\004\014\063\001\002\000\004\006\064\001\002\000\004" +
    "\014\065\001\002\000\004\023\066\001\002\000\004\014" +
    "\067\001\002\000\004\007\070\001\002\000\004\004\071" +
    "\001\002\000\004\010\072\001\002\000\004\014\076\001" +
    "\002\000\004\005\074\001\002\000\004\013\075\001\002" +
    "\000\004\006\ufffd\001\002\000\004\024\103\001\002\000" +
    "\004\011\100\001\002\000\006\005\ufffb\006\101\001\002" +
    "\000\004\010\072\001\002\000\004\005\ufffc\001\002\000" +
    "\004\014\104\001\002\000\004\007\105\001\002\000\004" +
    "\014\106\001\002\000\004\042\107\001\002\000\004\014" +
    "\110\001\002\000\004\006\111\001\002\000\004\014\112" +
    "\001\002\000\004\025\113\001\002\000\004\014\114\001" +
    "\002\000\004\007\115\001\002\000\004\014\116\001\002" +
    "\000\016\026\125\027\121\030\120\031\123\032\124\033" +
    "\127\001\002\000\004\011\ufffa\001\002\000\004\014\ufff4" +
    "\001\002\000\004\014\202\001\002\000\004\014\161\001" +
    "\002\000\004\014\ufff3\001\002\000\004\014\ufff5\001\002" +
    "\000\004\014\ufff6\001\002\000\004\014\130\001\002\000" +
    "\004\014\ufff2\001\002\000\004\006\131\001\002\000\004" +
    "\014\132\001\002\000\004\034\133\001\002\000\004\014" +
    "\134\001\002\000\004\007\135\001\002\000\004\014\136" +
    "\001\002\000\006\007\032\043\033\001\002\000\004\014" +
    "\140\001\002\000\004\006\141\001\002\000\004\014\142" +
    "\001\002\000\004\040\143\001\002\000\004\014\144\001" +
    "\002\000\004\007\145\001\002\000\004\014\146\001\002" +
    "\000\006\007\032\043\033\001\002\000\004\014\150\001" +
    "\002\000\004\006\151\001\002\000\004\014\152\001\002" +
    "\000\004\035\153\001\002\000\004\014\154\001\002\000" +
    "\004\007\155\001\002\000\004\014\156\001\002\000\006" +
    "\007\032\043\033\001\002\000\004\014\160\001\002\000" +
    "\004\011\ufff7\001\002\000\004\006\162\001\002\000\004" +
    "\014\163\001\002\000\004\034\164\001\002\000\004\014" +
    "\165\001\002\000\004\007\166\001\002\000\004\014\167" +
    "\001\002\000\006\007\032\043\033\001\002\000\004\014" +
    "\171\001\002\000\004\006\172\001\002\000\004\014\173" +
    "\001\002\000\004\035\174\001\002\000\004\014\175\001" +
    "\002\000\004\007\176\001\002\000\004\014\177\001\002" +
    "\000\006\007\032\043\033\001\002\000\004\014\201\001" +
    "\002\000\004\011\ufff9\001\002\000\004\006\203\001\002" +
    "\000\004\014\204\001\002\000\004\034\205\001\002\000" +
    "\004\014\206\001\002\000\004\007\207\001\002\000\004" +
    "\014\210\001\002\000\006\007\032\043\033\001\002\000" +
    "\004\014\212\001\002\000\004\006\213\001\002\000\004" +
    "\014\214\001\002\000\004\036\215\001\002\000\004\014" +
    "\216\001\002\000\004\007\217\001\002\000\004\041\220" +
    "\001\002\000\004\006\221\001\002\000\004\014\222\001" +
    "\002\000\004\037\223\001\002\000\004\014\224\001\002" +
    "\000\004\007\225\001\002\000\004\041\226\001\002\000" +
    "\004\006\227\001\002\000\004\014\230\001\002\000\004" +
    "\035\231\001\002\000\004\014\232\001\002\000\004\007" +
    "\233\001\002\000\004\014\234\001\002\000\006\007\032" +
    "\043\033\001\002\000\004\014\236\001\002\000\004\011" +
    "\ufff8\001\002\000\004\014\ufff1\001\002\000\004\014\ufff0" +
    "\001\002\000\004\005\242\001\002\000\004\002\000\001" +
    "\002\000\004\002\001\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\002\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\003\007\004\011" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\003\013\004\011\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\033" +
    "\001\001\000\004\012\237\001\001\000\004\012\236\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\043\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\072\001\001\000\004\006\076\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\101\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\007\116\010\121\011\125\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\136\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\012\146\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\012\156" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\012\167\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\012\177\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\210\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\234\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer_trivias$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer_trivias$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer_trivias$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




     private String idTrivia;
     private String name;
     private String topic;
     private String time;
     private String userCreation;

     private String idComponent;
     private String classComponent;
     private String textVisible;
     private String answer;

     private String lines;
     private String columns;

     private String options;

     private LinkedList<Component> components = new LinkedList<>();

  //Metodo al que se llama automaticamente ante algun error sintactico
     public void syntax_error(Symbol s)
     {
         String lexema = s.value.toString();
         int fila = s.right;
         int columna = s.left;

         System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
         System.out.println("\t\tLexema: "+lexema);
         System.out.println("\t\tFila: "+fila);
         System.out.println("\t\tColumna: "+columna);

     }

         //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
         public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
         {
             String lexema = s.value.toString();
             int fila = s.right;
             int columna = s.left;

             System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
             System.out.println("\t\tLexema: "+lexema);
             System.out.println("\t\tFila: "+fila);
             System.out.println("\t\tColumna: "+columna);

         }
 

/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer_trivias$actions {


     private void cleanVariablesComponent(){
         idComponent = null;
         classComponent = null;
         textVisible = null;
         answer = null;
         lines = null;
         columns = null;
         options = null;
     }

     private void cleanVariablesTrivia(){
         idTrivia = null;
         name = null;
         topic = null;
         time = null;
         userCreation = null;
     }
 
  private final S_Analyzer_trivias parser;

  /** Constructor */
  CUP$S_Analyzer_trivias$actions(S_Analyzer_trivias parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_trivias$do_action_part00000000(
    int                        CUP$S_Analyzer_trivias$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_trivias$parser,
    java.util.Stack            CUP$S_Analyzer_trivias$stack,
    int                        CUP$S_Analyzer_trivias$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer_trivias$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer_trivias$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer_trivias$parser.done_parsing();
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= Header LeftPar LeftBrace TRIVIALOOP RightBrace RightPar 
            {
              String RESULT =null;
		System.out.println("Analisis Sintactico Exitoso");
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-5)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TRIVIALOOP ::= TRIVIABLOCK Comma TRIVIALOOP 
            {
              String RESULT =null;
		System.out.println("Entra en trivialoop");
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("TRIVIALOOP",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-2)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TRIVIALOOP ::= TRIVIABLOCK Comma 
            {
              String RESULT =null;
		System.out.println("Entra en trivialoop");
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("TRIVIALOOP",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TRIVIABLOCK ::= LeftBracket QuotationMark IdTriviaSentence QuotationMark Colon QuotationMark IdTrivia QuotationMark Comma QuotationMark Nombre QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark Tema QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark TiempoPregunta QuotationMark Colon Number Comma QuotationMark UsuarioCreacion QuotationMark Colon QuotationMark SpecialText QuotationMark Comma QuotationMark Estructura QuotationMark Colon LeftPar COMPONENTLOOP RightPar RightBracket 
            {
              String RESULT =null;
		int idTriviaValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-40)).left;
		int idTriviaValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-40)).right;
		String idTriviaVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-40)).value;
		int nameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-32)).left;
		int nameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-32)).right;
		String nameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-32)).value;
		int topicValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-24)).left;
		int topicValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-24)).right;
		String topicVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-24)).value;
		int timeValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).left;
		int timeValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).right;
		String timeVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).value;
		int userCreationValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-10)).left;
		int userCreationValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-10)).right;
		String userCreationVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-10)).value;
		System.out.println("Entra en triviablock");
                 idTrivia = String.valueOf(idTriviaVal);
                 name = String.valueOf(nameVal);
                 topic = String.valueOf(topicVal);
                 time = String.valueOf(timeVal);
                 userCreation = String.valueOf(userCreationVal);

                 Trivia data = new Trivia(idTrivia, name, topic, time, userCreation, components);
                 readFiles.triviaList.add(data);
                 cleanVariablesTrivia();
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("TRIVIABLOCK",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-46)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // COMPONENTLOOP ::= LeftBrace COMPONENTHEADER RightBrace Comma COMPONENTLOOP 
            {
              String RESULT =null;
		System.out.println("Entra en componentloop");
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENTLOOP",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-4)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // COMPONENTLOOP ::= LeftBrace COMPONENTHEADER RightBrace 
            {
              String RESULT =null;
		System.out.println("Entra en componentloop");
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENTLOOP",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-2)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // COMPONENTHEADER ::= QuotationMark IdComponente QuotationMark Colon QuotationMark IdTrivia QuotationMark Comma QuotationMark Clase QuotationMark Colon QuotationMark COMPONENT 
            {
              String RESULT =null;
		int idComponentValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).left;
		int idComponentValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).right;
		String idComponentVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).value;
		System.out.println("Entra en componentheader");
                     idComponent = idComponentVal;

                     Component data = new Component(idComponent, classComponent, lines, columns, textVisible, answer, options);
                     components.add(data);
                     cleanVariablesComponent();
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENTHEADER",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-13)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // COMPONENT ::= CLASESONE QuotationMark Comma QuotationMark TextoVisible QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark Respuesta QuotationMark Colon QuotationMark SENTENCES QuotationMark 
            {
              String RESULT =null;
		int classesValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).left;
		int classesValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).right;
		String classesVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).value;
		int sentenceValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).left;
		int sentenceValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).right;
		String sentenceVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).value;
		int answerValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int answerValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String answerVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		System.out.println("Entra en component");
                 classComponent = String.valueOf(classesVal);
                 textVisible = String.valueOf(sentenceVal);
                 answer = String.valueOf(answerVal);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENT",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // COMPONENT ::= AreaTexto QuotationMark Comma QuotationMark TextoVisible QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark Filas QuotationMark Colon Number Comma QuotationMark Columnas QuotationMark Colon Number Comma QuotationMark Respuesta QuotationMark Colon QuotationMark SENTENCES QuotationMark 
            {
              String RESULT =null;
		int sentenceValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-21)).left;
		int sentenceValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-21)).right;
		String sentenceVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-21)).value;
		int lineValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-14)).left;
		int lineValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-14)).right;
		String lineVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-14)).value;
		int columnValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).left;
		int columnValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).right;
		String columnVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-8)).value;
		int answerValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int answerValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String answerVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		System.out.println("Entra en componenet2");
                 classComponent = "AREA_TEXTO";
                 textVisible = String.valueOf(sentenceVal);
                 lines = String.valueOf(lineVal);
                 columns = String.valueOf(columnVal);
                 answer = String.valueOf(answerVal);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENT",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-29)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // COMPONENT ::= CLASESTWO QuotationMark Comma QuotationMark TextoVisible QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark Opciones QuotationMark Colon QuotationMark SENTENCES QuotationMark Comma QuotationMark Respuesta QuotationMark Colon QuotationMark SENTENCES QuotationMark 
            {
              String RESULT =null;
		int classesValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-25)).left;
		int classesValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-25)).right;
		String classesVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-25)).value;
		int sentenceValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).left;
		int sentenceValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).right;
		String sentenceVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-17)).value;
		int optionsValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).left;
		int optionsValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).right;
		String optionsVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-9)).value;
		int answerValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int answerValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String answerVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		System.out.println("Entra en component3");
                 classComponent = String.valueOf(classesVal);
                 textVisible = String.valueOf(sentenceVal);
                 options = String.valueOf(optionsVal);
                 answer = String.valueOf(answerVal);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("COMPONENT",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-25)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // CLASESONE ::= CampoTexto 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = "CAMPO_TEXTO";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("CLASESONE",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // CLASESONE ::= Fichero 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = "FICHERO";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("CLASESONE",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // CLASESTWO ::= Checkbox 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = "CHECKBOX";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("CLASESTWO",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // CLASESTWO ::= Radio 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = "RADIO";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("CLASESTWO",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // CLASESTWO ::= Combo 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = "COMBO";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("CLASESTWO",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SENTENCES ::= SpecialText SENTENCES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("SENTENCES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCES ::= Colon SENTENCES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("SENTENCES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.elementAt(CUP$S_Analyzer_trivias$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCES ::= SpecialText 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("SENTENCES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCES ::= Colon 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_trivias$stack.peek()).value;
		RESULT = ":";
              CUP$S_Analyzer_trivias$result = parser.getSymbolFactory().newSymbol("SENTENCES",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_trivias$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_trivias$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer_trivias$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_trivias$do_action(
    int                        CUP$S_Analyzer_trivias$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_trivias$parser,
    java.util.Stack            CUP$S_Analyzer_trivias$stack,
    int                        CUP$S_Analyzer_trivias$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer_trivias$do_action_part00000000(
                               CUP$S_Analyzer_trivias$act_num,
                               CUP$S_Analyzer_trivias$parser,
                               CUP$S_Analyzer_trivias$stack,
                               CUP$S_Analyzer_trivias$top);
    }
}

}
