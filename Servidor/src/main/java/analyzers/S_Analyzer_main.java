
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package analyzers;

import java_cup.runtime.Symbol;
import java.util.LinkedList;
import models.login;
import models.newUser;
import models.newTrivia;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class S_Analyzer_main extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols_main.class;
}

  /** Default constructor. */
  @Deprecated
  public S_Analyzer_main() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public S_Analyzer_main(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public S_Analyzer_main(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\002\004\000\002\002" +
    "\004\000\002\022\014\000\002\020\003\000\002\020\007" +
    "\000\002\020\002\000\002\021\004\000\002\021\006\000" +
    "\002\003\003\000\002\003\003\000\002\003\003\000\002" +
    "\003\003\000\002\007\047\000\002\004\027\000\002\011" +
    "\013\000\002\011\011\000\002\012\012\000\002\012\012" +
    "\000\002\012\012\000\002\012\012\000\002\012\012\000" +
    "\002\010\027\000\002\013\014\000\002\013\012\000\002" +
    "\014\012\000\002\014\010\000\002\014\012\000\002\014" +
    "\012\000\002\014\012\000\002\014\012\000\002\005\071" +
    "\000\002\006\051\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\017\004\000\002\017\004\000\002" +
    "\017\003\000\002\017\003\000\002\016\004\000\002\016" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\004\004\005\001\002\000\006\002\ufffb\004" +
    "\030\001\002\000\004\006\010\001\002\000\004\002\007" +
    "\001\002\000\004\002\001\001\002\000\004\010\011\001" +
    "\002\000\004\011\012\001\002\000\004\007\013\001\002" +
    "\000\004\013\014\001\002\000\004\012\015\001\002\000" +
    "\004\013\016\001\002\000\004\006\017\001\002\000\004" +
    "\005\020\001\002\000\006\002\ufffe\004\ufffe\001\002\000" +
    "\006\002\ufff6\004\ufff6\001\002\000\004\002\ufffd\001\002" +
    "\000\006\002\ufff7\004\ufff7\001\002\000\004\002\000\001" +
    "\002\000\006\002\ufff8\004\ufff8\001\002\000\006\002\ufff5" +
    "\004\ufff5\001\002\000\004\002\uffff\001\002\000\006\006" +
    "\032\014\031\001\002\000\006\015\153\045\154\001\002" +
    "\000\004\010\033\001\002\000\004\011\034\001\002\000" +
    "\004\007\035\001\002\000\004\013\036\001\002\000\004" +
    "\012\037\001\002\000\004\013\040\001\002\000\004\006" +
    "\041\001\002\000\004\005\042\001\002\000\004\004\043" +
    "\001\002\000\004\014\044\001\002\000\004\015\045\001" +
    "\002\000\004\016\046\001\002\000\004\013\047\001\002" +
    "\000\006\020\050\021\051\001\002\000\004\013\104\001" +
    "\002\000\004\013\052\001\002\000\004\005\053\001\002" +
    "\000\004\023\054\001\002\000\004\013\055\001\002\000" +
    "\004\036\056\001\002\000\004\013\057\001\002\000\004" +
    "\016\060\001\002\000\004\025\061\001\002\000\004\023" +
    "\062\001\002\000\004\013\063\001\002\000\004\032\064" +
    "\001\002\000\004\013\065\001\002\000\004\016\066\001" +
    "\002\000\004\013\067\001\002\000\010\030\071\041\070" +
    "\054\073\001\002\000\004\013\uffdf\001\002\000\004\013" +
    "\uffe0\001\002\000\004\013\074\001\002\000\004\013\uffde" +
    "\001\002\000\004\024\075\001\002\000\004\026\076\001" +
    "\002\000\004\024\077\001\002\000\004\004\100\001\002" +
    "\000\004\031\101\001\002\000\004\014\102\001\002\000" +
    "\004\005\103\001\002\000\006\002\uffe1\004\uffe1\001\002" +
    "\000\004\005\105\001\002\000\004\023\106\001\002\000" +
    "\004\013\107\001\002\000\004\036\110\001\002\000\004" +
    "\013\111\001\002\000\004\016\112\001\002\000\004\025" +
    "\113\001\002\000\004\023\114\001\002\000\004\013\115" +
    "\001\002\000\004\037\116\001\002\000\004\013\117\001" +
    "\002\000\004\016\120\001\002\000\004\013\121\001\002" +
    "\000\010\030\071\041\070\054\073\001\002\000\004\013" +
    "\123\001\002\000\004\027\124\001\002\000\004\013\125" +
    "\001\002\000\004\017\126\001\002\000\004\013\127\001" +
    "\002\000\004\016\130\001\002\000\004\013\131\001\002" +
    "\000\010\030\071\041\070\054\073\001\002\000\004\013" +
    "\133\001\002\000\004\027\134\001\002\000\004\013\135" +
    "\001\002\000\004\040\136\001\002\000\004\013\137\001" +
    "\002\000\004\016\140\001\002\000\004\013\141\001\002" +
    "\000\010\030\071\041\070\054\073\001\002\000\004\013" +
    "\143\001\002\000\004\024\144\001\002\000\004\026\145" +
    "\001\002\000\004\024\146\001\002\000\004\004\147\001" +
    "\002\000\004\031\150\001\002\000\004\014\151\001\002" +
    "\000\004\005\152\001\002\000\006\002\uffe2\004\uffe2\001" +
    "\002\000\004\016\377\001\002\000\004\005\155\001\002" +
    "\000\004\004\160\001\002\000\004\004\160\001\002\000" +
    "\004\002\ufffc\001\002\000\010\006\032\014\162\044\161" +
    "\001\002\000\004\014\374\001\002\000\004\015\163\001" +
    "\002\000\004\016\164\001\002\000\004\013\165\001\002" +
    "\000\006\017\167\046\166\001\002\000\004\013\266\001" +
    "\002\000\004\013\170\001\002\000\004\005\171\001\002" +
    "\000\004\023\172\001\002\000\004\013\173\001\002\000" +
    "\004\036\174\001\002\000\004\013\175\001\002\000\004" +
    "\016\176\001\002\000\004\025\177\001\002\000\004\023" +
    "\200\001\002\000\004\013\210\001\002\000\004\026\202" +
    "\001\002\000\004\024\203\001\002\000\004\004\204\001" +
    "\002\000\004\031\205\001\002\000\004\014\206\001\002" +
    "\000\004\005\207\001\002\000\006\002\ufff3\004\ufff3\001" +
    "\002\000\014\032\222\033\223\034\225\035\224\042\221" +
    "\001\002\000\004\013\210\001\002\000\004\013\210\001" +
    "\002\000\004\013\210\001\002\000\004\013\210\001\002" +
    "\000\004\024\216\001\002\000\006\026\ufff1\027\217\001" +
    "\002\000\004\023\200\001\002\000\004\026\ufff2\001\002" +
    "\000\004\013\260\001\002\000\004\013\252\001\002\000" +
    "\004\013\244\001\002\000\004\013\236\001\002\000\004" +
    "\013\226\001\002\000\004\016\227\001\002\000\004\013" +
    "\230\001\002\000\004\041\231\001\002\000\006\013\uffd8" +
    "\041\231\001\002\000\004\013\233\001\002\000\004\027" +
    "\234\001\002\000\006\013\uffee\024\uffee\001\002\000\004" +
    "\013\uffd9\001\002\000\004\016\237\001\002\000\004\013" +
    "\240\001\002\000\004\041\231\001\002\000\004\013\242" +
    "\001\002\000\004\027\243\001\002\000\006\013\uffed\024" +
    "\uffed\001\002\000\004\016\245\001\002\000\004\013\246" +
    "\001\002\000\010\030\071\041\070\054\073\001\002\000" +
    "\004\013\250\001\002\000\004\027\251\001\002\000\006" +
    "\013\uffef\024\uffef\001\002\000\004\016\253\001\002\000" +
    "\004\013\254\001\002\000\010\030\071\041\070\054\073" +
    "\001\002\000\004\013\256\001\002\000\004\027\257\001" +
    "\002\000\006\013\ufff0\024\ufff0\001\002\000\004\016\261" +
    "\001\002\000\004\013\262\001\002\000\004\043\263\001" +
    "\002\000\004\013\264\001\002\000\004\027\265\001\002" +
    "\000\006\013\uffec\024\uffec\001\002\000\004\005\267\001" +
    "\002\000\004\023\270\001\002\000\004\013\271\001\002" +
    "\000\004\047\272\001\002\000\004\013\273\001\002\000" +
    "\004\016\274\001\002\000\004\025\275\001\002\000\004" +
    "\023\277\001\002\000\004\026\366\001\002\000\004\013" +
    "\300\001\002\000\016\034\316\042\312\050\315\051\317" +
    "\052\313\053\314\001\002\000\004\013\300\001\002\000" +
    "\004\013\300\001\002\000\004\013\300\001\002\000\004" +
    "\013\300\001\002\000\004\013\300\001\002\000\004\024" +
    "\307\001\002\000\006\026\uffe9\027\310\001\002\000\004" +
    "\023\277\001\002\000\004\026\uffea\001\002\000\004\013" +
    "\360\001\002\000\004\013\352\001\002\000\004\013\344" +
    "\001\002\000\004\013\336\001\002\000\004\013\324\001" +
    "\002\000\004\013\320\001\002\000\004\016\321\001\002" +
    "\000\004\054\322\001\002\000\004\027\323\001\002\000" +
    "\006\013\uffe7\024\uffe7\001\002\000\004\016\325\001\002" +
    "\000\004\013\326\001\002\000\006\030\330\041\327\001" +
    "\002\000\010\013\uffda\030\330\041\327\001\002\000\010" +
    "\013\uffdb\030\330\041\327\001\002\000\004\013\332\001" +
    "\002\000\004\027\333\001\002\000\006\013\uffe6\024\uffe6" +
    "\001\002\000\004\013\uffdd\001\002\000\004\013\uffdc\001" +
    "\002\000\004\016\337\001\002\000\004\013\340\001\002" +
    "\000\004\055\341\001\002\000\004\013\342\001\002\000" +
    "\004\027\343\001\002\000\006\013\uffe8\024\uffe8\001\002" +
    "\000\004\016\345\001\002\000\004\013\346\001\002\000" +
    "\004\041\231\001\002\000\004\013\350\001\002\000\004" +
    "\027\351\001\002\000\006\013\uffe4\024\uffe4\001\002\000" +
    "\004\016\353\001\002\000\004\013\354\001\002\000\006" +
    "\030\330\041\327\001\002\000\004\013\356\001\002\000" +
    "\004\027\357\001\002\000\006\013\uffe5\024\uffe5\001\002" +
    "\000\004\016\361\001\002\000\004\013\362\001\002\000" +
    "\004\043\363\001\002\000\004\013\364\001\002\000\004" +
    "\027\365\001\002\000\006\013\uffe3\024\uffe3\001\002\000" +
    "\004\024\367\001\002\000\004\004\370\001\002\000\004" +
    "\031\371\001\002\000\004\014\372\001\002\000\004\005" +
    "\373\001\002\000\006\002\uffeb\004\uffeb\001\002\000\004" +
    "\005\375\001\002\000\004\002\ufff9\001\002\000\004\002" +
    "\ufffa\001\002\000\004\013\u0100\001\002\000\010\017\167" +
    "\022\u0101\046\166\001\002\000\004\013\u0102\001\002\000" +
    "\004\005\u0103\001\002\000\004\023\u0104\001\002\000\004" +
    "\013\u0105\001\002\000\004\036\u0106\001\002\000\004\013" +
    "\u0107\001\002\000\004\016\u0108\001\002\000\004\025\u0109" +
    "\001\002\000\004\023\u010a\001\002\000\004\013\u010b\001" +
    "\002\000\004\032\u010c\001\002\000\004\013\u010d\001\002" +
    "\000\004\016\u010e\001\002\000\004\013\u010f\001\002\000" +
    "\010\030\071\041\070\054\073\001\002\000\004\013\u0111" +
    "\001\002\000\004\027\u0112\001\002\000\004\013\u0113\001" +
    "\002\000\004\033\u0114\001\002\000\004\013\u0115\001\002" +
    "\000\004\016\u0116\001\002\000\004\013\u0117\001\002\000" +
    "\010\030\071\041\070\054\073\001\002\000\004\013\u0119" +
    "\001\002\000\004\024\u011a\001\002\000\004\026\u011b\001" +
    "\002\000\004\024\u011c\001\002\000\004\004\u011d\001\002" +
    "\000\004\031\u011e\001\002\000\004\014\u011f\001\002\000" +
    "\004\005\u0120\001\002\000\004\002\ufff4\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u011e\000\006\002\005\022\003\001\001\000\020\003" +
    "\021\004\024\005\022\006\020\007\026\010\025\020\023" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\015\071\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\121" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\131\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\141\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\003" +
    "\155\004\024\005\022\006\020\010\025\021\156\001\001" +
    "\000\016\003\155\004\024\005\022\006\020\010\025\021" +
    "\375\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\011\200\001\001\000\004\012\210\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\211\001\001" +
    "\000\004\012\212\001\001\000\004\012\213\001\001\000" +
    "\004\012\214\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\011\217\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\231\001\001\000\004\016\234\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\016\240" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\246" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\015\254" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\013\275\001\001\000\002\001\001\000\004" +
    "\014\300\001\001\000\002\001\001\000\004\014\301\001" +
    "\001\000\004\014\302\001\001\000\004\014\303\001\001" +
    "\000\004\014\304\001\001\000\004\014\305\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\310\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\330\001\001\000\004\017\334\001\001\000" +
    "\004\017\333\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\016\346\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\354\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\015\u010f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\015\u0117\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$S_Analyzer_main$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$S_Analyzer_main$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$S_Analyzer_main$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public String requestName = null;

    //Variables para almacenar los datos de los usuarios nuevos
    public String userName = null;
    public String password = null;
    public String name = null;
    public String institution = null;
    public String date = null;

    //Listas para almacenar los datos de los usuarios logeados
    public static LinkedList<login> loginList = new LinkedList<login>();

    //Listas para almacenar los datos de los usuarios nuevos
    public static LinkedList<newUser> newUserList = new LinkedList<newUser>();
    private LinkedList<String> userNameList = new LinkedList<String>();
    private LinkedList<String> passwordList = new LinkedList<String>();
    private LinkedList<String> nameList = new LinkedList<String>();
    private LinkedList<String> institutionList = new LinkedList<String>();
    private LinkedList<String> dateList = new LinkedList<String>();

    //Listas para almacenar los datos de la trivia nueva
    public static LinkedList<newTrivia> newTriviaList = new LinkedList<newTrivia>();
    private LinkedList<String> idTriviaList = new LinkedList<String>();
    private LinkedList<String> timeList = new LinkedList<String>();
    private LinkedList<String> nameListTrivia = new LinkedList<String>();
    private LinkedList<String> temaList = new LinkedList<String>();
    private LinkedList<String> usuarioTriviaList = new LinkedList<String>();
    private LinkedList<String> dateTriviaList = new LinkedList<String>();

    //Metodo al que se llama automaticamente ante algun error sintactico
    public void syntax_error(Symbol s)
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico Recuperado !!!!!!!");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        login data = new login("error", "errror");
        loginList.add(0, data);
        requestName = "error";
        cleandata();
    }

    //Metodo al que se llama en el momento en que ya no es posible una recuperacion de errores
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception
    {
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;

        System.out.println("!!!!!!! Error Sintactico, Panic Mode !!!!!!! ");
        System.out.println("\t\tLexema: "+lexema);
        System.out.println("\t\tFila: "+fila);
        System.out.println("\t\tColumna: "+columna);

        login data = new login("error", "errror");
        loginList.add(0, data);
        requestName = "error";
        cleandata();
    }

    private void cleandata(){
        requestName = "error";
        userName = "error";
        password = "error";
        name = "error";
        institution = "error";
        date = "error";
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$S_Analyzer_main$actions {




  private final S_Analyzer_main parser;

  /** Constructor */
  CUP$S_Analyzer_main$actions(S_Analyzer_main parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_main$do_action_part00000000(
    int                        CUP$S_Analyzer_main$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_main$parser,
    java.util.Stack            CUP$S_Analyzer_main$stack,
    int                        CUP$S_Analyzer_main$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$S_Analyzer_main$result;

      /* select the action based on the action number */
      switch (CUP$S_Analyzer_main$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).right;
		String start_val = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).value;
		RESULT = start_val;
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$S_Analyzer_main$parser.done_parsing();
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= HEADER LOOP 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= HEADER LOGINUSUARIO 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // HEADER ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("HEADER",16, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-9)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LOOP ::= SINGLEREQUEST 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOOP",14, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // LOOP ::= LessThan ExclamationMark RealizarSolicitudes GreaterThan LOOP2 
            {
              String RESULT =null;
		System.out.println("Entra en sentencia multiple");
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOOP",14, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-4)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LOOP ::= 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOOP",14, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LOOP2 ::= SINGLEREQUEST LOOP2 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOOP2",15, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LOOP2 ::= LessThan FinSolicitudes ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Fin de sentencias multiples");
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOOP2",15, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-3)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // SINGLEREQUEST ::= USUARIONUEVO 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // SINGLEREQUEST ::= MODIFICARUSUARIO 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // SINGLEREQUEST ::= ELIMINARUSUARIO 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // SINGLEREQUEST ::= NUEVATRIVIA 
            {
              String RESULT =null;

              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("SINGLEREQUEST",1, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LOGINUSUARIO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark LoginUsuario QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket LeftBrace QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		int usernameleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-16)).left;
		int usernameright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-16)).right;
		String username = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-16)).value;
		int passwordleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-8)).left;
		int passwordright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-8)).right;
		String password = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-8)).value;
		System.out.println("Sentencia de login reconocida y aceptada");
                   requestName = "login";
                   login data = new login(username, password);
                   loginList.add(0, data);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("LOGINUSUARIO",5, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-36)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // USUARIONUEVO ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark UsuarioNuevo QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket NEWUSERLOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		requestName = "nuevo";
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("USUARIONUEVO",2, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace Comma NEWUSERLOOP 
            {
              String RESULT =null;
		newUser data = new newUser(userNameList.poll(), passwordList.poll(), nameList.poll(), institutionList.poll(), dateList.poll());
                newUserList.add(data);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-8)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // NEWUSERLOOP ::= LeftBrace NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK NEWUSERBLOCK RightBrace 
            {
              String RESULT =null;
		newUser data = new newUser(userNameList.poll(), passwordList.poll(), nameList.poll(), institutionList.poll(), dateList.poll());
                newUserList.add(data);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERLOOP",7, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-6)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // NEWUSERBLOCK ::= QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              String RESULT =null;
		int usernameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int usernameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String usernameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		userName = (String) usernameVal;
                userNameList.add(userName);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // NEWUSERBLOCK ::= QuotationMark Password QuotationMark Colon QuotationMark VALUES QuotationMark Comma 
            {
              String RESULT =null;
		int passwordValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int passwordValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String passwordVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		password = (String) passwordVal;
                 passwordList.add(password);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // NEWUSERBLOCK ::= QuotationMark Nombre QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              String RESULT =null;
		int nameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int nameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String nameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		name = (String) nameVal;
                nameList.add(name);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // NEWUSERBLOCK ::= QuotationMark Institucion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              String RESULT =null;
		int institutionValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int institutionValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String institutionVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		institution = (String) institutionVal;
                institutionList.add(institution);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // NEWUSERBLOCK ::= QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              String RESULT =null;
		int dateValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int dateValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String dateVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		date = (String) dateVal;
                dateList.add(date);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWUSERBLOCK",8, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // NUEVATRIVIA ::= LessThan ExclamationMark RealizarSolicitud Colon QuotationMark NuevaTrivia QuotationMark GreaterThan LeftBrace QuotationMark ParametrosTrivia QuotationMark Colon LeftBracket NEWTRIVIALOOP RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Sentencia de nueva trivia reconocida y aceptada");
                requestName = "nuevaTrivia";
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NUEVATRIVIA",6, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-20)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // NEWTRIVIALOOP ::= LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace Comma NEWTRIVIALOOP 
            {
              String RESULT =null;
		newTrivia data = new newTrivia(idTriviaList.poll(), timeList.poll(), nameListTrivia.poll(), temaList.poll(), usuarioTriviaList.poll(),
                                                dateTriviaList.poll());
                newTriviaList.add(data);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIALOOP",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-9)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // NEWTRIVIALOOP ::= LeftBrace NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK NEWTRIVIABLOCK RightBrace 
            {
              String RESULT =null;
		newTrivia data = new newTrivia(idTriviaList.poll(), timeList.poll(), nameListTrivia.poll(), temaList.poll(), usuarioTriviaList.poll(),
                                                 dateTriviaList.poll());
                newTriviaList.add(data);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIALOOP",9, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // NEWTRIVIABLOCK ::= QuotationMark IDTriviaSentence QuotationMark Colon QuotationMark IDTrivia QuotationMark Comma 
            {
              String RESULT =null;
		int idTriviaValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int idTriviaValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String idTriviaVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		idTriviaList.add(String.valueOf(idTriviaVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // NEWTRIVIABLOCK ::= QuotationMark TiempoPregunta QuotationMark Colon Time Comma 
            {
              String RESULT =null;
		int timeValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).left;
		int timeValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).right;
		String timeVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).value;
		timeList.add(String.valueOf(timeVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-5)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // NEWTRIVIABLOCK ::= QuotationMark Nombre QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma 
            {
              String RESULT =null;
		int nameValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int nameValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String nameVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		nameListTrivia.add(String.valueOf(nameVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // NEWTRIVIABLOCK ::= QuotationMark Tema QuotationMark Colon QuotationMark VALUESCONCAT QuotationMark Comma 
            {
              String RESULT =null;
		int temaValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int temaValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String temaVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		temaList.add(String.valueOf(temaVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // NEWTRIVIABLOCK ::= QuotationMark UsuarioCreacion QuotationMark Colon QuotationMark NAMES QuotationMark Comma 
            {
              String RESULT =null;
		int usuarioValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int usuarioValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String usuarioVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		usuarioTriviaList.add(String.valueOf(usuarioVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // NEWTRIVIABLOCK ::= QuotationMark FechaCreacion QuotationMark Colon QuotationMark Date QuotationMark Comma 
            {
              String RESULT =null;
		int dateValleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).left;
		int dateValright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).right;
		String dateVal = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-2)).value;
		dateTriviaList.add(String.valueOf(dateVal));
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NEWTRIVIABLOCK",10, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-7)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // MODIFICARUSUARIO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark ModificarUsuario QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket LeftBrace QuotationMark UsuarioAntiguo QuotationMark Colon QuotationMark VALUES QuotationMark Comma QuotationMark UsuarioNuevo QuotationMark Colon QuotationMark VALUES QuotationMark Comma QuotationMark NuevoPassword QuotationMark Colon QuotationMark VALUES QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Sentencia de modificacion de usuario reconocida y aceptada");
                    requestName = "modificar";
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("MODIFICARUSUARIO",3, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-54)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELIMINARUSUARIO ::= LessThan QuestionMark XSONsentence Version Equal QuotationMark VersionNumber QuotationMark QuestionMark GreaterThan LessThan ExclamationMark RealizarSolicitud Colon QuotationMark EliminarUsuario QuotationMark GreaterThan LeftBrace QuotationMark DatosUsuario QuotationMark Colon LeftBracket LeftBrace QuotationMark Usuario QuotationMark Colon QuotationMark VALUES QuotationMark RightBrace RightBracket RightBrace LessThan FinSolicitud ExclamationMark GreaterThan 
            {
              String RESULT =null;
		System.out.println("Sentencia de eliminacion de usuario reconocida y aceptada");
                    requestName = "eliminar";
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("ELIMINARUSUARIO",4, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-38)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // VALUES ::= Values 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // VALUES ::= niValue 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(b);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // VALUES ::= Time 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUES",11, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // VALUESCONCAT ::= Values VALUESCONCAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // VALUESCONCAT ::= niValue VALUESCONCAT 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // VALUESCONCAT ::= Values 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // VALUESCONCAT ::= niValue 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("VALUESCONCAT",13, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // NAMES ::= niValue NAMES 
            {
              String RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(a) + " " + String.valueOf(b);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NAMES",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.elementAt(CUP$S_Analyzer_main$top-1)), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // NAMES ::= niValue 
            {
              String RESULT =null;
		int bleft = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$S_Analyzer_main$stack.peek()).value;
		RESULT = String.valueOf(b);
              CUP$S_Analyzer_main$result = parser.getSymbolFactory().newSymbol("NAMES",12, ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), ((java_cup.runtime.Symbol)CUP$S_Analyzer_main$stack.peek()), RESULT);
            }
          return CUP$S_Analyzer_main$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$S_Analyzer_main$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$S_Analyzer_main$do_action(
    int                        CUP$S_Analyzer_main$act_num,
    java_cup.runtime.lr_parser CUP$S_Analyzer_main$parser,
    java.util.Stack            CUP$S_Analyzer_main$stack,
    int                        CUP$S_Analyzer_main$top)
    throws java.lang.Exception
    {
              return CUP$S_Analyzer_main$do_action_part00000000(
                               CUP$S_Analyzer_main$act_num,
                               CUP$S_Analyzer_main$parser,
                               CUP$S_Analyzer_main$stack,
                               CUP$S_Analyzer_main$top);
    }
}

}
